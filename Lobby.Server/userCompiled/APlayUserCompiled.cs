/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using Lobby.Server;
namespace Lobby.Server
{
  public interface  IAPlayFactory
  {
  };
}
namespace Lobby.Server
{
  public interface  IAPlayUserResolveEngine
  {
  };
}
namespace Lobby.Server
{
  public interface  IClientImpl
  {
    bool IsAdmin {get; }
    String RemoteAddress {get; }
    ulong APlayClientId {get; }
    Lobby.Server.User CurrentUser {get; }
    bool CanJoinProject {get; set; }
    bool CanCreateProject {get; set; }
    Lobby.Server.ProjectList Projects {get; set; }
    Lobby.Server.Project SelectedProject {get; set; }
    Lobby.Server.Client DataClient {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void JoinedProject (Lobby.Server.Project project__);
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void forceClientDisconnect (String reason);
  };
}
namespace Lobby.Server
{
  public interface  IClientEvents
  {
    void onCurrentUserChange (Lobby.Server.User NewCurrentUser__);
    void onJoinProject (Lobby.Server.Client sender__, int projectId__);
    void onCreateProject (Lobby.Server.Client sender__, String name__);
    void onSearchProjects (String searchString__);
    void onSelectProject (int projectId__);
  };
}
namespace Lobby.Server
{
  public interface  IClientSkeleton : Lobby.Server.IClientImpl, APlay.Generated.Intern.Server.__IClientAPEvents, Lobby.Server.IClientEvents
  {
  };
}
namespace Lobby.Server
{
  public interface  IClientFactory
  {
    Lobby.Server.Client CreateClient ();
  };
}
namespace Lobby.Server
{
  public interface  IProjectImpl
  {
    int Id {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
  };
}
namespace Lobby.Server
{
  public interface  IProjectEvents
  {
    void onIdChange (int NewId__);
  };
}
namespace Lobby.Server
{
  public interface  IProjectSkeleton : Lobby.Server.IProjectImpl, APlay.Generated.Intern.Server.__IProjectAPEvents, Lobby.Server.IProjectEvents
  {
  };
}
namespace Lobby.Server
{
  public interface  IProjectFactory
  {
    Lobby.Server.Project CreateProject ();
  };
}
namespace Lobby.Server
{
  public interface  IUserImpl
  {
    String Name {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
  };
}
namespace Lobby.Server
{
  public interface  IUserEvents
  {
    void onNameChange (String NewName__);
  };
}
namespace Lobby.Server
{
  public interface  IUserSkeleton : Lobby.Server.IUserImpl, APlay.Generated.Intern.Server.__IUserAPEvents, Lobby.Server.IUserEvents
  {
  };
}
namespace Lobby.Server
{
  public interface  IUserFactory
  {
    Lobby.Server.User CreateUser ();
  };
}
namespace Lobby.Server
{
  public interface  IAPlayServerEvents
  {
    void onClientConnect (Lobby.Server.Client client);
    void onClientDisconnect (Lobby.Server.Client client);
    void onCloudReady ();
    void onCloudFailed (String reason);
    void onUserException (Exception ex);
  };
}
namespace Lobby.Server
{
  public interface  IAPlayServerImpl
  {
    void InitPersistence (String hostName, int port, String userName, String password, String databaseName);
    void InitPersistenceOdbc (String connString);
    void InitAsSingle ();
    void InitAsMaster (String publicClientAddress, String serverToServerAddress, String masterServerListenAddress);
    void InitAsSlave (String publicClientAddress, String serverToServerAddress, String masterServerAddress);
    void StartForClients (String clientAddress);
    void StopForClients ();
    bool Stop ();
    void StartUnityCrossDomainServer (String listenAddress);
    void StartFlashCrossDomainServer (String listenAddress);
    APlay.Server.Statistics GetStatistic ();
    bool IsMaster ();
    DateTime GetSyncedTime ();
    void SetExternLogger (APlay.Common.Logging.IExternLogger logger);
    String GetVersionString ();
  };
}
namespace Lobby.Server
{
  public interface  IAPlayServerSkeleton
  {
  };
}
namespace Lobby.Server
{
  public interface  IUserObjectFactory : Lobby.Server.IClientUserFactory, Lobby.Server.IProjectUserFactory, Lobby.Server.IUserUserFactory
  {
  };
}
namespace Lobby.Server
{
  public interface  IClientUserFactory
  {
    Lobby.Server.IClientImpl CreateClient ();
  };
}
namespace Lobby.Server
{
  public interface  IProjectUserFactory
  {
    Lobby.Server.IProjectImpl CreateProject ();
  };
}
namespace Lobby.Server
{
  public interface  IUserUserFactory
  {
    Lobby.Server.IUserImpl CreateUser ();
  };
}
namespace Lobby.Server
{
  public partial class APlayFactory
  {
  }
  
}
namespace Lobby.Server
{
  public abstract partial class APlayServerSkeleton : Lobby.Server.IAPlayServerEvents, APlay.Generated.Intern.Server.IDesignedServer
  {
    public APlayServerSkeleton()
    {
      APlay.Generated.Intern.Server.DesignedServer server = new APlay.Generated.Intern.Server.DesignedServer(this);
      server.Factory = ((APlay.Generated.Intern.Server.IUserClassFactory) (new Lobby.Server.UserClassFactory()));
      impl = server;
    }
    public bool onStaticCallField(ushort typeId, ushort fieldId, APlay.Common.Protocol.MessageReader reader_, byte roleId, ulong senderId)
    {
      APlay.Common.Logging.Logger.LogDesigned(1,"onStaticCallField","Server.Designed");
      switch(roleId)
      {
        case 1: // []
        {
        break;
        }
      }
      return (true);
    }
    public abstract void onClientConnect(Lobby.Server.Client client);
    public void onInternClientConnect(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      if(ClientConnectEventHandler!=null)
      {
        ClientConnectEventHandler(((Lobby.Server.Client) (client)));
      }
      else
      {
        if(Lobby.Server.APlayServerSkeleton.StaticClientConnectEventHandler!=null)
        {
          Lobby.Server.APlayServerSkeleton.StaticClientConnectEventHandler(((Lobby.Server.Client) (client)), ((Lobby.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onClientConnect(((Lobby.Server.Client) (client)));
        }
      }
    }
    public abstract void onClientDisconnect(Lobby.Server.Client client);
    public void onInternClientDisconnect(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      if(ClientDisconnectEventHandler!=null)
      {
        ClientDisconnectEventHandler(((Lobby.Server.Client) (client)));
      }
      else
      {
        if(Lobby.Server.APlayServerSkeleton.StaticClientDisconnectEventHandler!=null)
        {
          Lobby.Server.APlayServerSkeleton.StaticClientDisconnectEventHandler(((Lobby.Server.Client) (client)), ((Lobby.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onClientDisconnect(((Lobby.Server.Client) (client)));
        }
      }
    }
    public virtual void onCloudReady()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCloudReady received","Server.Designed");
    }
    public void onInternCloudReady()
    {
      if(CloudReadyEventHandler!=null)
      {
        CloudReadyEventHandler();
      }
      else
      {
        if(Lobby.Server.APlayServerSkeleton.StaticCloudReadyEventHandler!=null)
        {
          Lobby.Server.APlayServerSkeleton.StaticCloudReadyEventHandler(((Lobby.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onCloudReady();
        }
      }
    }
    public virtual void onCloudFailed(String reason)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCloudFailed received","Server.Designed");
    }
    public void onInternCloudFailed(String reason)
    {
      if(CloudFailedEventHandler!=null)
      {
        CloudFailedEventHandler(reason);
      }
      else
      {
        if(Lobby.Server.APlayServerSkeleton.StaticCloudFailedEventHandler!=null)
        {
          Lobby.Server.APlayServerSkeleton.StaticCloudFailedEventHandler(reason, ((Lobby.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onCloudFailed(reason);
        }
      }
    }
    public virtual void onUserException(Exception ex)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onUserException received","Server.Designed");
    }
    public void onInternUserException(Exception ex)
    {
      if(UserExceptionEventHandler!=null)
      {
        UserExceptionEventHandler(((Exception) (ex)));
      }
      else
      {
        if(Lobby.Server.APlayServerSkeleton.StaticUserExceptionEventHandler!=null)
        {
          Lobby.Server.APlayServerSkeleton.StaticUserExceptionEventHandler(((Exception) (ex)), ((Lobby.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onUserException(((Exception) (ex)));
        }
      }
    }
    public void InitPersistence(String hostName, int port, String userName, String password, String databaseName)
    {
      impl.InitPersistence(hostName, port, userName, password, databaseName);
    }
    public void InitPersistenceOdbc(String connString)
    {
      impl.InitPersistenceOdbc(connString);
    }
    public void InitAsSingle()
    {
      impl.InitAsSingle();
    }
    public void InitAsMaster(String publicClientAddress, String serverToServerAddress, String masterServerListenAddress)
    {
      impl.InitAsMaster(publicClientAddress, serverToServerAddress, masterServerListenAddress);
    }
    public void InitAsSlave(String publicClientAddress, String serverToServerAddress, String masterServerAddress)
    {
      impl.InitAsSlave(publicClientAddress, serverToServerAddress, masterServerAddress);
    }
    public void StartForClients(String clientAddress)
    {
      impl.StartForClients(clientAddress);
    }
    public void StopForClients()
    {
      impl.StopForClients();
    }
    public bool Stop()
    {
      bool retu = impl.Stop();
      return (((bool) (retu)));
    }
    public void StartUnityCrossDomainServer(String listenAddress)
    {
      impl.StartUnityCrossDomainServer(listenAddress);
    }
    public void StartFlashCrossDomainServer(String listenAddress)
    {
      impl.StartFlashCrossDomainServer(listenAddress);
    }
    public APlay.Server.Statistics GetStatistic()
    {
      APlay.Server.Statistics retu = impl.GetStatistic();
      return (((APlay.Server.Statistics) (retu)));
    }
    public bool IsMaster()
    {
      bool retu = impl.IsMaster();
      return (((bool) (retu)));
    }
    public DateTime GetSyncedTime()
    {
      DateTime retu = impl.GetSyncedTime();
      return (((DateTime) (retu)));
    }
    public void SetExternLogger(APlay.Common.Logging.IExternLogger logger)
    {
      impl.SetExternLogger(((APlay.Common.Logging.IExternLogger) (logger)));
    }
    public String GetVersionString()
    {
      String retu = impl.GetVersionString();
      return (((String) (retu)));
    }
    public event Lobby.Server.Delegates.void_Client ClientConnectEventHandler;
    static public event Lobby.Server.Delegates.void_Client_APlayServerSkeleton StaticClientConnectEventHandler;
    public event Lobby.Server.Delegates.void_Client ClientDisconnectEventHandler;
    static public event Lobby.Server.Delegates.void_Client_APlayServerSkeleton StaticClientDisconnectEventHandler;
    public event Lobby.Server.Delegates.void_ CloudReadyEventHandler;
    static public event Lobby.Server.Delegates.void_APlayServerSkeleton StaticCloudReadyEventHandler;
    public event Lobby.Server.Delegates.void_String CloudFailedEventHandler;
    static public event Lobby.Server.Delegates.void_String_APlayServerSkeleton StaticCloudFailedEventHandler;
    public event Lobby.Server.Delegates.void_Exception UserExceptionEventHandler;
    static public event Lobby.Server.Delegates.void_Exception_APlayServerSkeleton StaticUserExceptionEventHandler;
    private APlay.Generated.Intern.Server.IDesignedServerImpl impl;
  }
  
}
namespace Lobby.Server
{
  public abstract partial class ClientSkeleton : Lobby.Server.IClientSkeleton, APlay.Generated.Intern.Server.__IClientAPEvents
  {
    public ClientSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setClientObject(((APlay.Generated.Intern.Server.__IClientAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setClientObject(APlayObjectFactory.CreateClientImpl());
      }
      ((APlay.Generated.Intern.Server.__Client) (this.getClientObject())).ClientHandler = ((APlay.Generated.Intern.Server.__IClientAPEvents) (((Lobby.Server.ClientSkeleton) (this))));
    }
    public virtual bool IsAdmin
    {
      get
      {
        {
          return (implClient.IsAdmin);
        }
      }
    }
    public virtual String RemoteAddress
    {
      get
      {
        {
          return (implClient.RemoteAddress);
        }
      }
    }
    public virtual ulong APlayClientId
    {
      get
      {
        {
          return (implClient.APlayClientId);
        }
      }
    }
    public virtual Lobby.Server.User CurrentUser
    {
      get
      {
        {
          return (((Lobby.Server.User) (implClient.CurrentUser)));
        }
      }
    }
    public virtual bool CanJoinProject
    {
      set
      {
        {
          //boolean
          implClient.CanJoinProject = value;
        }
      }
      get
      {
        {
          return (implClient.CanJoinProject);
        }
      }
    }
    public virtual bool CanCreateProject
    {
      set
      {
        {
          //boolean
          implClient.CanCreateProject = value;
        }
      }
      get
      {
        {
          return (implClient.CanCreateProject);
        }
      }
    }
    public virtual Lobby.Server.ProjectList Projects
    {
      set
      {
        {
          //Project
          implClient.Projects = ((APlay.Generated.Intern.Server.IProjectListEvents) (value));
        }
      }
      get
      {
        {
          return (((Lobby.Server.ProjectList) (implClient.Projects)));
        }
      }
    }
    public virtual Lobby.Server.Project SelectedProject
    {
      set
      {
        {
          //Project
          implClient.SelectedProject = ((APlay.Generated.Intern.Server.__IProjectAPEvents) (value));
        }
      }
      get
      {
        {
          return (((Lobby.Server.Project) (implClient.SelectedProject)));
        }
      }
    }
    public virtual Lobby.Server.Client DataClient
    {
      set
      {
        {
          //Client
          implClient.DataClient = ((APlay.Generated.Intern.Server.__IClientAPEvents) (value));
        }
      }
      get
      {
        {
          return (((Lobby.Server.Client) (implClient.DataClient)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implClient.APlayEntityId);
        }
      }
    }
    public virtual void onCurrentUserChange(Lobby.Server.User NewCurrentUser__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCurrentUserChange received","Server.Designed");
    }
    public void onInternCurrentUserChange(APlay.Generated.Intern.Server.__IUserAPEvents NewCurrentUser__)
    {
      if(CurrentUserChangeEventHandler!=null)
      {
        CurrentUserChangeEventHandler(((Lobby.Server.User) (NewCurrentUser__)));
      }
      else
      {
        if(Lobby.Server.ClientSkeleton.StaticCurrentUserChangeEventHandler!=null)
        {
          Lobby.Server.ClientSkeleton.StaticCurrentUserChangeEventHandler(((Lobby.Server.User) (NewCurrentUser__)), ((Lobby.Server.Client) (this)));
        }
        else
        {
          this.onCurrentUserChange(((Lobby.Server.User) (NewCurrentUser__)));
        }
      }
    }
    public abstract void onJoinProject(Lobby.Server.Client sender__, int projectId__);
    public void onInternJoinProject(APlay.Generated.Intern.Server.__IClientAPEvents sender__, int projectId__)
    {
      if(JoinProjectEventHandler!=null)
      {
        JoinProjectEventHandler(((Lobby.Server.Client) (sender__)), projectId__);
      }
      else
      {
        if(Lobby.Server.ClientSkeleton.StaticJoinProjectEventHandler!=null)
        {
          Lobby.Server.ClientSkeleton.StaticJoinProjectEventHandler(((Lobby.Server.Client) (sender__)), projectId__, ((Lobby.Server.Client) (this)));
        }
        else
        {
          this.onJoinProject(((Lobby.Server.Client) (sender__)), projectId__);
        }
      }
    }
    public abstract void onCreateProject(Lobby.Server.Client sender__, String name__);
    public void onInternCreateProject(APlay.Generated.Intern.Server.__IClientAPEvents sender__, String name__)
    {
      if(CreateProjectEventHandler!=null)
      {
        CreateProjectEventHandler(((Lobby.Server.Client) (sender__)), name__);
      }
      else
      {
        if(Lobby.Server.ClientSkeleton.StaticCreateProjectEventHandler!=null)
        {
          Lobby.Server.ClientSkeleton.StaticCreateProjectEventHandler(((Lobby.Server.Client) (sender__)), name__, ((Lobby.Server.Client) (this)));
        }
        else
        {
          this.onCreateProject(((Lobby.Server.Client) (sender__)), name__);
        }
      }
    }
    public abstract void onSearchProjects(String searchString__);
    public void onInternSearchProjects(String searchString__)
    {
      if(SearchProjectsEventHandler!=null)
      {
        SearchProjectsEventHandler(searchString__);
      }
      else
      {
        if(Lobby.Server.ClientSkeleton.StaticSearchProjectsEventHandler!=null)
        {
          Lobby.Server.ClientSkeleton.StaticSearchProjectsEventHandler(searchString__, ((Lobby.Server.Client) (this)));
        }
        else
        {
          this.onSearchProjects(searchString__);
        }
      }
    }
    public abstract void onSelectProject(int projectId__);
    public void onInternSelectProject(int projectId__)
    {
      if(SelectProjectEventHandler!=null)
      {
        SelectProjectEventHandler(projectId__);
      }
      else
      {
        if(Lobby.Server.ClientSkeleton.StaticSelectProjectEventHandler!=null)
        {
          Lobby.Server.ClientSkeleton.StaticSelectProjectEventHandler(projectId__, ((Lobby.Server.Client) (this)));
        }
        else
        {
          this.onSelectProject(projectId__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implClient.RequiresInit();
      return (((bool) (retu)));
    }
    public void JoinedProject(Lobby.Server.Project project__)
    {
      implClient.JoinedProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (project__)));
    }
    public bool Release()
    {
      bool retu = implClient.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implClient.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implClient.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implClient.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implClient.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implClient.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implClient.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implClient.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implClient.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void forceClientDisconnect(String reason)
    {
      implClient.forceClientDisconnect(reason);
    }
    public APlay.Generated.Intern.Server.__IClientAPImpl getClientObject()
    {
      return (implClient);
    }
    public void setClientObject(APlay.Generated.Intern.Server.__IClientAPImpl impl)
    {
      implClient = impl;
    }
    public event Lobby.Server.Delegates.void_User CurrentUserChangeEventHandler;
    static public event Lobby.Server.Delegates.void_User_Client StaticCurrentUserChangeEventHandler;
    public event Lobby.Server.Delegates.void_Client_int32 JoinProjectEventHandler;
    static public event Lobby.Server.Delegates.void_Client_int32_Client StaticJoinProjectEventHandler;
    public event Lobby.Server.Delegates.void_Client_WString CreateProjectEventHandler;
    static public event Lobby.Server.Delegates.void_Client_WString_Client StaticCreateProjectEventHandler;
    public event Lobby.Server.Delegates.void_WString SearchProjectsEventHandler;
    static public event Lobby.Server.Delegates.void_WString_Client StaticSearchProjectsEventHandler;
    public event Lobby.Server.Delegates.void_int32 SelectProjectEventHandler;
    static public event Lobby.Server.Delegates.void_int32_Client StaticSelectProjectEventHandler;
    private APlay.Generated.Intern.Server.__IClientAPImpl implClient;
  }
  
}
namespace Lobby.Server
{
  public abstract partial class ProjectSkeleton : Lobby.Server.IProjectSkeleton, APlay.Generated.Intern.Server.__IProjectAPEvents
  {
    public ProjectSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setProjectObject(((APlay.Generated.Intern.Server.__IProjectAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setProjectObject(APlayObjectFactory.CreateProjectImpl());
      }
      ((APlay.Generated.Intern.Server.__Project) (this.getProjectObject())).ProjectHandler = ((APlay.Generated.Intern.Server.__IProjectAPEvents) (((Lobby.Server.ProjectSkeleton) (this))));
    }
    public virtual int Id
    {
      get
      {
        {
          return (implProject.Id);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implProject.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Server.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(Lobby.Server.ProjectSkeleton.StaticIdChangeEventHandler!=null)
        {
          Lobby.Server.ProjectSkeleton.StaticIdChangeEventHandler(NewId__, ((Lobby.Server.Project) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implProject.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implProject.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implProject.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implProject.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implProject.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implProject.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implProject.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implProject.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implProject.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implProject.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__IProjectAPImpl getProjectObject()
    {
      return (implProject);
    }
    public void setProjectObject(APlay.Generated.Intern.Server.__IProjectAPImpl impl)
    {
      implProject = impl;
    }
    public event Lobby.Server.Delegates.void_int32 IdChangeEventHandler;
    static public event Lobby.Server.Delegates.void_int32_Project StaticIdChangeEventHandler;
    private APlay.Generated.Intern.Server.__IProjectAPImpl implProject;
  }
  
}
namespace Lobby.Server
{
  public abstract partial class UserSkeleton : Lobby.Server.IUserSkeleton, APlay.Generated.Intern.Server.__IUserAPEvents
  {
    public UserSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setUserObject(((APlay.Generated.Intern.Server.__IUserAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setUserObject(APlayObjectFactory.CreateUserImpl());
      }
      ((APlay.Generated.Intern.Server.__User) (this.getUserObject())).UserHandler = ((APlay.Generated.Intern.Server.__IUserAPEvents) (((Lobby.Server.UserSkeleton) (this))));
    }
    public virtual String Name
    {
      get
      {
        {
          return (implUser.Name);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implUser.APlayEntityId);
        }
      }
    }
    public virtual void onNameChange(String NewName__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onNameChange received","Server.Designed");
    }
    public void onInternNameChange(String NewName__)
    {
      if(NameChangeEventHandler!=null)
      {
        NameChangeEventHandler(NewName__);
      }
      else
      {
        if(Lobby.Server.UserSkeleton.StaticNameChangeEventHandler!=null)
        {
          Lobby.Server.UserSkeleton.StaticNameChangeEventHandler(NewName__, ((Lobby.Server.User) (this)));
        }
        else
        {
          this.onNameChange(NewName__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implUser.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implUser.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implUser.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implUser.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implUser.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implUser.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implUser.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implUser.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implUser.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implUser.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__IUserAPImpl getUserObject()
    {
      return (implUser);
    }
    public void setUserObject(APlay.Generated.Intern.Server.__IUserAPImpl impl)
    {
      implUser = impl;
    }
    public event Lobby.Server.Delegates.void_WString NameChangeEventHandler;
    static public event Lobby.Server.Delegates.void_WString_User StaticNameChangeEventHandler;
    private APlay.Generated.Intern.Server.__IUserAPImpl implUser;
  }
  
}
namespace Lobby.Server
{
  public partial struct ProjectDetail
  {
    public ProjectDetail(String Name__, String CreatedBy__, DateTime CreationDate__)
    {
      Name = Name__;
      CreatedBy = CreatedBy__;
      CreationDate = CreationDate__;
    }
    public String Name;
    public String CreatedBy;
    public DateTime CreationDate;
    public static bool operator ==(ProjectDetail a, ProjectDetail b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Name==b.Name)&& (a.CreatedBy==b.CreatedBy)&& (a.CreationDate==b.CreationDate);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(ProjectDetail))
      {
        return false;
      }
      ProjectDetail a = this;
      ProjectDetail b = (ProjectDetail)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Name==b.Name)&&(a.CreatedBy==b.CreatedBy)&&(a.CreationDate==b.CreationDate);
    }
    public override int GetHashCode()
    {
      return Name.GetHashCode() + CreatedBy.GetHashCode() + CreationDate.GetHashCode();
    }
    public static bool operator !=(ProjectDetail a, ProjectDetail b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Name.ToString()+"]" + "["+CreatedBy.ToString()+"]" + "["+CreationDate.ToString()+"]";
    }
  }
}
namespace Lobby.Server
{
  public partial class ProjectList : IList<Lobby.Server.Project>, APlay.Generated.Intern.Server.IProjectListEvents
  {
    public ProjectList()
    {
      APlay.Generated.Intern.Server.IProjectListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.ProjectList();
      }
    }
    public ProjectList(APlay.Generated.Intern.Server.IProjectListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.ProjectList();
      }
    }
    public static Lobby.Server.ProjectList CreateForAPlay(APlay.Generated.Intern.Server.IProjectListImpl impl)
    {
      Lobby.Server.ProjectList ob = new Lobby.Server.ProjectList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Server.IProjectListImpl getProjectObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Server.IProjectListImpl impl;
    
public int IndexOf(Lobby.Server.Project item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, Lobby.Server.Project item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public Lobby.Server.Project this[int index]
{
    get
    {
         
        return (Lobby.Server.Project)impl.get((int)index);
    }
    set
    {
        Lobby.Server.Project item =value;
        impl.setAt(index,item);
    }
}

public void Add(Lobby.Server.Project item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(Lobby.Server.Project item)
{
    return impl.contains(item);
}

public void CopyTo(Lobby.Server.Project[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (Lobby.Server.Project item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(Lobby.Server.Project item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<Lobby.Server.Project> GetEnumerator()
    {
        return new ProjectListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace Lobby.Server
{
  public partial class ProjectListEnumerator : IEnumerator<Lobby.Server.Project>
  {
    
        IEnumerator<APlay.Generated.Intern.Server.__Project> intern;
        public ProjectListEnumerator(IEnumerator<APlay.Generated.Intern.Server.__Project> intern)
        {
            this.intern = intern;
        }
        public Lobby.Server.Project Current
        {
            get { APlay.Generated.Intern.Server.__Project item = (APlay.Generated.Intern.Server.__Project)intern.Current; return ((Lobby.Server.Project) ((item==null)?null:item.__GetExternProject()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace Lobby.Server
{
  public partial class APlayObjectFactory
  {
    public static void SetUserFactory(Lobby.Server.IUserObjectFactory factory)
    {
      Client_ = factory;
      Project_ = factory;
      User_ = factory;
    }
    public static void SetAPlayDefaultFactory()
    {
      Client_ = null;
      Project_ = null;
      User_ = null;
    }
    public static void SetClientUserFactory(Lobby.Server.IClientUserFactory factory)
    {
      Client_ = factory;
    }
    public static void SetClientAPlayDefaultFactory()
    {
      Client_ = null;
    }
    public static APlay.Generated.Intern.Server.__IClientAPImpl CreateClientImpl()
    {
      if(Client_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateClient());
      }
    }
    public static void SetProjectUserFactory(Lobby.Server.IProjectUserFactory factory)
    {
      Project_ = factory;
    }
    public static void SetProjectAPlayDefaultFactory()
    {
      Project_ = null;
    }
    public static APlay.Generated.Intern.Server.__IProjectAPImpl CreateProjectImpl()
    {
      if(Project_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateProject());
      }
    }
    public static void SetUserUserFactory(Lobby.Server.IUserUserFactory factory)
    {
      User_ = factory;
    }
    public static void SetUserAPlayDefaultFactory()
    {
      User_ = null;
    }
    public static APlay.Generated.Intern.Server.__IUserAPImpl CreateUserImpl()
    {
      if(User_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateUser());
      }
    }
    static private Lobby.Server.IClientUserFactory Client_;
    static private Lobby.Server.IProjectUserFactory Project_;
    static private Lobby.Server.IUserUserFactory User_;
  }
  
}
namespace Lobby.Server
{
  public partial class UserClassFactory : APlay.Generated.Intern.Server.IUserClassFactory
  {
    public APlay.Generated.Intern.Server.__IClientAPEvents CreateClientEvents(APlay.Generated.Intern.Server.__IClientAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IClientAPEvents retu__ = ((APlay.Generated.Intern.Server.__IClientAPEvents) (new Lobby.Server.Client()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__IProjectAPEvents CreateProjectEvents(APlay.Generated.Intern.Server.__IProjectAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IProjectAPEvents retu__ = ((APlay.Generated.Intern.Server.__IProjectAPEvents) (new Lobby.Server.Project()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__IUserAPEvents CreateUserEvents(APlay.Generated.Intern.Server.__IUserAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IUserAPEvents retu__ = ((APlay.Generated.Intern.Server.__IUserAPEvents) (new Lobby.Server.User()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.IProjectListEvents CreateProjectListEvents(APlay.Generated.Intern.Server.IProjectListImpl impl)
    {
      return (((APlay.Generated.Intern.Server.IProjectListEvents) (Lobby.Server.ProjectList.CreateForAPlay(impl))));
    }
  }
  
}
namespace Lobby.Server
{
  public partial class APlayUserResolveEngine : APlay.Generated.Intern.Server.IAPlayResolve
  {
    public static void SetResolveEngine(Lobby.Server.IAPlayUserResolveEngine inter)
    {
      inter_ = inter;
      APlay.Generated.Intern.Server.APlayInternUserResolver.SetResolveEngine(new Lobby.Server.APlayUserResolveEngine());
    }
    static private Lobby.Server.IAPlayUserResolveEngine inter_;
  }
  
}
namespace Lobby.Server
{
  public partial class Delegates
  {
    public delegate void void_User(Lobby.Server.User NewCurrentUser__);
    public delegate void void_User_Client(Lobby.Server.User NewCurrentUser__, Lobby.Server.Client this_);
    public delegate void void_Client_int32(Lobby.Server.Client sender__, int projectId__);
    public delegate void void_Client_int32_Client(Lobby.Server.Client sender__, int projectId__, Lobby.Server.Client this_);
    public delegate void void_Client_WString(Lobby.Server.Client sender__, String name__);
    public delegate void void_Client_WString_Client(Lobby.Server.Client sender__, String name__, Lobby.Server.Client this_);
    public delegate void void_WString(String searchString__);
    public delegate void void_WString_Client(String searchString__, Lobby.Server.Client this_);
    public delegate void void_int32(int projectId__);
    public delegate void void_int32_Client(int projectId__, Lobby.Server.Client this_);
    public delegate void void_int32_Project(int NewId__, Lobby.Server.Project this_);
    public delegate void void_WString_User(String NewName__, Lobby.Server.User this_);
    public delegate void void_Client(Lobby.Server.Client client);
    public delegate void void_Client_APlayServerSkeleton(Lobby.Server.Client client, Lobby.Server.APlayServerSkeleton this_);
    public delegate void void_();
    public delegate void void_APlayServerSkeleton(Lobby.Server.APlayServerSkeleton this_);
    public delegate void void_String(String reason);
    public delegate void void_String_APlayServerSkeleton(String reason, Lobby.Server.APlayServerSkeleton this_);
    public delegate void void_Exception(Exception ex);
    public delegate void void_Exception_APlayServerSkeleton(Exception ex, Lobby.Server.APlayServerSkeleton this_);
  }
}
