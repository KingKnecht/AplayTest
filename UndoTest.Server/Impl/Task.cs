/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.Linq;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using sbardos.UndoFramework;
using Undo.Server;
namespace Undo.Server
{
    public class Task : Undo.Server.TaskSkeleton
    {
        private readonly IUndoService _undoService;

        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>
        /// <param name="description"></param>
        public Task()
        {

        }


        public Task(int id, bool isDone, string description, IUndoService undoService)
            : base()
        {
            Id = id;
            IsDone = isDone;
            _undoService = undoService;
            _undoService.ActiveStateChanged += _undoService_ActiveStateChanged;
            Description = description;
        }

        public Task(int id, ChangeSet changeSet, IUndoService undoService)
        {
            _undoService = undoService;
            _undoService.ActiveStateChanged += _undoService_ActiveStateChanged;

            Id = id;
            
            foreach (var change in changeSet.Where(c => c.ItemId == id))
            {
                IsDone = ((UndoObject) change.RedoObjectState).IsDone;
                Description = ((UndoObject)change.RedoObjectState).Description;
            }
        }

        void _undoService_ActiveStateChanged(object sender, ActiveStateChangedEventArgs e)
        {
            foreach (var change in e.ChangeSet.Where(c => c.OwnerId == Id))
            {
                var storedObject = e.ChangeDirection == StateChangeDirection.Undo
                    ? (UndoObject)change.UndoObjectState
                    : (UndoObject)change.RedoObjectState;

                if (change.ChangeReason == ChangeReason.Update)
                {

                    IsDone = storedObject.IsDone;
                    Description = storedObject.Description;

                    APlay.Common.Logging.Logger.LogDesigned(2,
                        "ActiveStateChanged received and updated state. OwnerId: " + change.OwnerId,
                        "Undo.Server.Task");
                }
            }
        }

        public override void onSetDone(bool done__, Client client__)
        {
            if (done__ == IsDone)
                return;

            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Task.onSetDone called", "Undo.Server.Task");

            _undoService.AddUpdate(new UndoObject(Id, IsDone, Description), new UndoObject(Id, done__, Description),
                "Updating Task: IsDone:" + done__, client__.Id);

            IsDone = done__;
        }

        public override void onSetTaskDescription(String description__, Client client__)
        {
            if (description__ == Description)
                return;

            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Task.onSetTaskDescription called", "Undo.Server.Task");

            _undoService.AddUpdate(new UndoObject(Id, IsDone, Description), new UndoObject(Id, IsDone, description__),
                "Updating Task: Description:" + description__, client__.Id);

            Description = description__;
        }

        internal IUndoable CreateUndoObject()
        {
            return new UndoObject(Id, IsDone, Description);
        }

        internal struct UndoObject : IUndoable
        {
            public UndoObject(int id, bool isDone, string description)
                : this()
            {
                Id = id;
                IsDone = isDone;
                Description = description;
            }
            public int Id { get; private set; }
            public string Dump()
            {
                return "Id: " + Id + ", IsDone: " + IsDone + ", Descr.: " + Description;
            }

            public bool IsDone { get; private set; }

            public string Description { get; private set; }


        }


    }

}
