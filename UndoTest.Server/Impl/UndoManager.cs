/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.Linq;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlay.Generated.Intern.Server;
using sbardos.UndoFramework;
using Undo.Server;
namespace Undo.Server
{
    public class UndoManager : Undo.Server.UndoManagerSkeleton
    {
        private readonly IUndoService _undoService;
        private readonly int _clientId;

        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>

        public UndoManager()
        {
            /// TODO: add your code here
        }

        public UndoManager(IUndoService undoService, int clientId)
        {
            _clientId = clientId;
            _undoService = undoService;
            _undoService.ActiveStateChanged += _undoService_ActiveStateChanged;
            _undoService.StackChanged += _undoService_StackChanged;

        }

        void _undoService_StackChanged(object sender, StackChangedEventArgs e)
        {
            if (e.ClientId != _clientId)
            {
                return;
            }

            foreach (var historyChange in e.HistoryChanges)
            {
                if (historyChange.ChangeType == HistoryEntryChangeType.Added)
                {
                    History.Add(new HistoryEntry(historyChange.HistoryEntry.Id, historyChange.HistoryEntry.Description));
                }
                else if (historyChange.ChangeType == HistoryEntryChangeType.Removed)
                {
                    var toBeRemoved = History.First(entry => entry.Id == historyChange.HistoryEntry.Id);
                    History.Remove(toBeRemoved);
                }
            }

            ActiveHistoryEntryId = e.ActiveHistoryEntryId;

            UpdateStates();
        }

        private void _undoService_ActiveStateChanged(object sender, ActiveStateChangedEventArgs e)
        {
            if (e.ClientId != _clientId)
            {
                return;
            }
            UpdateStates(); //Todo Check this.
        }


        public override void onStartTransaction(string description)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "UndoManager.onStartTransaction called", "Undo.Server.UndoManager");

            _undoService.StartTransaction(_clientId,description);
        }
        public override void onEndTransaction()
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "UndoManager.onEndTransaction called", "Undo.Server.UndoManager");

            _undoService.EndTransaction(_clientId);

        }
        public override void onCancelTransaction()
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "UndoManager.onCancelTransaction called", "Undo.Server.UndoManager");

            _undoService.CancelTransaction(_clientId);
        }

        public override void onExecuteUndo()
        {
            _undoService.Undo(_clientId);
        }

        public override void onExecuteRedo()
        {
            _undoService.Redo(_clientId);
        }

        private void UpdateStates()
        {
            CanUndo = _undoService.CanUndo(_clientId);
            CanRedo = _undoService.CanRedo(_clientId);
        }
    }

}
