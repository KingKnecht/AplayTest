/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using Undo.Server;
namespace Undo.Server
{
  public interface  IAPlayFactory
  {
  };
}
namespace Undo.Server
{
  public interface  IAPlayUserResolveEngine
  {
  };
}
namespace Undo.Server
{
  public interface  IClientImpl
  {
    bool IsAdmin {get; }
    String RemoteAddress {get; }
    ulong APlayClientId {get; }
    int Id {get; set; }
    Undo.Server.TaskManager TaskManager {get; set; }
    Undo.Server.UndoManager UndoManager {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ITaskAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithTask (APlay.Generated.Intern.Server.__ITaskAPEvents ob);
    void SyncedWithTaskManager (APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob);
    void SyncedWithUndoManager (APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob);
    void forceClientDisconnect (String reason);
  };
}
namespace Undo.Server
{
  public interface  IClientEvents
  {
  };
}
namespace Undo.Server
{
  public interface  IClientSkeleton : Undo.Server.IClientImpl, APlay.Generated.Intern.Server.__IClientAPEvents, Undo.Server.IClientEvents
  {
  };
}
namespace Undo.Server
{
  public interface  IClientFactory
  {
    Undo.Server.Client CreateClient ();
  };
}
namespace Undo.Server
{
  public interface  ITaskImpl
  {
    bool IsDone {get; set; }
    String Description {get; set; }
    int Id {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ITaskAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithTask (APlay.Generated.Intern.Server.__ITaskAPEvents ob);
    void SyncedWithTaskManager (APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob);
    void SyncedWithUndoManager (APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob);
  };
}
namespace Undo.Server
{
  public interface  ITaskEvents
  {
    void onIdChange (int NewId__);
    void onSetDone (bool done__, Undo.Server.Client client__);
    void onSetTaskDescription (String description__, Undo.Server.Client client__);
  };
}
namespace Undo.Server
{
  public interface  ITaskSkeleton : Undo.Server.ITaskImpl, APlay.Generated.Intern.Server.__ITaskAPEvents, Undo.Server.ITaskEvents
  {
  };
}
namespace Undo.Server
{
  public interface  ITaskFactory
  {
    Undo.Server.Task CreateTask ();
  };
}
namespace Undo.Server
{
  public interface  ITaskManagerImpl
  {
    Undo.Server.TaskList Tasks {get; set; }
    int Id {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ITaskAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithTask (APlay.Generated.Intern.Server.__ITaskAPEvents ob);
    void SyncedWithTaskManager (APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob);
    void SyncedWithUndoManager (APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob);
  };
}
namespace Undo.Server
{
  public interface  ITaskManagerEvents
  {
    void onIdChange (int NewId__);
    Undo.Server.Task onCreateTask (Undo.Server.Client client__);
    void onAddTask (Undo.Server.Task task__, Undo.Server.Client client__);
    void onRemoveTask (int id__, Undo.Server.Client client__);
  };
}
namespace Undo.Server
{
  public interface  ITaskManagerSkeleton : Undo.Server.ITaskManagerImpl, APlay.Generated.Intern.Server.__ITaskManagerAPEvents, Undo.Server.ITaskManagerEvents
  {
  };
}
namespace Undo.Server
{
  public interface  ITaskManagerFactory
  {
    Undo.Server.TaskManager CreateTaskManager ();
  };
}
namespace Undo.Server
{
  public interface  IUndoManagerImpl
  {
    Undo.Server.Client DataClient {get; set; }
    bool CanUndo {get; set; }
    bool CanRedo {get; set; }
    Undo.Server.HistoryEntryList History {get; set; }
    int ActiveHistoryEntryId {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ITaskAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithTask (APlay.Generated.Intern.Server.__ITaskAPEvents ob);
    void SyncedWithTaskManager (APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob);
    void SyncedWithUndoManager (APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob);
  };
}
namespace Undo.Server
{
  public interface  IUndoManagerEvents
  {
    void onDataClientChange (Undo.Server.Client NewDataClient__);
    void onCanUndoChange (bool NewCanUndo__);
    void onCanRedoChange (bool NewCanRedo__);
    void onHistoryReplace (Undo.Server.HistoryEntryList History__);
    void onHistoryAdd (Undo.Server.HistoryEntry element);
    void onHistoryRemove (Undo.Server.HistoryEntry element);
    void onHistoryClear ();
    void onHistoryInsertAt (int pos, Undo.Server.HistoryEntry element);
    void onHistorySetAt (int pos, Undo.Server.HistoryEntry element);
    void onHistoryRemoveAt (int pos, Undo.Server.HistoryEntry element);
    void onActiveHistoryEntryIdChange (int NewActiveHistoryEntryId__);
    void onStartTransaction (String description__);
    void onEndTransaction ();
    void onCancelTransaction ();
    void onExecuteUndo ();
    void onExecuteRedo ();
  };
}
namespace Undo.Server
{
  public interface  IUndoManagerSkeleton : Undo.Server.IUndoManagerImpl, APlay.Generated.Intern.Server.__IUndoManagerAPEvents, Undo.Server.IUndoManagerEvents
  {
  };
}
namespace Undo.Server
{
  public interface  IUndoManagerFactory
  {
    Undo.Server.UndoManager CreateUndoManager ();
  };
}
namespace Undo.Server
{
  public interface  IAPlayServerEvents
  {
    void onClientConnect (Undo.Server.Client client);
    void onClientDisconnect (Undo.Server.Client client);
    void onCloudReady ();
    void onCloudFailed (String reason);
    void onUserException (Exception ex);
  };
}
namespace Undo.Server
{
  public interface  IAPlayServerImpl
  {
    void InitPersistence (String hostName, int port, String userName, String password, String databaseName);
    void InitPersistenceOdbc (String connString);
    void InitAsSingle ();
    void InitAsMaster (String publicClientAddress, String serverToServerAddress, String masterServerListenAddress);
    void InitAsSlave (String publicClientAddress, String serverToServerAddress, String masterServerAddress);
    void StartForClients (String clientAddress);
    void StopForClients ();
    bool Stop ();
    void StartUnityCrossDomainServer (String listenAddress);
    void StartFlashCrossDomainServer (String listenAddress);
    APlay.Server.Statistics GetStatistic ();
    bool IsMaster ();
    DateTime GetSyncedTime ();
    void SetExternLogger (APlay.Common.Logging.IExternLogger logger);
    String GetVersionString ();
  };
}
namespace Undo.Server
{
  public interface  IAPlayServerSkeleton
  {
  };
}
namespace Undo.Server
{
  public interface  IUserObjectFactory : Undo.Server.IClientUserFactory, Undo.Server.ITaskUserFactory, Undo.Server.ITaskManagerUserFactory, Undo.Server.IUndoManagerUserFactory
  {
  };
}
namespace Undo.Server
{
  public interface  IClientUserFactory
  {
    Undo.Server.IClientImpl CreateClient ();
  };
}
namespace Undo.Server
{
  public interface  ITaskUserFactory
  {
    Undo.Server.ITaskImpl CreateTask ();
  };
}
namespace Undo.Server
{
  public interface  ITaskManagerUserFactory
  {
    Undo.Server.ITaskManagerImpl CreateTaskManager ();
  };
}
namespace Undo.Server
{
  public interface  IUndoManagerUserFactory
  {
    Undo.Server.IUndoManagerImpl CreateUndoManager ();
  };
}
namespace Undo.Server
{
  public partial class APlayFactory
  {
  }
  
}
namespace Undo.Server
{
  public abstract partial class APlayServerSkeleton : Undo.Server.IAPlayServerEvents, APlay.Generated.Intern.Server.IDesignedServer
  {
    public APlayServerSkeleton()
    {
      APlay.Generated.Intern.Server.DesignedServer server = new APlay.Generated.Intern.Server.DesignedServer(this);
      server.Factory = ((APlay.Generated.Intern.Server.IUserClassFactory) (new Undo.Server.UserClassFactory()));
      impl = server;
    }
    public bool onStaticCallField(ushort typeId, ushort fieldId, APlay.Common.Protocol.MessageReader reader_, byte roleId, ulong senderId)
    {
      APlay.Common.Logging.Logger.LogDesigned(1,"onStaticCallField","Server.Designed");
      switch(roleId)
      {
        case 1: // []
        {
        break;
        }
      }
      return (true);
    }
    public abstract void onClientConnect(Undo.Server.Client client);
    public void onInternClientConnect(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      if(ClientConnectEventHandler!=null)
      {
        ClientConnectEventHandler(((Undo.Server.Client) (client)));
      }
      else
      {
        if(Undo.Server.APlayServerSkeleton.StaticClientConnectEventHandler!=null)
        {
          Undo.Server.APlayServerSkeleton.StaticClientConnectEventHandler(((Undo.Server.Client) (client)), ((Undo.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onClientConnect(((Undo.Server.Client) (client)));
        }
      }
    }
    public abstract void onClientDisconnect(Undo.Server.Client client);
    public void onInternClientDisconnect(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      if(ClientDisconnectEventHandler!=null)
      {
        ClientDisconnectEventHandler(((Undo.Server.Client) (client)));
      }
      else
      {
        if(Undo.Server.APlayServerSkeleton.StaticClientDisconnectEventHandler!=null)
        {
          Undo.Server.APlayServerSkeleton.StaticClientDisconnectEventHandler(((Undo.Server.Client) (client)), ((Undo.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onClientDisconnect(((Undo.Server.Client) (client)));
        }
      }
    }
    public virtual void onCloudReady()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCloudReady received","Server.Designed");
    }
    public void onInternCloudReady()
    {
      if(CloudReadyEventHandler!=null)
      {
        CloudReadyEventHandler();
      }
      else
      {
        if(Undo.Server.APlayServerSkeleton.StaticCloudReadyEventHandler!=null)
        {
          Undo.Server.APlayServerSkeleton.StaticCloudReadyEventHandler(((Undo.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onCloudReady();
        }
      }
    }
    public virtual void onCloudFailed(String reason)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCloudFailed received","Server.Designed");
    }
    public void onInternCloudFailed(String reason)
    {
      if(CloudFailedEventHandler!=null)
      {
        CloudFailedEventHandler(reason);
      }
      else
      {
        if(Undo.Server.APlayServerSkeleton.StaticCloudFailedEventHandler!=null)
        {
          Undo.Server.APlayServerSkeleton.StaticCloudFailedEventHandler(reason, ((Undo.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onCloudFailed(reason);
        }
      }
    }
    public virtual void onUserException(Exception ex)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onUserException received","Server.Designed");
    }
    public void onInternUserException(Exception ex)
    {
      if(UserExceptionEventHandler!=null)
      {
        UserExceptionEventHandler(((Exception) (ex)));
      }
      else
      {
        if(Undo.Server.APlayServerSkeleton.StaticUserExceptionEventHandler!=null)
        {
          Undo.Server.APlayServerSkeleton.StaticUserExceptionEventHandler(((Exception) (ex)), ((Undo.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onUserException(((Exception) (ex)));
        }
      }
    }
    public void InitPersistence(String hostName, int port, String userName, String password, String databaseName)
    {
      impl.InitPersistence(hostName, port, userName, password, databaseName);
    }
    public void InitPersistenceOdbc(String connString)
    {
      impl.InitPersistenceOdbc(connString);
    }
    public void InitAsSingle()
    {
      impl.InitAsSingle();
    }
    public void InitAsMaster(String publicClientAddress, String serverToServerAddress, String masterServerListenAddress)
    {
      impl.InitAsMaster(publicClientAddress, serverToServerAddress, masterServerListenAddress);
    }
    public void InitAsSlave(String publicClientAddress, String serverToServerAddress, String masterServerAddress)
    {
      impl.InitAsSlave(publicClientAddress, serverToServerAddress, masterServerAddress);
    }
    public void StartForClients(String clientAddress)
    {
      impl.StartForClients(clientAddress);
    }
    public void StopForClients()
    {
      impl.StopForClients();
    }
    public bool Stop()
    {
      bool retu = impl.Stop();
      return (((bool) (retu)));
    }
    public void StartUnityCrossDomainServer(String listenAddress)
    {
      impl.StartUnityCrossDomainServer(listenAddress);
    }
    public void StartFlashCrossDomainServer(String listenAddress)
    {
      impl.StartFlashCrossDomainServer(listenAddress);
    }
    public APlay.Server.Statistics GetStatistic()
    {
      APlay.Server.Statistics retu = impl.GetStatistic();
      return (((APlay.Server.Statistics) (retu)));
    }
    public bool IsMaster()
    {
      bool retu = impl.IsMaster();
      return (((bool) (retu)));
    }
    public DateTime GetSyncedTime()
    {
      DateTime retu = impl.GetSyncedTime();
      return (((DateTime) (retu)));
    }
    public void SetExternLogger(APlay.Common.Logging.IExternLogger logger)
    {
      impl.SetExternLogger(((APlay.Common.Logging.IExternLogger) (logger)));
    }
    public String GetVersionString()
    {
      String retu = impl.GetVersionString();
      return (((String) (retu)));
    }
    public event Undo.Server.Delegates.void_Client ClientConnectEventHandler;
    static public event Undo.Server.Delegates.void_Client_APlayServerSkeleton StaticClientConnectEventHandler;
    public event Undo.Server.Delegates.void_Client ClientDisconnectEventHandler;
    static public event Undo.Server.Delegates.void_Client_APlayServerSkeleton StaticClientDisconnectEventHandler;
    public event Undo.Server.Delegates.void_ CloudReadyEventHandler;
    static public event Undo.Server.Delegates.void_APlayServerSkeleton StaticCloudReadyEventHandler;
    public event Undo.Server.Delegates.void_String CloudFailedEventHandler;
    static public event Undo.Server.Delegates.void_String_APlayServerSkeleton StaticCloudFailedEventHandler;
    public event Undo.Server.Delegates.void_Exception UserExceptionEventHandler;
    static public event Undo.Server.Delegates.void_Exception_APlayServerSkeleton StaticUserExceptionEventHandler;
    private APlay.Generated.Intern.Server.IDesignedServerImpl impl;
  }
  
}
namespace Undo.Server
{
  public abstract partial class ClientSkeleton : Undo.Server.IClientSkeleton, APlay.Generated.Intern.Server.__IClientAPEvents
  {
    public ClientSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setClientObject(((APlay.Generated.Intern.Server.__IClientAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setClientObject(APlayObjectFactory.CreateClientImpl());
      }
      ((APlay.Generated.Intern.Server.__Client) (this.getClientObject())).ClientHandler = ((APlay.Generated.Intern.Server.__IClientAPEvents) (((Undo.Server.ClientSkeleton) (this))));
    }
    public virtual bool IsAdmin
    {
      get
      {
        {
          return (implClient.IsAdmin);
        }
      }
    }
    public virtual String RemoteAddress
    {
      get
      {
        {
          return (implClient.RemoteAddress);
        }
      }
    }
    public virtual ulong APlayClientId
    {
      get
      {
        {
          return (implClient.APlayClientId);
        }
      }
    }
    public virtual int Id
    {
      set
      {
        {
          //int32
          implClient.Id = value;
        }
      }
      get
      {
        {
          return (implClient.Id);
        }
      }
    }
    public virtual Undo.Server.TaskManager TaskManager
    {
      set
      {
        {
          //TaskManager
          implClient.TaskManager = ((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (value));
        }
      }
      get
      {
        {
          return (((Undo.Server.TaskManager) (implClient.TaskManager)));
        }
      }
    }
    public virtual Undo.Server.UndoManager UndoManager
    {
      set
      {
        {
          //UndoManager
          implClient.UndoManager = ((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (value));
        }
      }
      get
      {
        {
          return (((Undo.Server.UndoManager) (implClient.UndoManager)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implClient.APlayEntityId);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implClient.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implClient.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implClient.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implClient.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implClient.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implClient.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ITaskAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ITaskAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implClient.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implClient.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithTask(APlay.Generated.Intern.Server.__ITaskAPEvents ob)
    {
      implClient.SyncedWithTask(((APlay.Generated.Intern.Server.__ITaskAPEvents) (ob)));
    }
    public void SyncedWithTaskManager(APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob)
    {
      implClient.SyncedWithTaskManager(((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (ob)));
    }
    public void SyncedWithUndoManager(APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob)
    {
      implClient.SyncedWithUndoManager(((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (ob)));
    }
    public void forceClientDisconnect(String reason)
    {
      implClient.forceClientDisconnect(reason);
    }
    public APlay.Generated.Intern.Server.__IClientAPImpl getClientObject()
    {
      return (implClient);
    }
    public void setClientObject(APlay.Generated.Intern.Server.__IClientAPImpl impl)
    {
      implClient = impl;
    }
    private APlay.Generated.Intern.Server.__IClientAPImpl implClient;
  }
  
}
namespace Undo.Server
{
  public abstract partial class TaskSkeleton : Undo.Server.ITaskSkeleton, APlay.Generated.Intern.Server.__ITaskAPEvents
  {
    public TaskSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setTaskObject(((APlay.Generated.Intern.Server.__ITaskAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setTaskObject(APlayObjectFactory.CreateTaskImpl());
      }
      ((APlay.Generated.Intern.Server.__Task) (this.getTaskObject())).TaskHandler = ((APlay.Generated.Intern.Server.__ITaskAPEvents) (((Undo.Server.TaskSkeleton) (this))));
    }
    public virtual bool IsDone
    {
      set
      {
        {
          //boolean
          implTask.IsDone = value;
        }
      }
      get
      {
        {
          return (implTask.IsDone);
        }
      }
    }
    public virtual String Description
    {
      set
      {
        {
          //WString
          implTask.Description = value;
        }
      }
      get
      {
        {
          return (implTask.Description);
        }
      }
    }
    public virtual int Id
    {
      set
      {
        {
          //int32
          implTask.Id = value;
        }
      }
      get
      {
        {
          return (implTask.Id);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implTask.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Server.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(Undo.Server.TaskSkeleton.StaticIdChangeEventHandler!=null)
        {
          Undo.Server.TaskSkeleton.StaticIdChangeEventHandler(NewId__, ((Undo.Server.Task) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public abstract void onSetDone(bool done__, Undo.Server.Client client__);
    public void onInternSetDone(bool done__, APlay.Generated.Intern.Server.__IClientAPEvents client__)
    {
      if(SetDoneEventHandler!=null)
      {
        SetDoneEventHandler(done__, ((Undo.Server.Client) (client__)));
      }
      else
      {
        if(Undo.Server.TaskSkeleton.StaticSetDoneEventHandler!=null)
        {
          Undo.Server.TaskSkeleton.StaticSetDoneEventHandler(done__, ((Undo.Server.Client) (client__)), ((Undo.Server.Task) (this)));
        }
        else
        {
          this.onSetDone(done__, ((Undo.Server.Client) (client__)));
        }
      }
    }
    public abstract void onSetTaskDescription(String description__, Undo.Server.Client client__);
    public void onInternSetTaskDescription(String description__, APlay.Generated.Intern.Server.__IClientAPEvents client__)
    {
      if(SetTaskDescriptionEventHandler!=null)
      {
        SetTaskDescriptionEventHandler(description__, ((Undo.Server.Client) (client__)));
      }
      else
      {
        if(Undo.Server.TaskSkeleton.StaticSetTaskDescriptionEventHandler!=null)
        {
          Undo.Server.TaskSkeleton.StaticSetTaskDescriptionEventHandler(description__, ((Undo.Server.Client) (client__)), ((Undo.Server.Task) (this)));
        }
        else
        {
          this.onSetTaskDescription(description__, ((Undo.Server.Client) (client__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implTask.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implTask.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implTask.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implTask.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implTask.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implTask.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implTask.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ITaskAPEvents ob)
    {
      implTask.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ITaskAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob)
    {
      implTask.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob)
    {
      implTask.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implTask.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implTask.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithTask(APlay.Generated.Intern.Server.__ITaskAPEvents ob)
    {
      implTask.SyncedWithTask(((APlay.Generated.Intern.Server.__ITaskAPEvents) (ob)));
    }
    public void SyncedWithTaskManager(APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob)
    {
      implTask.SyncedWithTaskManager(((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (ob)));
    }
    public void SyncedWithUndoManager(APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob)
    {
      implTask.SyncedWithUndoManager(((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__ITaskAPImpl getTaskObject()
    {
      return (implTask);
    }
    public void setTaskObject(APlay.Generated.Intern.Server.__ITaskAPImpl impl)
    {
      implTask = impl;
    }
    public event Undo.Server.Delegates.void_int32 IdChangeEventHandler;
    static public event Undo.Server.Delegates.void_int32_Task StaticIdChangeEventHandler;
    public event Undo.Server.Delegates.void_boolean_Client SetDoneEventHandler;
    static public event Undo.Server.Delegates.void_boolean_Client_Task StaticSetDoneEventHandler;
    public event Undo.Server.Delegates.void_WString_Client SetTaskDescriptionEventHandler;
    static public event Undo.Server.Delegates.void_WString_Client_Task StaticSetTaskDescriptionEventHandler;
    private APlay.Generated.Intern.Server.__ITaskAPImpl implTask;
  }
  
}
namespace Undo.Server
{
  public abstract partial class TaskManagerSkeleton : Undo.Server.ITaskManagerSkeleton, APlay.Generated.Intern.Server.__ITaskManagerAPEvents
  {
    public TaskManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setTaskManagerObject(((APlay.Generated.Intern.Server.__ITaskManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setTaskManagerObject(APlayObjectFactory.CreateTaskManagerImpl());
      }
      ((APlay.Generated.Intern.Server.__TaskManager) (this.getTaskManagerObject())).TaskManagerHandler = ((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (((Undo.Server.TaskManagerSkeleton) (this))));
    }
    public virtual Undo.Server.TaskList Tasks
    {
      set
      {
        {
          //Task
          implTaskManager.Tasks = ((APlay.Generated.Intern.Server.ITaskListEvents) (value));
        }
      }
      get
      {
        {
          return (((Undo.Server.TaskList) (implTaskManager.Tasks)));
        }
      }
    }
    public virtual int Id
    {
      set
      {
        {
          //int32
          implTaskManager.Id = value;
        }
      }
      get
      {
        {
          return (implTaskManager.Id);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implTaskManager.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Server.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(Undo.Server.TaskManagerSkeleton.StaticIdChangeEventHandler!=null)
        {
          Undo.Server.TaskManagerSkeleton.StaticIdChangeEventHandler(NewId__, ((Undo.Server.TaskManager) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public abstract Undo.Server.Task onCreateTask(Undo.Server.Client client__);
    public APlay.Generated.Intern.Server.__ITaskAPEvents onInternCreateTask(APlay.Generated.Intern.Server.__IClientAPEvents client__)
    {
      if(CreateTaskEventHandler!=null)
      {
        Undo.Server.Task retu = CreateTaskEventHandler(((Undo.Server.Client) (client__)));
        return (((APlay.Generated.Intern.Server.__ITaskAPEvents) (retu)));
      }
      else
      {
        if(Undo.Server.TaskManagerSkeleton.StaticCreateTaskEventHandler!=null)
        {
          Undo.Server.Task retu = Undo.Server.TaskManagerSkeleton.StaticCreateTaskEventHandler(((Undo.Server.Client) (client__)), ((Undo.Server.TaskManager) (this)));
          return (((APlay.Generated.Intern.Server.__ITaskAPEvents) (retu)));
        }
        else
        {
          Undo.Server.Task retu = this.onCreateTask(((Undo.Server.Client) (client__)));
          return (((APlay.Generated.Intern.Server.__ITaskAPEvents) (retu)));
        }
      }
    }
    public abstract void onAddTask(Undo.Server.Task task__, Undo.Server.Client client__);
    public void onInternAddTask(APlay.Generated.Intern.Server.__ITaskAPEvents task__, APlay.Generated.Intern.Server.__IClientAPEvents client__)
    {
      if(AddTaskEventHandler!=null)
      {
        AddTaskEventHandler(((Undo.Server.Task) (task__)), ((Undo.Server.Client) (client__)));
      }
      else
      {
        if(Undo.Server.TaskManagerSkeleton.StaticAddTaskEventHandler!=null)
        {
          Undo.Server.TaskManagerSkeleton.StaticAddTaskEventHandler(((Undo.Server.Task) (task__)), ((Undo.Server.Client) (client__)), ((Undo.Server.TaskManager) (this)));
        }
        else
        {
          this.onAddTask(((Undo.Server.Task) (task__)), ((Undo.Server.Client) (client__)));
        }
      }
    }
    public abstract void onRemoveTask(int id__, Undo.Server.Client client__);
    public void onInternRemoveTask(int id__, APlay.Generated.Intern.Server.__IClientAPEvents client__)
    {
      if(RemoveTaskEventHandler!=null)
      {
        RemoveTaskEventHandler(id__, ((Undo.Server.Client) (client__)));
      }
      else
      {
        if(Undo.Server.TaskManagerSkeleton.StaticRemoveTaskEventHandler!=null)
        {
          Undo.Server.TaskManagerSkeleton.StaticRemoveTaskEventHandler(id__, ((Undo.Server.Client) (client__)), ((Undo.Server.TaskManager) (this)));
        }
        else
        {
          this.onRemoveTask(id__, ((Undo.Server.Client) (client__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implTaskManager.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implTaskManager.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implTaskManager.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implTaskManager.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implTaskManager.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implTaskManager.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implTaskManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ITaskAPEvents ob)
    {
      implTaskManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ITaskAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob)
    {
      implTaskManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob)
    {
      implTaskManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implTaskManager.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implTaskManager.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithTask(APlay.Generated.Intern.Server.__ITaskAPEvents ob)
    {
      implTaskManager.SyncedWithTask(((APlay.Generated.Intern.Server.__ITaskAPEvents) (ob)));
    }
    public void SyncedWithTaskManager(APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob)
    {
      implTaskManager.SyncedWithTaskManager(((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (ob)));
    }
    public void SyncedWithUndoManager(APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob)
    {
      implTaskManager.SyncedWithUndoManager(((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__ITaskManagerAPImpl getTaskManagerObject()
    {
      return (implTaskManager);
    }
    public void setTaskManagerObject(APlay.Generated.Intern.Server.__ITaskManagerAPImpl impl)
    {
      implTaskManager = impl;
    }
    public event Undo.Server.Delegates.void_int32 IdChangeEventHandler;
    static public event Undo.Server.Delegates.void_int32_TaskManager StaticIdChangeEventHandler;
    public event Undo.Server.Delegates.Task_Client CreateTaskEventHandler;
    static public event Undo.Server.Delegates.Task_Client_TaskManager StaticCreateTaskEventHandler;
    public event Undo.Server.Delegates.void_Task_Client AddTaskEventHandler;
    static public event Undo.Server.Delegates.void_Task_Client_TaskManager StaticAddTaskEventHandler;
    public event Undo.Server.Delegates.void_int32_Client RemoveTaskEventHandler;
    static public event Undo.Server.Delegates.void_int32_Client_TaskManager StaticRemoveTaskEventHandler;
    private APlay.Generated.Intern.Server.__ITaskManagerAPImpl implTaskManager;
  }
  
}
namespace Undo.Server
{
  public abstract partial class UndoManagerSkeleton : Undo.Server.IUndoManagerSkeleton, APlay.Generated.Intern.Server.__IUndoManagerAPEvents
  {
    public UndoManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setUndoManagerObject(((APlay.Generated.Intern.Server.__IUndoManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setUndoManagerObject(APlayObjectFactory.CreateUndoManagerImpl());
      }
      ((APlay.Generated.Intern.Server.__UndoManager) (this.getUndoManagerObject())).UndoManagerHandler = ((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (((Undo.Server.UndoManagerSkeleton) (this))));
    }
    public virtual Undo.Server.Client DataClient
    {
      set
      {
        {
          //Client
          implUndoManager.DataClient = ((APlay.Generated.Intern.Server.__IClientAPEvents) (value));
        }
      }
      get
      {
        {
          return (((Undo.Server.Client) (implUndoManager.DataClient)));
        }
      }
    }
    public virtual bool CanUndo
    {
      set
      {
        {
          //boolean
          implUndoManager.CanUndo = value;
        }
      }
      get
      {
        {
          return (implUndoManager.CanUndo);
        }
      }
    }
    public virtual bool CanRedo
    {
      set
      {
        {
          //boolean
          implUndoManager.CanRedo = value;
        }
      }
      get
      {
        {
          return (implUndoManager.CanRedo);
        }
      }
    }
    public virtual Undo.Server.HistoryEntryList History
    {
      set
      {
        {
          //HistoryEntry
          implUndoManager.History = ((APlay.Generated.Intern.Server.IHistoryEntryListEvents) (value));
        }
      }
      get
      {
        {
          return (((Undo.Server.HistoryEntryList) (implUndoManager.History)));
        }
      }
    }
    public virtual int ActiveHistoryEntryId
    {
      set
      {
        {
          //int32
          implUndoManager.ActiveHistoryEntryId = value;
        }
      }
      get
      {
        {
          return (implUndoManager.ActiveHistoryEntryId);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implUndoManager.APlayEntityId);
        }
      }
    }
    public virtual void onDataClientChange(Undo.Server.Client NewDataClient__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onDataClientChange received","Server.Designed");
    }
    public void onInternDataClientChange(APlay.Generated.Intern.Server.__IClientAPEvents NewDataClient__)
    {
      if(DataClientChangeEventHandler!=null)
      {
        DataClientChangeEventHandler(((Undo.Server.Client) (NewDataClient__)));
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticDataClientChangeEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticDataClientChangeEventHandler(((Undo.Server.Client) (NewDataClient__)), ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onDataClientChange(((Undo.Server.Client) (NewDataClient__)));
        }
      }
    }
    public virtual void onCanUndoChange(bool NewCanUndo__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanUndoChange received","Server.Designed");
    }
    public void onInternCanUndoChange(bool NewCanUndo__)
    {
      if(CanUndoChangeEventHandler!=null)
      {
        CanUndoChangeEventHandler(NewCanUndo__);
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticCanUndoChangeEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticCanUndoChangeEventHandler(NewCanUndo__, ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onCanUndoChange(NewCanUndo__);
        }
      }
    }
    public virtual void onCanRedoChange(bool NewCanRedo__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanRedoChange received","Server.Designed");
    }
    public void onInternCanRedoChange(bool NewCanRedo__)
    {
      if(CanRedoChangeEventHandler!=null)
      {
        CanRedoChangeEventHandler(NewCanRedo__);
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticCanRedoChangeEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticCanRedoChangeEventHandler(NewCanRedo__, ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onCanRedoChange(NewCanRedo__);
        }
      }
    }
    public virtual void onHistoryReplace(Undo.Server.HistoryEntryList History__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryReplace received","Server.Designed");
    }
    public void onInternHistoryReplace(APlay.Generated.Intern.Server.IHistoryEntryListEvents History__)
    {
      if(HistoryReplaceEventHandler!=null)
      {
        HistoryReplaceEventHandler(((Undo.Server.HistoryEntryList) (History__)));
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticHistoryReplaceEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticHistoryReplaceEventHandler(((Undo.Server.HistoryEntryList) (History__)), ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onHistoryReplace(((Undo.Server.HistoryEntryList) (History__)));
        }
      }
    }
    public virtual void onHistoryAdd(Undo.Server.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryAdd received","Server.Designed");
    }
    public void onInternHistoryAdd(APlay.Generated.Intern.Server.__HistoryEntry element)
    {
      if(HistoryAddEventHandler!=null)
      {
        HistoryAddEventHandler(new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticHistoryAddEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticHistoryAddEventHandler(new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onHistoryAdd(new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryRemove(Undo.Server.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryRemove received","Server.Designed");
    }
    public void onInternHistoryRemove(APlay.Generated.Intern.Server.__HistoryEntry element)
    {
      if(HistoryRemoveEventHandler!=null)
      {
        HistoryRemoveEventHandler(new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticHistoryRemoveEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticHistoryRemoveEventHandler(new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onHistoryRemove(new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryClear received","Server.Designed");
    }
    public void onInternHistoryClear()
    {
      if(HistoryClearEventHandler!=null)
      {
        HistoryClearEventHandler();
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticHistoryClearEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticHistoryClearEventHandler(((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onHistoryClear();
        }
      }
    }
    public virtual void onHistoryInsertAt(int pos, Undo.Server.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryInsertAt received","Server.Designed");
    }
    public void onInternHistoryInsertAt(int pos, APlay.Generated.Intern.Server.__HistoryEntry element)
    {
      if(HistoryInsertAtEventHandler!=null)
      {
        HistoryInsertAtEventHandler(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticHistoryInsertAtEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticHistoryInsertAtEventHandler(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onHistoryInsertAt(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistorySetAt(int pos, Undo.Server.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistorySetAt received","Server.Designed");
    }
    public void onInternHistorySetAt(int pos, APlay.Generated.Intern.Server.__HistoryEntry element)
    {
      if(HistorySetAtEventHandler!=null)
      {
        HistorySetAtEventHandler(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticHistorySetAtEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticHistorySetAtEventHandler(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onHistorySetAt(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryRemoveAt(int pos, Undo.Server.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryRemoveAt received","Server.Designed");
    }
    public void onInternHistoryRemoveAt(int pos, APlay.Generated.Intern.Server.__HistoryEntry element)
    {
      if(HistoryRemoveAtEventHandler!=null)
      {
        HistoryRemoveAtEventHandler(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticHistoryRemoveAtEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticHistoryRemoveAtEventHandler(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onHistoryRemoveAt(pos, new Undo.Server.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onActiveHistoryEntryIdChange(int NewActiveHistoryEntryId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onActiveHistoryEntryIdChange received","Server.Designed");
    }
    public void onInternActiveHistoryEntryIdChange(int NewActiveHistoryEntryId__)
    {
      if(ActiveHistoryEntryIdChangeEventHandler!=null)
      {
        ActiveHistoryEntryIdChangeEventHandler(NewActiveHistoryEntryId__);
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticActiveHistoryEntryIdChangeEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticActiveHistoryEntryIdChangeEventHandler(NewActiveHistoryEntryId__, ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onActiveHistoryEntryIdChange(NewActiveHistoryEntryId__);
        }
      }
    }
    public abstract void onStartTransaction(String description__);
    public void onInternStartTransaction(String description__)
    {
      if(StartTransactionEventHandler!=null)
      {
        StartTransactionEventHandler(description__);
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticStartTransactionEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticStartTransactionEventHandler(description__, ((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onStartTransaction(description__);
        }
      }
    }
    public abstract void onEndTransaction();
    public void onInternEndTransaction()
    {
      if(EndTransactionEventHandler!=null)
      {
        EndTransactionEventHandler();
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticEndTransactionEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticEndTransactionEventHandler(((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onEndTransaction();
        }
      }
    }
    public abstract void onCancelTransaction();
    public void onInternCancelTransaction()
    {
      if(CancelTransactionEventHandler!=null)
      {
        CancelTransactionEventHandler();
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticCancelTransactionEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticCancelTransactionEventHandler(((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onCancelTransaction();
        }
      }
    }
    public abstract void onExecuteUndo();
    public void onInternExecuteUndo()
    {
      if(ExecuteUndoEventHandler!=null)
      {
        ExecuteUndoEventHandler();
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticExecuteUndoEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticExecuteUndoEventHandler(((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onExecuteUndo();
        }
      }
    }
    public abstract void onExecuteRedo();
    public void onInternExecuteRedo()
    {
      if(ExecuteRedoEventHandler!=null)
      {
        ExecuteRedoEventHandler();
      }
      else
      {
        if(Undo.Server.UndoManagerSkeleton.StaticExecuteRedoEventHandler!=null)
        {
          Undo.Server.UndoManagerSkeleton.StaticExecuteRedoEventHandler(((Undo.Server.UndoManager) (this)));
        }
        else
        {
          this.onExecuteRedo();
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implUndoManager.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implUndoManager.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implUndoManager.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implUndoManager.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implUndoManager.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implUndoManager.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implUndoManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ITaskAPEvents ob)
    {
      implUndoManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ITaskAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob)
    {
      implUndoManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob)
    {
      implUndoManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implUndoManager.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implUndoManager.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithTask(APlay.Generated.Intern.Server.__ITaskAPEvents ob)
    {
      implUndoManager.SyncedWithTask(((APlay.Generated.Intern.Server.__ITaskAPEvents) (ob)));
    }
    public void SyncedWithTaskManager(APlay.Generated.Intern.Server.__ITaskManagerAPEvents ob)
    {
      implUndoManager.SyncedWithTaskManager(((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (ob)));
    }
    public void SyncedWithUndoManager(APlay.Generated.Intern.Server.__IUndoManagerAPEvents ob)
    {
      implUndoManager.SyncedWithUndoManager(((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__IUndoManagerAPImpl getUndoManagerObject()
    {
      return (implUndoManager);
    }
    public void setUndoManagerObject(APlay.Generated.Intern.Server.__IUndoManagerAPImpl impl)
    {
      implUndoManager = impl;
    }
    public event Undo.Server.Delegates.void_Client DataClientChangeEventHandler;
    static public event Undo.Server.Delegates.void_Client_UndoManager StaticDataClientChangeEventHandler;
    public event Undo.Server.Delegates.void_boolean CanUndoChangeEventHandler;
    static public event Undo.Server.Delegates.void_boolean_UndoManager StaticCanUndoChangeEventHandler;
    public event Undo.Server.Delegates.void_boolean CanRedoChangeEventHandler;
    static public event Undo.Server.Delegates.void_boolean_UndoManager StaticCanRedoChangeEventHandler;
    public event Undo.Server.Delegates.void_HistoryEntryList HistoryReplaceEventHandler;
    static public event Undo.Server.Delegates.void_HistoryEntryList_UndoManager StaticHistoryReplaceEventHandler;
    public event Undo.Server.Delegates.void_HistoryEntry HistoryAddEventHandler;
    static public event Undo.Server.Delegates.void_HistoryEntry_UndoManager StaticHistoryAddEventHandler;
    public event Undo.Server.Delegates.void_HistoryEntry HistoryRemoveEventHandler;
    static public event Undo.Server.Delegates.void_HistoryEntry_UndoManager StaticHistoryRemoveEventHandler;
    public event Undo.Server.Delegates.void_ HistoryClearEventHandler;
    static public event Undo.Server.Delegates.void_UndoManager StaticHistoryClearEventHandler;
    public event Undo.Server.Delegates.void_int32_HistoryEntry HistoryInsertAtEventHandler;
    static public event Undo.Server.Delegates.void_int32_HistoryEntry_UndoManager StaticHistoryInsertAtEventHandler;
    public event Undo.Server.Delegates.void_int32_HistoryEntry HistorySetAtEventHandler;
    static public event Undo.Server.Delegates.void_int32_HistoryEntry_UndoManager StaticHistorySetAtEventHandler;
    public event Undo.Server.Delegates.void_int32_HistoryEntry HistoryRemoveAtEventHandler;
    static public event Undo.Server.Delegates.void_int32_HistoryEntry_UndoManager StaticHistoryRemoveAtEventHandler;
    public event Undo.Server.Delegates.void_int32 ActiveHistoryEntryIdChangeEventHandler;
    static public event Undo.Server.Delegates.void_int32_UndoManager StaticActiveHistoryEntryIdChangeEventHandler;
    public event Undo.Server.Delegates.void_WString StartTransactionEventHandler;
    static public event Undo.Server.Delegates.void_WString_UndoManager StaticStartTransactionEventHandler;
    public event Undo.Server.Delegates.void_ EndTransactionEventHandler;
    static public event Undo.Server.Delegates.void_UndoManager StaticEndTransactionEventHandler;
    public event Undo.Server.Delegates.void_ CancelTransactionEventHandler;
    static public event Undo.Server.Delegates.void_UndoManager StaticCancelTransactionEventHandler;
    public event Undo.Server.Delegates.void_ ExecuteUndoEventHandler;
    static public event Undo.Server.Delegates.void_UndoManager StaticExecuteUndoEventHandler;
    public event Undo.Server.Delegates.void_ ExecuteRedoEventHandler;
    static public event Undo.Server.Delegates.void_UndoManager StaticExecuteRedoEventHandler;
    private APlay.Generated.Intern.Server.__IUndoManagerAPImpl implUndoManager;
  }
  
}
namespace Undo.Server
{
  public partial struct HistoryEntry
  {
    public HistoryEntry(int Id__, String Description__)
    {
      Id = Id__;
      Description = Description__;
    }
    public int Id;
    public String Description;
    public static bool operator ==(HistoryEntry a, HistoryEntry b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Id==b.Id)&& (a.Description==b.Description);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(HistoryEntry))
      {
        return false;
      }
      HistoryEntry a = this;
      HistoryEntry b = (HistoryEntry)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Id==b.Id)&&(a.Description==b.Description);
    }
    public override int GetHashCode()
    {
      return Id.GetHashCode() + Description.GetHashCode();
    }
    public static bool operator !=(HistoryEntry a, HistoryEntry b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Id.ToString()+"]" + "["+Description.ToString()+"]";
    }
  }
}
namespace Undo.Server
{
  public partial class TaskList : IList<Undo.Server.Task>, APlay.Generated.Intern.Server.ITaskListEvents
  {
    public TaskList()
    {
      APlay.Generated.Intern.Server.ITaskListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.TaskList();
      }
    }
    public TaskList(APlay.Generated.Intern.Server.ITaskListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.TaskList();
      }
    }
    public static Undo.Server.TaskList CreateForAPlay(APlay.Generated.Intern.Server.ITaskListImpl impl)
    {
      Undo.Server.TaskList ob = new Undo.Server.TaskList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Server.ITaskListImpl getTaskObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Server.ITaskListImpl impl;
    
public int IndexOf(Undo.Server.Task item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, Undo.Server.Task item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public Undo.Server.Task this[int index]
{
    get
    {
         
        return (Undo.Server.Task)impl.get((int)index);
    }
    set
    {
        Undo.Server.Task item =value;
        impl.setAt(index,item);
    }
}

public void Add(Undo.Server.Task item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(Undo.Server.Task item)
{
    return impl.contains(item);
}

public void CopyTo(Undo.Server.Task[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (Undo.Server.Task item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(Undo.Server.Task item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<Undo.Server.Task> GetEnumerator()
    {
        return new TaskListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace Undo.Server
{
  public partial class TaskListEnumerator : IEnumerator<Undo.Server.Task>
  {
    
        IEnumerator<APlay.Generated.Intern.Server.__Task> intern;
        public TaskListEnumerator(IEnumerator<APlay.Generated.Intern.Server.__Task> intern)
        {
            this.intern = intern;
        }
        public Undo.Server.Task Current
        {
            get { APlay.Generated.Intern.Server.__Task item = (APlay.Generated.Intern.Server.__Task)intern.Current; return ((Undo.Server.Task) ((item==null)?null:item.__GetExternTask()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace Undo.Server
{
  public partial class HistoryEntryList : IList<Undo.Server.HistoryEntry>, APlay.Generated.Intern.Server.IHistoryEntryListEvents
  {
    public HistoryEntryList()
    {
      APlay.Generated.Intern.Server.IHistoryEntryListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.HistoryEntryList();
      }
    }
    public HistoryEntryList(APlay.Generated.Intern.Server.IHistoryEntryListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.HistoryEntryList();
      }
    }
    public static Undo.Server.HistoryEntryList CreateForAPlay(APlay.Generated.Intern.Server.IHistoryEntryListImpl impl)
    {
      Undo.Server.HistoryEntryList ob = new Undo.Server.HistoryEntryList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Server.IHistoryEntryListImpl getHistoryEntryObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Server.IHistoryEntryListImpl impl;
    
public int IndexOf(Undo.Server.HistoryEntry item)
{
    return (int)impl.indexOf(new APlay.Generated.Intern.Server.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void Insert(int index, Undo.Server.HistoryEntry item)
{
    impl.insertAt(index, new APlay.Generated.Intern.Server.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public Undo.Server.HistoryEntry this[int index]
{
    get
    {
        APlay.Generated.Intern.Server.__HistoryEntry item = (APlay.Generated.Intern.Server.__HistoryEntry)impl.get((int)index);
        return new Undo.Server.HistoryEntry(((int) (item.Id)), ((String) (item.Description)));
    }
    set
    {
        Undo.Server.HistoryEntry item =value;
        impl.setAt(index,new APlay.Generated.Intern.Server.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
    }
}

public void Add(Undo.Server.HistoryEntry item)
{
    impl.add(new APlay.Generated.Intern.Server.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void Clear()
{
    impl.clear();
}

public bool Contains(Undo.Server.HistoryEntry item)
{
    return impl.contains(new APlay.Generated.Intern.Server.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void CopyTo(Undo.Server.HistoryEntry[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (Undo.Server.HistoryEntry item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(Undo.Server.HistoryEntry item)
{
    return impl.remove(new APlay.Generated.Intern.Server.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<Undo.Server.HistoryEntry> GetEnumerator()
    {
        return new HistoryEntryListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace Undo.Server
{
  public partial class HistoryEntryListEnumerator : IEnumerator<Undo.Server.HistoryEntry>
  {
    
        IEnumerator<APlay.Generated.Intern.Server.__HistoryEntry> intern;
        public HistoryEntryListEnumerator(IEnumerator<APlay.Generated.Intern.Server.__HistoryEntry> intern)
        {
            this.intern = intern;
        }
        public Undo.Server.HistoryEntry Current
        {
            get { APlay.Generated.Intern.Server.__HistoryEntry item = (APlay.Generated.Intern.Server.__HistoryEntry)intern.Current; return new Undo.Server.HistoryEntry(((int) (item.Id)), ((String) (item.Description)));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace Undo.Server
{
  public partial class APlayObjectFactory
  {
    public static void SetUserFactory(Undo.Server.IUserObjectFactory factory)
    {
      Client_ = factory;
      Task_ = factory;
      TaskManager_ = factory;
      UndoManager_ = factory;
    }
    public static void SetAPlayDefaultFactory()
    {
      Client_ = null;
      Task_ = null;
      TaskManager_ = null;
      UndoManager_ = null;
    }
    public static void SetClientUserFactory(Undo.Server.IClientUserFactory factory)
    {
      Client_ = factory;
    }
    public static void SetClientAPlayDefaultFactory()
    {
      Client_ = null;
    }
    public static APlay.Generated.Intern.Server.__IClientAPImpl CreateClientImpl()
    {
      if(Client_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateClient());
      }
    }
    public static void SetTaskUserFactory(Undo.Server.ITaskUserFactory factory)
    {
      Task_ = factory;
    }
    public static void SetTaskAPlayDefaultFactory()
    {
      Task_ = null;
    }
    public static APlay.Generated.Intern.Server.__ITaskAPImpl CreateTaskImpl()
    {
      if(Task_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateTask());
      }
    }
    public static void SetTaskManagerUserFactory(Undo.Server.ITaskManagerUserFactory factory)
    {
      TaskManager_ = factory;
    }
    public static void SetTaskManagerAPlayDefaultFactory()
    {
      TaskManager_ = null;
    }
    public static APlay.Generated.Intern.Server.__ITaskManagerAPImpl CreateTaskManagerImpl()
    {
      if(TaskManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateTaskManager());
      }
    }
    public static void SetUndoManagerUserFactory(Undo.Server.IUndoManagerUserFactory factory)
    {
      UndoManager_ = factory;
    }
    public static void SetUndoManagerAPlayDefaultFactory()
    {
      UndoManager_ = null;
    }
    public static APlay.Generated.Intern.Server.__IUndoManagerAPImpl CreateUndoManagerImpl()
    {
      if(UndoManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateUndoManager());
      }
    }
    static private Undo.Server.IClientUserFactory Client_;
    static private Undo.Server.ITaskUserFactory Task_;
    static private Undo.Server.ITaskManagerUserFactory TaskManager_;
    static private Undo.Server.IUndoManagerUserFactory UndoManager_;
  }
  
}
namespace Undo.Server
{
  public partial class UserClassFactory : APlay.Generated.Intern.Server.IUserClassFactory
  {
    public APlay.Generated.Intern.Server.__IClientAPEvents CreateClientEvents(APlay.Generated.Intern.Server.__IClientAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IClientAPEvents retu__ = ((APlay.Generated.Intern.Server.__IClientAPEvents) (new Undo.Server.Client()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__ITaskAPEvents CreateTaskEvents(APlay.Generated.Intern.Server.__ITaskAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__ITaskAPEvents retu__ = ((APlay.Generated.Intern.Server.__ITaskAPEvents) (new Undo.Server.Task()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__ITaskManagerAPEvents CreateTaskManagerEvents(APlay.Generated.Intern.Server.__ITaskManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__ITaskManagerAPEvents retu__ = ((APlay.Generated.Intern.Server.__ITaskManagerAPEvents) (new Undo.Server.TaskManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__IUndoManagerAPEvents CreateUndoManagerEvents(APlay.Generated.Intern.Server.__IUndoManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IUndoManagerAPEvents retu__ = ((APlay.Generated.Intern.Server.__IUndoManagerAPEvents) (new Undo.Server.UndoManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.ITaskListEvents CreateTaskListEvents(APlay.Generated.Intern.Server.ITaskListImpl impl)
    {
      return (((APlay.Generated.Intern.Server.ITaskListEvents) (Undo.Server.TaskList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Server.IHistoryEntryListEvents CreateHistoryEntryListEvents(APlay.Generated.Intern.Server.IHistoryEntryListImpl impl)
    {
      return (((APlay.Generated.Intern.Server.IHistoryEntryListEvents) (Undo.Server.HistoryEntryList.CreateForAPlay(impl))));
    }
  }
  
}
namespace Undo.Server
{
  public partial class APlayUserResolveEngine : APlay.Generated.Intern.Server.IAPlayResolve
  {
    public static void SetResolveEngine(Undo.Server.IAPlayUserResolveEngine inter)
    {
      inter_ = inter;
      APlay.Generated.Intern.Server.APlayInternUserResolver.SetResolveEngine(new Undo.Server.APlayUserResolveEngine());
    }
    static private Undo.Server.IAPlayUserResolveEngine inter_;
  }
  
}
namespace Undo.Server
{
  public partial class Delegates
  {
    public delegate void void_int32(int NewId__);
    public delegate void void_int32_Task(int NewId__, Undo.Server.Task this_);
    public delegate void void_boolean_Client(bool done__, Undo.Server.Client client__);
    public delegate void void_boolean_Client_Task(bool done__, Undo.Server.Client client__, Undo.Server.Task this_);
    public delegate void void_WString_Client(String description__, Undo.Server.Client client__);
    public delegate void void_WString_Client_Task(String description__, Undo.Server.Client client__, Undo.Server.Task this_);
    public delegate void void_int32_TaskManager(int NewId__, Undo.Server.TaskManager this_);
    public delegate Undo.Server.Task Task_Client(Undo.Server.Client client__);
    public delegate Undo.Server.Task Task_Client_TaskManager(Undo.Server.Client client__, Undo.Server.TaskManager this_);
    public delegate void void_Task_Client(Undo.Server.Task task__, Undo.Server.Client client__);
    public delegate void void_Task_Client_TaskManager(Undo.Server.Task task__, Undo.Server.Client client__, Undo.Server.TaskManager this_);
    public delegate void void_int32_Client(int id__, Undo.Server.Client client__);
    public delegate void void_int32_Client_TaskManager(int id__, Undo.Server.Client client__, Undo.Server.TaskManager this_);
    public delegate void void_Client(Undo.Server.Client NewDataClient__);
    public delegate void void_Client_UndoManager(Undo.Server.Client NewDataClient__, Undo.Server.UndoManager this_);
    public delegate void void_boolean(bool NewCanUndo__);
    public delegate void void_boolean_UndoManager(bool NewCanUndo__, Undo.Server.UndoManager this_);
    public delegate void void_HistoryEntryList(Undo.Server.HistoryEntryList History__);
    public delegate void void_HistoryEntryList_UndoManager(Undo.Server.HistoryEntryList History__, Undo.Server.UndoManager this_);
    public delegate void void_HistoryEntry(Undo.Server.HistoryEntry element);
    public delegate void void_HistoryEntry_UndoManager(Undo.Server.HistoryEntry element, Undo.Server.UndoManager this_);
    public delegate void void_();
    public delegate void void_UndoManager(Undo.Server.UndoManager this_);
    public delegate void void_int32_HistoryEntry(int pos, Undo.Server.HistoryEntry element);
    public delegate void void_int32_HistoryEntry_UndoManager(int pos, Undo.Server.HistoryEntry element, Undo.Server.UndoManager this_);
    public delegate void void_int32_UndoManager(int NewActiveHistoryEntryId__, Undo.Server.UndoManager this_);
    public delegate void void_WString(String description__);
    public delegate void void_WString_UndoManager(String description__, Undo.Server.UndoManager this_);
    public delegate void void_Client_APlayServerSkeleton(Undo.Server.Client client, Undo.Server.APlayServerSkeleton this_);
    public delegate void void_APlayServerSkeleton(Undo.Server.APlayServerSkeleton this_);
    public delegate void void_String(String reason);
    public delegate void void_String_APlayServerSkeleton(String reason, Undo.Server.APlayServerSkeleton this_);
    public delegate void void_Exception(Exception ex);
    public delegate void void_Exception_APlayServerSkeleton(Exception ex, Undo.Server.APlayServerSkeleton this_);
  }
}
