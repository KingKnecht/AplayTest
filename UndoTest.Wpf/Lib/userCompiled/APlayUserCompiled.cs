/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using Undo.Client;
namespace Undo.Client
{
  public interface  IAPlayFactory
  {
  };
}
namespace Undo.Client
{
  public interface  IAPlayUserResolveEngine
  {
  };
}
namespace Undo.Client
{
  public interface  IClientImpl
  {
    bool IsAdmin {get; }
    String RemoteAddress {get; }
    ulong APlayClientId {get; }
    int Id {get; }
    Undo.Client.TaskManager TaskManager {get; }
    Undo.Client.UndoManager UndoManager {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace Undo.Client
{
  public interface  IClientEvents
  {
    void onIdChange (int NewId__);
    void onTaskManagerChange (Undo.Client.TaskManager NewTaskManager__);
    void onUndoManagerChange (Undo.Client.UndoManager NewUndoManager__);
  };
}
namespace Undo.Client
{
  public interface  IClientSkeleton : Undo.Client.IClientImpl, APlay.Generated.Intern.Client.__IClientAPEvents, Undo.Client.IClientEvents
  {
  };
}
namespace Undo.Client
{
  public interface  IClientFactory
  {
    Undo.Client.Client CreateClient ();
  };
}
namespace Undo.Client
{
  public interface  ITaskImpl
  {
    bool IsDone {get; }
    String Description {get; }
    Undo.Client.TaskList SubTasks {get; }
    int Id {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void SetDone (bool done__, Undo.Client.Client client__);
    void SetTaskDescription (String description__, Undo.Client.Client client__);
    void AddSubTask (Undo.Client.Task task__, Undo.Client.Client client__);
    void RemoveSubTask (int taskId__, Undo.Client.Client client__);
  };
}
namespace Undo.Client
{
  public interface  ITaskEvents
  {
    void onIsDoneChange (bool NewIsDone__);
    void onDescriptionChange (String NewDescription__);
    void onSubTasksReplace (Undo.Client.TaskList SubTasks__);
    void onSubTasksAdd (Undo.Client.Task element);
    void onSubTasksRemove (Undo.Client.Task element);
    void onSubTasksClear ();
    void onSubTasksInsertAt (int pos, Undo.Client.Task element);
    void onSubTasksSetAt (int pos, Undo.Client.Task element);
    void onSubTasksRemoveAt (int pos, Undo.Client.Task element);
    void onIdChange (int NewId__);
  };
}
namespace Undo.Client
{
  public interface  ITaskSkeleton : Undo.Client.ITaskImpl, APlay.Generated.Intern.Client.__ITaskAPEvents, Undo.Client.ITaskEvents
  {
  };
}
namespace Undo.Client
{
  public interface  ITaskFactory
  {
    Undo.Client.Task CreateTask ();
  };
}
namespace Undo.Client
{
  public interface  ITaskManagerImpl
  {
    Undo.Client.TaskList Tasks {get; }
    int Id {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    Undo.Client.Task CreateTask (Undo.Client.Client client__);
    void CreateTask (Undo.Client.Client client__, Undo.Client.Delegates.void_Task returnDelegate);
    void AddTask (Undo.Client.Task task__, Undo.Client.Client client__);
    void RemoveTask (int id__, Undo.Client.Client client__);
  };
}
namespace Undo.Client
{
  public interface  ITaskManagerEvents
  {
    void onTasksReplace (Undo.Client.TaskList Tasks__);
    void onTasksAdd (Undo.Client.Task element);
    void onTasksRemove (Undo.Client.Task element);
    void onTasksClear ();
    void onTasksInsertAt (int pos, Undo.Client.Task element);
    void onTasksSetAt (int pos, Undo.Client.Task element);
    void onTasksRemoveAt (int pos, Undo.Client.Task element);
    void onIdChange (int NewId__);
  };
}
namespace Undo.Client
{
  public interface  ITaskManagerSkeleton : Undo.Client.ITaskManagerImpl, APlay.Generated.Intern.Client.__ITaskManagerAPEvents, Undo.Client.ITaskManagerEvents
  {
  };
}
namespace Undo.Client
{
  public interface  ITaskManagerFactory
  {
    Undo.Client.TaskManager CreateTaskManager ();
  };
}
namespace Undo.Client
{
  public interface  IUndoManagerImpl
  {
    Undo.Client.Client DataClient {get; }
    bool CanUndo {get; }
    bool CanRedo {get; }
    Undo.Client.HistoryEntryList History {get; }
    int ActiveHistoryEntryId {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void StartTransaction (String description__);
    void EndTransaction ();
    void CancelTransaction ();
    void ExecuteUndo ();
    void ExecuteRedo ();
  };
}
namespace Undo.Client
{
  public interface  IUndoManagerEvents
  {
    void onDataClientChange (Undo.Client.Client NewDataClient__);
    void onCanUndoChange (bool NewCanUndo__);
    void onCanRedoChange (bool NewCanRedo__);
    void onHistoryReplace (Undo.Client.HistoryEntryList History__);
    void onHistoryAdd (Undo.Client.HistoryEntry element);
    void onHistoryRemove (Undo.Client.HistoryEntry element);
    void onHistoryClear ();
    void onHistoryInsertAt (int pos, Undo.Client.HistoryEntry element);
    void onHistorySetAt (int pos, Undo.Client.HistoryEntry element);
    void onHistoryRemoveAt (int pos, Undo.Client.HistoryEntry element);
    void onActiveHistoryEntryIdChange (int NewActiveHistoryEntryId__);
  };
}
namespace Undo.Client
{
  public interface  IUndoManagerSkeleton : Undo.Client.IUndoManagerImpl, APlay.Generated.Intern.Client.__IUndoManagerAPEvents, Undo.Client.IUndoManagerEvents
  {
  };
}
namespace Undo.Client
{
  public interface  IUndoManagerFactory
  {
    Undo.Client.UndoManager CreateUndoManager ();
  };
}
namespace Undo.Client
{
  public interface  IAPlayClientEvents
  {
    void onConnect (Undo.Client.Client clientObject);
    void onConnectionSwitch (Undo.Client.Client clientObject);
    void onDisconnect ();
    void onConnectionFailed ();
    void onConnectionRejected (String reason);
  };
}
namespace Undo.Client
{
  public interface  IAPlayClientImpl
  {
    String GetVersionString ();
    void Start (String address);
    void StartBalanced (String address);
    void SwitchCloud (String address);
    void SwitchBalancedCloud (String address);
    void EnableEventQueue (bool enable);
    void Stop ();
    bool FireEvent ();
    DateTime GetSyncedTime ();
    void SetExternLogger (APlay.Common.Logging.IExternLogger logger);
  };
}
namespace Undo.Client
{
  public interface  IUserObjectFactory : Undo.Client.IClientUserFactory, Undo.Client.ITaskUserFactory, Undo.Client.ITaskManagerUserFactory, Undo.Client.IUndoManagerUserFactory
  {
  };
}
namespace Undo.Client
{
  public interface  IClientUserFactory
  {
    Undo.Client.IClientImpl CreateClient ();
  };
}
namespace Undo.Client
{
  public interface  ITaskUserFactory
  {
    Undo.Client.ITaskImpl CreateTask ();
  };
}
namespace Undo.Client
{
  public interface  ITaskManagerUserFactory
  {
    Undo.Client.ITaskManagerImpl CreateTaskManager ();
  };
}
namespace Undo.Client
{
  public interface  IUndoManagerUserFactory
  {
    Undo.Client.IUndoManagerImpl CreateUndoManager ();
  };
}
namespace Undo.Client
{
  public partial class APlayFactory
  {
  }
  
}
namespace Undo.Client
{
  public abstract partial class ClientSkeleton : Undo.Client.IClientSkeleton, APlay.Generated.Intern.Client.__IClientAPEvents
  {
    public ClientSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setClientObject(((APlay.Generated.Intern.Client.__IClientAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setClientObject(APlayObjectFactory.CreateClientImpl());
      }
      ((APlay.Generated.Intern.Client.__Client) (this.getClientObject())).ClientHandler = ((APlay.Generated.Intern.Client.__IClientAPEvents) (((Undo.Client.ClientSkeleton) (this))));
    }
    public virtual bool IsAdmin
    {
      get
      {
        {
          return (implClient.IsAdmin);
        }
      }
    }
    public virtual String RemoteAddress
    {
      get
      {
        {
          return (implClient.RemoteAddress);
        }
      }
    }
    public virtual ulong APlayClientId
    {
      get
      {
        {
          return (implClient.APlayClientId);
        }
      }
    }
    public virtual int Id
    {
      get
      {
        {
          return (implClient.Id);
        }
      }
    }
    public virtual Undo.Client.TaskManager TaskManager
    {
      get
      {
        {
          return (((Undo.Client.TaskManager) (implClient.TaskManager)));
        }
      }
    }
    public virtual Undo.Client.UndoManager UndoManager
    {
      get
      {
        {
          return (((Undo.Client.UndoManager) (implClient.UndoManager)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implClient.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Client.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(Undo.Client.ClientSkeleton.StaticIdChangeEventHandler!=null)
        {
          Undo.Client.ClientSkeleton.StaticIdChangeEventHandler(NewId__, ((Undo.Client.Client) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public virtual void onTaskManagerChange(Undo.Client.TaskManager NewTaskManager__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onTaskManagerChange received","Client.Designed");
    }
    public void onInternTaskManagerChange(APlay.Generated.Intern.Client.__ITaskManagerAPEvents NewTaskManager__)
    {
      if(TaskManagerChangeEventHandler!=null)
      {
        TaskManagerChangeEventHandler(((Undo.Client.TaskManager) (NewTaskManager__)));
      }
      else
      {
        if(Undo.Client.ClientSkeleton.StaticTaskManagerChangeEventHandler!=null)
        {
          Undo.Client.ClientSkeleton.StaticTaskManagerChangeEventHandler(((Undo.Client.TaskManager) (NewTaskManager__)), ((Undo.Client.Client) (this)));
        }
        else
        {
          this.onTaskManagerChange(((Undo.Client.TaskManager) (NewTaskManager__)));
        }
      }
    }
    public virtual void onUndoManagerChange(Undo.Client.UndoManager NewUndoManager__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onUndoManagerChange received","Client.Designed");
    }
    public void onInternUndoManagerChange(APlay.Generated.Intern.Client.__IUndoManagerAPEvents NewUndoManager__)
    {
      if(UndoManagerChangeEventHandler!=null)
      {
        UndoManagerChangeEventHandler(((Undo.Client.UndoManager) (NewUndoManager__)));
      }
      else
      {
        if(Undo.Client.ClientSkeleton.StaticUndoManagerChangeEventHandler!=null)
        {
          Undo.Client.ClientSkeleton.StaticUndoManagerChangeEventHandler(((Undo.Client.UndoManager) (NewUndoManager__)), ((Undo.Client.Client) (this)));
        }
        else
        {
          this.onUndoManagerChange(((Undo.Client.UndoManager) (NewUndoManager__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implClient.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__IClientAPImpl getClientObject()
    {
      return (implClient);
    }
    public void setClientObject(APlay.Generated.Intern.Client.__IClientAPImpl impl)
    {
      implClient = impl;
    }
    public event Undo.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event Undo.Client.Delegates.void_int32_Client StaticIdChangeEventHandler;
    public event Undo.Client.Delegates.void_TaskManager TaskManagerChangeEventHandler;
    static public event Undo.Client.Delegates.void_TaskManager_Client StaticTaskManagerChangeEventHandler;
    public event Undo.Client.Delegates.void_UndoManager UndoManagerChangeEventHandler;
    static public event Undo.Client.Delegates.void_UndoManager_Client StaticUndoManagerChangeEventHandler;
    private APlay.Generated.Intern.Client.__IClientAPImpl implClient;
  }
  
}
namespace Undo.Client
{
  public abstract partial class TaskSkeleton : Undo.Client.ITaskSkeleton, APlay.Generated.Intern.Client.__ITaskAPEvents
  {
    public TaskSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setTaskObject(((APlay.Generated.Intern.Client.__ITaskAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setTaskObject(APlayObjectFactory.CreateTaskImpl());
      }
      ((APlay.Generated.Intern.Client.__Task) (this.getTaskObject())).TaskHandler = ((APlay.Generated.Intern.Client.__ITaskAPEvents) (((Undo.Client.TaskSkeleton) (this))));
    }
    public virtual bool IsDone
    {
      get
      {
        {
          return (implTask.IsDone);
        }
      }
    }
    public virtual String Description
    {
      get
      {
        {
          return (implTask.Description);
        }
      }
    }
    public virtual Undo.Client.TaskList SubTasks
    {
      get
      {
        {
          return (((Undo.Client.TaskList) (implTask.SubTasks)));
        }
      }
    }
    public virtual int Id
    {
      get
      {
        {
          return (implTask.Id);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implTask.APlayEntityId);
        }
      }
    }
    public virtual void onIsDoneChange(bool NewIsDone__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIsDoneChange received","Client.Designed");
    }
    public void onInternIsDoneChange(bool NewIsDone__)
    {
      if(IsDoneChangeEventHandler!=null)
      {
        IsDoneChangeEventHandler(NewIsDone__);
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticIsDoneChangeEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticIsDoneChangeEventHandler(NewIsDone__, ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onIsDoneChange(NewIsDone__);
        }
      }
    }
    public virtual void onDescriptionChange(String NewDescription__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onDescriptionChange received","Client.Designed");
    }
    public void onInternDescriptionChange(String NewDescription__)
    {
      if(DescriptionChangeEventHandler!=null)
      {
        DescriptionChangeEventHandler(NewDescription__);
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticDescriptionChangeEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticDescriptionChangeEventHandler(NewDescription__, ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onDescriptionChange(NewDescription__);
        }
      }
    }
    public virtual void onSubTasksReplace(Undo.Client.TaskList SubTasks__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSubTasksReplace received","Client.Designed");
    }
    public void onInternSubTasksReplace(APlay.Generated.Intern.Client.ITaskListEvents SubTasks__)
    {
      if(SubTasksReplaceEventHandler!=null)
      {
        SubTasksReplaceEventHandler(((Undo.Client.TaskList) (SubTasks__)));
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticSubTasksReplaceEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticSubTasksReplaceEventHandler(((Undo.Client.TaskList) (SubTasks__)), ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onSubTasksReplace(((Undo.Client.TaskList) (SubTasks__)));
        }
      }
    }
    public virtual void onSubTasksAdd(Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSubTasksAdd received","Client.Designed");
    }
    public void onInternSubTasksAdd(APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(SubTasksAddEventHandler!=null)
      {
        SubTasksAddEventHandler(((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticSubTasksAddEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticSubTasksAddEventHandler(((Undo.Client.Task) (element)), ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onSubTasksAdd(((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onSubTasksRemove(Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSubTasksRemove received","Client.Designed");
    }
    public void onInternSubTasksRemove(APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(SubTasksRemoveEventHandler!=null)
      {
        SubTasksRemoveEventHandler(((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticSubTasksRemoveEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticSubTasksRemoveEventHandler(((Undo.Client.Task) (element)), ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onSubTasksRemove(((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onSubTasksClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSubTasksClear received","Client.Designed");
    }
    public void onInternSubTasksClear()
    {
      if(SubTasksClearEventHandler!=null)
      {
        SubTasksClearEventHandler();
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticSubTasksClearEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticSubTasksClearEventHandler(((Undo.Client.Task) (this)));
        }
        else
        {
          this.onSubTasksClear();
        }
      }
    }
    public virtual void onSubTasksInsertAt(int pos, Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSubTasksInsertAt received","Client.Designed");
    }
    public void onInternSubTasksInsertAt(int pos, APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(SubTasksInsertAtEventHandler!=null)
      {
        SubTasksInsertAtEventHandler(pos, ((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticSubTasksInsertAtEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticSubTasksInsertAtEventHandler(pos, ((Undo.Client.Task) (element)), ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onSubTasksInsertAt(pos, ((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onSubTasksSetAt(int pos, Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSubTasksSetAt received","Client.Designed");
    }
    public void onInternSubTasksSetAt(int pos, APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(SubTasksSetAtEventHandler!=null)
      {
        SubTasksSetAtEventHandler(pos, ((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticSubTasksSetAtEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticSubTasksSetAtEventHandler(pos, ((Undo.Client.Task) (element)), ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onSubTasksSetAt(pos, ((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onSubTasksRemoveAt(int pos, Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSubTasksRemoveAt received","Client.Designed");
    }
    public void onInternSubTasksRemoveAt(int pos, APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(SubTasksRemoveAtEventHandler!=null)
      {
        SubTasksRemoveAtEventHandler(pos, ((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticSubTasksRemoveAtEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticSubTasksRemoveAtEventHandler(pos, ((Undo.Client.Task) (element)), ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onSubTasksRemoveAt(pos, ((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Client.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(Undo.Client.TaskSkeleton.StaticIdChangeEventHandler!=null)
        {
          Undo.Client.TaskSkeleton.StaticIdChangeEventHandler(NewId__, ((Undo.Client.Task) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implTask.RequiresInit();
      return (((bool) (retu)));
    }
    public void SetDone(bool done__, Undo.Client.Client client__)
    {
      implTask.SetDone(done__, ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void SetTaskDescription(String description__, Undo.Client.Client client__)
    {
      implTask.SetTaskDescription(description__, ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void AddSubTask(Undo.Client.Task task__, Undo.Client.Client client__)
    {
      implTask.AddSubTask(((APlay.Generated.Intern.Client.__ITaskAPEvents) (task__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void RemoveSubTask(int taskId__, Undo.Client.Client client__)
    {
      implTask.RemoveSubTask(taskId__, ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlay.Generated.Intern.Client.__ITaskAPImpl getTaskObject()
    {
      return (implTask);
    }
    public void setTaskObject(APlay.Generated.Intern.Client.__ITaskAPImpl impl)
    {
      implTask = impl;
    }
    public event Undo.Client.Delegates.void_boolean IsDoneChangeEventHandler;
    static public event Undo.Client.Delegates.void_boolean_Task StaticIsDoneChangeEventHandler;
    public event Undo.Client.Delegates.void_WString DescriptionChangeEventHandler;
    static public event Undo.Client.Delegates.void_WString_Task StaticDescriptionChangeEventHandler;
    public event Undo.Client.Delegates.void_TaskList SubTasksReplaceEventHandler;
    static public event Undo.Client.Delegates.void_TaskList_Task StaticSubTasksReplaceEventHandler;
    public event Undo.Client.Delegates.void_Task SubTasksAddEventHandler;
    static public event Undo.Client.Delegates.void_Task_Task StaticSubTasksAddEventHandler;
    public event Undo.Client.Delegates.void_Task SubTasksRemoveEventHandler;
    static public event Undo.Client.Delegates.void_Task_Task StaticSubTasksRemoveEventHandler;
    public event Undo.Client.Delegates.void_ SubTasksClearEventHandler;
    static public event Undo.Client.Delegates.void_Task StaticSubTasksClearEventHandler;
    public event Undo.Client.Delegates.void_int32_Task SubTasksInsertAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_Task_Task StaticSubTasksInsertAtEventHandler;
    public event Undo.Client.Delegates.void_int32_Task SubTasksSetAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_Task_Task StaticSubTasksSetAtEventHandler;
    public event Undo.Client.Delegates.void_int32_Task SubTasksRemoveAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_Task_Task StaticSubTasksRemoveAtEventHandler;
    public event Undo.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event Undo.Client.Delegates.void_int32_Task StaticIdChangeEventHandler;
    private APlay.Generated.Intern.Client.__ITaskAPImpl implTask;
  }
  
}
namespace Undo.Client
{
  public abstract partial class TaskManagerSkeleton : Undo.Client.ITaskManagerSkeleton, APlay.Generated.Intern.Client.__ITaskManagerAPEvents
  {
    public TaskManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setTaskManagerObject(((APlay.Generated.Intern.Client.__ITaskManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setTaskManagerObject(APlayObjectFactory.CreateTaskManagerImpl());
      }
      ((APlay.Generated.Intern.Client.__TaskManager) (this.getTaskManagerObject())).TaskManagerHandler = ((APlay.Generated.Intern.Client.__ITaskManagerAPEvents) (((Undo.Client.TaskManagerSkeleton) (this))));
    }
    public virtual Undo.Client.TaskList Tasks
    {
      get
      {
        {
          return (((Undo.Client.TaskList) (implTaskManager.Tasks)));
        }
      }
    }
    public virtual int Id
    {
      get
      {
        {
          return (implTaskManager.Id);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implTaskManager.APlayEntityId);
        }
      }
    }
    public virtual void onTasksReplace(Undo.Client.TaskList Tasks__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onTasksReplace received","Client.Designed");
    }
    public void onInternTasksReplace(APlay.Generated.Intern.Client.ITaskListEvents Tasks__)
    {
      if(TasksReplaceEventHandler!=null)
      {
        TasksReplaceEventHandler(((Undo.Client.TaskList) (Tasks__)));
      }
      else
      {
        if(Undo.Client.TaskManagerSkeleton.StaticTasksReplaceEventHandler!=null)
        {
          Undo.Client.TaskManagerSkeleton.StaticTasksReplaceEventHandler(((Undo.Client.TaskList) (Tasks__)), ((Undo.Client.TaskManager) (this)));
        }
        else
        {
          this.onTasksReplace(((Undo.Client.TaskList) (Tasks__)));
        }
      }
    }
    public virtual void onTasksAdd(Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onTasksAdd received","Client.Designed");
    }
    public void onInternTasksAdd(APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(TasksAddEventHandler!=null)
      {
        TasksAddEventHandler(((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskManagerSkeleton.StaticTasksAddEventHandler!=null)
        {
          Undo.Client.TaskManagerSkeleton.StaticTasksAddEventHandler(((Undo.Client.Task) (element)), ((Undo.Client.TaskManager) (this)));
        }
        else
        {
          this.onTasksAdd(((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onTasksRemove(Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onTasksRemove received","Client.Designed");
    }
    public void onInternTasksRemove(APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(TasksRemoveEventHandler!=null)
      {
        TasksRemoveEventHandler(((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskManagerSkeleton.StaticTasksRemoveEventHandler!=null)
        {
          Undo.Client.TaskManagerSkeleton.StaticTasksRemoveEventHandler(((Undo.Client.Task) (element)), ((Undo.Client.TaskManager) (this)));
        }
        else
        {
          this.onTasksRemove(((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onTasksClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onTasksClear received","Client.Designed");
    }
    public void onInternTasksClear()
    {
      if(TasksClearEventHandler!=null)
      {
        TasksClearEventHandler();
      }
      else
      {
        if(Undo.Client.TaskManagerSkeleton.StaticTasksClearEventHandler!=null)
        {
          Undo.Client.TaskManagerSkeleton.StaticTasksClearEventHandler(((Undo.Client.TaskManager) (this)));
        }
        else
        {
          this.onTasksClear();
        }
      }
    }
    public virtual void onTasksInsertAt(int pos, Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onTasksInsertAt received","Client.Designed");
    }
    public void onInternTasksInsertAt(int pos, APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(TasksInsertAtEventHandler!=null)
      {
        TasksInsertAtEventHandler(pos, ((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskManagerSkeleton.StaticTasksInsertAtEventHandler!=null)
        {
          Undo.Client.TaskManagerSkeleton.StaticTasksInsertAtEventHandler(pos, ((Undo.Client.Task) (element)), ((Undo.Client.TaskManager) (this)));
        }
        else
        {
          this.onTasksInsertAt(pos, ((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onTasksSetAt(int pos, Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onTasksSetAt received","Client.Designed");
    }
    public void onInternTasksSetAt(int pos, APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(TasksSetAtEventHandler!=null)
      {
        TasksSetAtEventHandler(pos, ((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskManagerSkeleton.StaticTasksSetAtEventHandler!=null)
        {
          Undo.Client.TaskManagerSkeleton.StaticTasksSetAtEventHandler(pos, ((Undo.Client.Task) (element)), ((Undo.Client.TaskManager) (this)));
        }
        else
        {
          this.onTasksSetAt(pos, ((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onTasksRemoveAt(int pos, Undo.Client.Task element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onTasksRemoveAt received","Client.Designed");
    }
    public void onInternTasksRemoveAt(int pos, APlay.Generated.Intern.Client.__ITaskAPEvents element)
    {
      if(TasksRemoveAtEventHandler!=null)
      {
        TasksRemoveAtEventHandler(pos, ((Undo.Client.Task) (element)));
      }
      else
      {
        if(Undo.Client.TaskManagerSkeleton.StaticTasksRemoveAtEventHandler!=null)
        {
          Undo.Client.TaskManagerSkeleton.StaticTasksRemoveAtEventHandler(pos, ((Undo.Client.Task) (element)), ((Undo.Client.TaskManager) (this)));
        }
        else
        {
          this.onTasksRemoveAt(pos, ((Undo.Client.Task) (element)));
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Client.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(Undo.Client.TaskManagerSkeleton.StaticIdChangeEventHandler!=null)
        {
          Undo.Client.TaskManagerSkeleton.StaticIdChangeEventHandler(NewId__, ((Undo.Client.TaskManager) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implTaskManager.RequiresInit();
      return (((bool) (retu)));
    }
    public Undo.Client.Task CreateTask(Undo.Client.Client client__)
    {
      APlay.Generated.Intern.Client.__ITaskAPEvents retu = implTaskManager.CreateTask(((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
      return (((Undo.Client.Task) (retu)));
    }
    public void CreateTask(Undo.Client.Client client__, Undo.Client.Delegates.void_Task returnDelegate)
    {
      implTaskManager.CreateTask(((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)), delegate(APlay.Common.Protocol.MessageReader reader_){
  APlay.Generated.Intern.Client.__Task __retu__ = new APlay.Generated.Intern.Client.__Task();
  __retu__ = APlay.Generated.Intern.Client.__Task.readReferenceFromStream(reader_);
  returnDelegate(((Undo.Client.Task) ((__retu__==null)?null:__retu__.__GetExternTask())));
}
);
    }
    public void AddTask(Undo.Client.Task task__, Undo.Client.Client client__)
    {
      implTaskManager.AddTask(((APlay.Generated.Intern.Client.__ITaskAPEvents) (task__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void RemoveTask(int id__, Undo.Client.Client client__)
    {
      implTaskManager.RemoveTask(id__, ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlay.Generated.Intern.Client.__ITaskManagerAPImpl getTaskManagerObject()
    {
      return (implTaskManager);
    }
    public void setTaskManagerObject(APlay.Generated.Intern.Client.__ITaskManagerAPImpl impl)
    {
      implTaskManager = impl;
    }
    public event Undo.Client.Delegates.void_TaskList TasksReplaceEventHandler;
    static public event Undo.Client.Delegates.void_TaskList_TaskManager StaticTasksReplaceEventHandler;
    public event Undo.Client.Delegates.void_Task TasksAddEventHandler;
    static public event Undo.Client.Delegates.void_Task_TaskManager StaticTasksAddEventHandler;
    public event Undo.Client.Delegates.void_Task TasksRemoveEventHandler;
    static public event Undo.Client.Delegates.void_Task_TaskManager StaticTasksRemoveEventHandler;
    public event Undo.Client.Delegates.void_ TasksClearEventHandler;
    static public event Undo.Client.Delegates.void_TaskManager StaticTasksClearEventHandler;
    public event Undo.Client.Delegates.void_int32_Task TasksInsertAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_Task_TaskManager StaticTasksInsertAtEventHandler;
    public event Undo.Client.Delegates.void_int32_Task TasksSetAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_Task_TaskManager StaticTasksSetAtEventHandler;
    public event Undo.Client.Delegates.void_int32_Task TasksRemoveAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_Task_TaskManager StaticTasksRemoveAtEventHandler;
    public event Undo.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event Undo.Client.Delegates.void_int32_TaskManager StaticIdChangeEventHandler;
    private APlay.Generated.Intern.Client.__ITaskManagerAPImpl implTaskManager;
  }
  
}
namespace Undo.Client
{
  public abstract partial class UndoManagerSkeleton : Undo.Client.IUndoManagerSkeleton, APlay.Generated.Intern.Client.__IUndoManagerAPEvents
  {
    public UndoManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setUndoManagerObject(((APlay.Generated.Intern.Client.__IUndoManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setUndoManagerObject(APlayObjectFactory.CreateUndoManagerImpl());
      }
      ((APlay.Generated.Intern.Client.__UndoManager) (this.getUndoManagerObject())).UndoManagerHandler = ((APlay.Generated.Intern.Client.__IUndoManagerAPEvents) (((Undo.Client.UndoManagerSkeleton) (this))));
    }
    public virtual Undo.Client.Client DataClient
    {
      get
      {
        {
          return (((Undo.Client.Client) (implUndoManager.DataClient)));
        }
      }
    }
    public virtual bool CanUndo
    {
      get
      {
        {
          return (implUndoManager.CanUndo);
        }
      }
    }
    public virtual bool CanRedo
    {
      get
      {
        {
          return (implUndoManager.CanRedo);
        }
      }
    }
    public virtual Undo.Client.HistoryEntryList History
    {
      get
      {
        {
          return (((Undo.Client.HistoryEntryList) (implUndoManager.History)));
        }
      }
    }
    public virtual int ActiveHistoryEntryId
    {
      get
      {
        {
          return (implUndoManager.ActiveHistoryEntryId);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implUndoManager.APlayEntityId);
        }
      }
    }
    public virtual void onDataClientChange(Undo.Client.Client NewDataClient__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onDataClientChange received","Client.Designed");
    }
    public void onInternDataClientChange(APlay.Generated.Intern.Client.__IClientAPEvents NewDataClient__)
    {
      if(DataClientChangeEventHandler!=null)
      {
        DataClientChangeEventHandler(((Undo.Client.Client) (NewDataClient__)));
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticDataClientChangeEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticDataClientChangeEventHandler(((Undo.Client.Client) (NewDataClient__)), ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onDataClientChange(((Undo.Client.Client) (NewDataClient__)));
        }
      }
    }
    public virtual void onCanUndoChange(bool NewCanUndo__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanUndoChange received","Client.Designed");
    }
    public void onInternCanUndoChange(bool NewCanUndo__)
    {
      if(CanUndoChangeEventHandler!=null)
      {
        CanUndoChangeEventHandler(NewCanUndo__);
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticCanUndoChangeEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticCanUndoChangeEventHandler(NewCanUndo__, ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onCanUndoChange(NewCanUndo__);
        }
      }
    }
    public virtual void onCanRedoChange(bool NewCanRedo__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanRedoChange received","Client.Designed");
    }
    public void onInternCanRedoChange(bool NewCanRedo__)
    {
      if(CanRedoChangeEventHandler!=null)
      {
        CanRedoChangeEventHandler(NewCanRedo__);
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticCanRedoChangeEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticCanRedoChangeEventHandler(NewCanRedo__, ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onCanRedoChange(NewCanRedo__);
        }
      }
    }
    public virtual void onHistoryReplace(Undo.Client.HistoryEntryList History__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryReplace received","Client.Designed");
    }
    public void onInternHistoryReplace(APlay.Generated.Intern.Client.IHistoryEntryListEvents History__)
    {
      if(HistoryReplaceEventHandler!=null)
      {
        HistoryReplaceEventHandler(((Undo.Client.HistoryEntryList) (History__)));
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticHistoryReplaceEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticHistoryReplaceEventHandler(((Undo.Client.HistoryEntryList) (History__)), ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryReplace(((Undo.Client.HistoryEntryList) (History__)));
        }
      }
    }
    public virtual void onHistoryAdd(Undo.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryAdd received","Client.Designed");
    }
    public void onInternHistoryAdd(APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistoryAddEventHandler!=null)
      {
        HistoryAddEventHandler(new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticHistoryAddEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticHistoryAddEventHandler(new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryAdd(new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryRemove(Undo.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryRemove received","Client.Designed");
    }
    public void onInternHistoryRemove(APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistoryRemoveEventHandler!=null)
      {
        HistoryRemoveEventHandler(new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticHistoryRemoveEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticHistoryRemoveEventHandler(new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryRemove(new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryClear received","Client.Designed");
    }
    public void onInternHistoryClear()
    {
      if(HistoryClearEventHandler!=null)
      {
        HistoryClearEventHandler();
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticHistoryClearEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticHistoryClearEventHandler(((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryClear();
        }
      }
    }
    public virtual void onHistoryInsertAt(int pos, Undo.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryInsertAt received","Client.Designed");
    }
    public void onInternHistoryInsertAt(int pos, APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistoryInsertAtEventHandler!=null)
      {
        HistoryInsertAtEventHandler(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticHistoryInsertAtEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticHistoryInsertAtEventHandler(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryInsertAt(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistorySetAt(int pos, Undo.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistorySetAt received","Client.Designed");
    }
    public void onInternHistorySetAt(int pos, APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistorySetAtEventHandler!=null)
      {
        HistorySetAtEventHandler(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticHistorySetAtEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticHistorySetAtEventHandler(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistorySetAt(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryRemoveAt(int pos, Undo.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryRemoveAt received","Client.Designed");
    }
    public void onInternHistoryRemoveAt(int pos, APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistoryRemoveAtEventHandler!=null)
      {
        HistoryRemoveAtEventHandler(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticHistoryRemoveAtEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticHistoryRemoveAtEventHandler(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryRemoveAt(pos, new Undo.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onActiveHistoryEntryIdChange(int NewActiveHistoryEntryId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onActiveHistoryEntryIdChange received","Client.Designed");
    }
    public void onInternActiveHistoryEntryIdChange(int NewActiveHistoryEntryId__)
    {
      if(ActiveHistoryEntryIdChangeEventHandler!=null)
      {
        ActiveHistoryEntryIdChangeEventHandler(NewActiveHistoryEntryId__);
      }
      else
      {
        if(Undo.Client.UndoManagerSkeleton.StaticActiveHistoryEntryIdChangeEventHandler!=null)
        {
          Undo.Client.UndoManagerSkeleton.StaticActiveHistoryEntryIdChangeEventHandler(NewActiveHistoryEntryId__, ((Undo.Client.UndoManager) (this)));
        }
        else
        {
          this.onActiveHistoryEntryIdChange(NewActiveHistoryEntryId__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implUndoManager.RequiresInit();
      return (((bool) (retu)));
    }
    public void StartTransaction(String description__)
    {
      implUndoManager.StartTransaction(description__);
    }
    public void EndTransaction()
    {
      implUndoManager.EndTransaction();
    }
    public void CancelTransaction()
    {
      implUndoManager.CancelTransaction();
    }
    public void ExecuteUndo()
    {
      implUndoManager.ExecuteUndo();
    }
    public void ExecuteRedo()
    {
      implUndoManager.ExecuteRedo();
    }
    public APlay.Generated.Intern.Client.__IUndoManagerAPImpl getUndoManagerObject()
    {
      return (implUndoManager);
    }
    public void setUndoManagerObject(APlay.Generated.Intern.Client.__IUndoManagerAPImpl impl)
    {
      implUndoManager = impl;
    }
    public event Undo.Client.Delegates.void_Client DataClientChangeEventHandler;
    static public event Undo.Client.Delegates.void_Client_UndoManager StaticDataClientChangeEventHandler;
    public event Undo.Client.Delegates.void_boolean CanUndoChangeEventHandler;
    static public event Undo.Client.Delegates.void_boolean_UndoManager StaticCanUndoChangeEventHandler;
    public event Undo.Client.Delegates.void_boolean CanRedoChangeEventHandler;
    static public event Undo.Client.Delegates.void_boolean_UndoManager StaticCanRedoChangeEventHandler;
    public event Undo.Client.Delegates.void_HistoryEntryList HistoryReplaceEventHandler;
    static public event Undo.Client.Delegates.void_HistoryEntryList_UndoManager StaticHistoryReplaceEventHandler;
    public event Undo.Client.Delegates.void_HistoryEntry HistoryAddEventHandler;
    static public event Undo.Client.Delegates.void_HistoryEntry_UndoManager StaticHistoryAddEventHandler;
    public event Undo.Client.Delegates.void_HistoryEntry HistoryRemoveEventHandler;
    static public event Undo.Client.Delegates.void_HistoryEntry_UndoManager StaticHistoryRemoveEventHandler;
    public event Undo.Client.Delegates.void_ HistoryClearEventHandler;
    static public event Undo.Client.Delegates.void_UndoManager StaticHistoryClearEventHandler;
    public event Undo.Client.Delegates.void_int32_HistoryEntry HistoryInsertAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_HistoryEntry_UndoManager StaticHistoryInsertAtEventHandler;
    public event Undo.Client.Delegates.void_int32_HistoryEntry HistorySetAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_HistoryEntry_UndoManager StaticHistorySetAtEventHandler;
    public event Undo.Client.Delegates.void_int32_HistoryEntry HistoryRemoveAtEventHandler;
    static public event Undo.Client.Delegates.void_int32_HistoryEntry_UndoManager StaticHistoryRemoveAtEventHandler;
    public event Undo.Client.Delegates.void_int32 ActiveHistoryEntryIdChangeEventHandler;
    static public event Undo.Client.Delegates.void_int32_UndoManager StaticActiveHistoryEntryIdChangeEventHandler;
    private APlay.Generated.Intern.Client.__IUndoManagerAPImpl implUndoManager;
  }
  
}
namespace Undo.Client
{
  public partial struct HistoryEntry
  {
    public HistoryEntry(int Id__, String Description__)
    {
      Id = Id__;
      Description = Description__;
    }
    public int Id;
    public String Description;
    public static bool operator ==(HistoryEntry a, HistoryEntry b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Id==b.Id)&& (a.Description==b.Description);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(HistoryEntry))
      {
        return false;
      }
      HistoryEntry a = this;
      HistoryEntry b = (HistoryEntry)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Id==b.Id)&&(a.Description==b.Description);
    }
    public override int GetHashCode()
    {
      return Id.GetHashCode() + Description.GetHashCode();
    }
    public static bool operator !=(HistoryEntry a, HistoryEntry b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Id.ToString()+"]" + "["+Description.ToString()+"]";
    }
  }
}
namespace Undo.Client
{
  public partial class TaskList : IList<Undo.Client.Task>, APlay.Generated.Intern.Client.ITaskListEvents
  {
    public TaskList()
    {
      APlay.Generated.Intern.Client.ITaskListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.TaskList();
      }
    }
    public TaskList(APlay.Generated.Intern.Client.ITaskListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.TaskList();
      }
    }
    public static Undo.Client.TaskList CreateForAPlay(APlay.Generated.Intern.Client.ITaskListImpl impl)
    {
      Undo.Client.TaskList ob = new Undo.Client.TaskList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.ITaskListImpl getTaskObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.ITaskListImpl impl;
    
public int IndexOf(Undo.Client.Task item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, Undo.Client.Task item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public Undo.Client.Task this[int index]
{
    get
    {
         
        return (Undo.Client.Task)impl.get((int)index);
    }
    set
    {
        Undo.Client.Task item =value;
        impl.setAt(index,item);
    }
}

public void Add(Undo.Client.Task item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(Undo.Client.Task item)
{
    return impl.contains(item);
}

public void CopyTo(Undo.Client.Task[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (Undo.Client.Task item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(Undo.Client.Task item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<Undo.Client.Task> GetEnumerator()
    {
        return new TaskListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace Undo.Client
{
  public partial class TaskListEnumerator : IEnumerator<Undo.Client.Task>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__Task> intern;
        public TaskListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__Task> intern)
        {
            this.intern = intern;
        }
        public Undo.Client.Task Current
        {
            get { APlay.Generated.Intern.Client.__Task item = (APlay.Generated.Intern.Client.__Task)intern.Current; return ((Undo.Client.Task) ((item==null)?null:item.__GetExternTask()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace Undo.Client
{
  public partial class HistoryEntryList : IList<Undo.Client.HistoryEntry>, APlay.Generated.Intern.Client.IHistoryEntryListEvents
  {
    public HistoryEntryList()
    {
      APlay.Generated.Intern.Client.IHistoryEntryListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.HistoryEntryList();
      }
    }
    public HistoryEntryList(APlay.Generated.Intern.Client.IHistoryEntryListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.HistoryEntryList();
      }
    }
    public static Undo.Client.HistoryEntryList CreateForAPlay(APlay.Generated.Intern.Client.IHistoryEntryListImpl impl)
    {
      Undo.Client.HistoryEntryList ob = new Undo.Client.HistoryEntryList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.IHistoryEntryListImpl getHistoryEntryObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.IHistoryEntryListImpl impl;
    
public int IndexOf(Undo.Client.HistoryEntry item)
{
    return (int)impl.indexOf(new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void Insert(int index, Undo.Client.HistoryEntry item)
{
    impl.insertAt(index, new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public Undo.Client.HistoryEntry this[int index]
{
    get
    {
        APlay.Generated.Intern.Client.__HistoryEntry item = (APlay.Generated.Intern.Client.__HistoryEntry)impl.get((int)index);
        return new Undo.Client.HistoryEntry(((int) (item.Id)), ((String) (item.Description)));
    }
    set
    {
        Undo.Client.HistoryEntry item =value;
        impl.setAt(index,new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
    }
}

public void Add(Undo.Client.HistoryEntry item)
{
    impl.add(new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void Clear()
{
    impl.clear();
}

public bool Contains(Undo.Client.HistoryEntry item)
{
    return impl.contains(new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void CopyTo(Undo.Client.HistoryEntry[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (Undo.Client.HistoryEntry item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(Undo.Client.HistoryEntry item)
{
    return impl.remove(new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<Undo.Client.HistoryEntry> GetEnumerator()
    {
        return new HistoryEntryListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace Undo.Client
{
  public partial class HistoryEntryListEnumerator : IEnumerator<Undo.Client.HistoryEntry>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__HistoryEntry> intern;
        public HistoryEntryListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__HistoryEntry> intern)
        {
            this.intern = intern;
        }
        public Undo.Client.HistoryEntry Current
        {
            get { APlay.Generated.Intern.Client.__HistoryEntry item = (APlay.Generated.Intern.Client.__HistoryEntry)intern.Current; return new Undo.Client.HistoryEntry(((int) (item.Id)), ((String) (item.Description)));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace Undo.Client
{
  public abstract partial class APlayClientSkeleton : Undo.Client.IAPlayClientEvents, APlay.Generated.Intern.Client.IDesignedClient
  {
    public APlayClientSkeleton()
    {
      APlay.Generated.Intern.Client.DesignedClient client = new APlay.Generated.Intern.Client.DesignedClient(this);
      client.Factory = ((APlay.Generated.Intern.Client.IUserClassFactory) (new Undo.Client.UserClassFactory()));
      impl = client;
    }
    public abstract void onConnect(Undo.Client.Client clientObject);
    public void onInternConnect(APlay.Generated.Intern.Client.__IClientAPEvents clientObject)
    {
      if(ConnectEventHandler!=null)
      {
        ConnectEventHandler(((Undo.Client.Client) (clientObject)));
      }
      else
      {
        if(Undo.Client.APlayClientSkeleton.StaticConnectEventHandler!=null)
        {
          Undo.Client.APlayClientSkeleton.StaticConnectEventHandler(((Undo.Client.Client) (clientObject)), ((Undo.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnect(((Undo.Client.Client) (clientObject)));
        }
      }
    }
    public virtual void onConnectionSwitch(Undo.Client.Client clientObject)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionSwitch received","Client.Designed");
    }
    public void onInternConnectionSwitch(APlay.Generated.Intern.Client.__IClientAPEvents clientObject)
    {
      if(ConnectionSwitchEventHandler!=null)
      {
        ConnectionSwitchEventHandler(((Undo.Client.Client) (clientObject)));
      }
      else
      {
        if(Undo.Client.APlayClientSkeleton.StaticConnectionSwitchEventHandler!=null)
        {
          Undo.Client.APlayClientSkeleton.StaticConnectionSwitchEventHandler(((Undo.Client.Client) (clientObject)), ((Undo.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionSwitch(((Undo.Client.Client) (clientObject)));
        }
      }
    }
    public abstract void onDisconnect();
    public void onInternDisconnect()
    {
      if(DisconnectEventHandler!=null)
      {
        DisconnectEventHandler();
      }
      else
      {
        if(Undo.Client.APlayClientSkeleton.StaticDisconnectEventHandler!=null)
        {
          Undo.Client.APlayClientSkeleton.StaticDisconnectEventHandler(((Undo.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onDisconnect();
        }
      }
    }
    public abstract void onConnectionFailed();
    public void onInternConnectionFailed()
    {
      if(ConnectionFailedEventHandler!=null)
      {
        ConnectionFailedEventHandler();
      }
      else
      {
        if(Undo.Client.APlayClientSkeleton.StaticConnectionFailedEventHandler!=null)
        {
          Undo.Client.APlayClientSkeleton.StaticConnectionFailedEventHandler(((Undo.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionFailed();
        }
      }
    }
    public virtual void onConnectionRejected(String reason)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionRejected received","Client.Designed");
    }
    public void onInternConnectionRejected(String reason)
    {
      if(ConnectionRejectedEventHandler!=null)
      {
        ConnectionRejectedEventHandler(reason);
      }
      else
      {
        if(Undo.Client.APlayClientSkeleton.StaticConnectionRejectedEventHandler!=null)
        {
          Undo.Client.APlayClientSkeleton.StaticConnectionRejectedEventHandler(reason, ((Undo.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionRejected(reason);
        }
      }
    }
    public String GetVersionString()
    {
      String retu = impl.GetVersionString();
      return (((String) (retu)));
    }
    public void Start(String address)
    {
      impl.Start(address);
    }
    public void StartBalanced(String address)
    {
      impl.StartBalanced(address);
    }
    public void SwitchCloud(String address)
    {
      impl.SwitchCloud(address);
    }
    public void SwitchBalancedCloud(String address)
    {
      impl.SwitchBalancedCloud(address);
    }
    public void EnableEventQueue(bool enable)
    {
      impl.EnableEventQueue(enable);
    }
    public void Stop()
    {
      impl.Stop();
    }
    public bool FireEvent()
    {
      bool retu = impl.FireEvent();
      return (((bool) (retu)));
    }
    public DateTime GetSyncedTime()
    {
      DateTime retu = impl.GetSyncedTime();
      return (((DateTime) (retu)));
    }
    public void SetExternLogger(APlay.Common.Logging.IExternLogger logger)
    {
      impl.SetExternLogger(((APlay.Common.Logging.IExternLogger) (logger)));
    }
    public event Undo.Client.Delegates.void_Client ConnectEventHandler;
    static public event Undo.Client.Delegates.void_Client_APlayClientSkeleton StaticConnectEventHandler;
    public event Undo.Client.Delegates.void_Client ConnectionSwitchEventHandler;
    static public event Undo.Client.Delegates.void_Client_APlayClientSkeleton StaticConnectionSwitchEventHandler;
    public event Undo.Client.Delegates.void_ DisconnectEventHandler;
    static public event Undo.Client.Delegates.void_APlayClientSkeleton StaticDisconnectEventHandler;
    public event Undo.Client.Delegates.void_ ConnectionFailedEventHandler;
    static public event Undo.Client.Delegates.void_APlayClientSkeleton StaticConnectionFailedEventHandler;
    public event Undo.Client.Delegates.void_String ConnectionRejectedEventHandler;
    static public event Undo.Client.Delegates.void_String_APlayClientSkeleton StaticConnectionRejectedEventHandler;
    private APlay.Generated.Intern.Client.IDesignedClientImpl impl;
  }
  
}
namespace Undo.Client
{
  public partial class APlayObjectFactory
  {
    public static void SetUserFactory(Undo.Client.IUserObjectFactory factory)
    {
      Client_ = factory;
      Task_ = factory;
      TaskManager_ = factory;
      UndoManager_ = factory;
    }
    public static void SetAPlayDefaultFactory()
    {
      Client_ = null;
      Task_ = null;
      TaskManager_ = null;
      UndoManager_ = null;
    }
    public static void SetClientUserFactory(Undo.Client.IClientUserFactory factory)
    {
      Client_ = factory;
    }
    public static void SetClientAPlayDefaultFactory()
    {
      Client_ = null;
    }
    public static APlay.Generated.Intern.Client.__IClientAPImpl CreateClientImpl()
    {
      if(Client_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateClient());
      }
    }
    public static void SetTaskUserFactory(Undo.Client.ITaskUserFactory factory)
    {
      Task_ = factory;
    }
    public static void SetTaskAPlayDefaultFactory()
    {
      Task_ = null;
    }
    public static APlay.Generated.Intern.Client.__ITaskAPImpl CreateTaskImpl()
    {
      if(Task_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateTask());
      }
    }
    public static void SetTaskManagerUserFactory(Undo.Client.ITaskManagerUserFactory factory)
    {
      TaskManager_ = factory;
    }
    public static void SetTaskManagerAPlayDefaultFactory()
    {
      TaskManager_ = null;
    }
    public static APlay.Generated.Intern.Client.__ITaskManagerAPImpl CreateTaskManagerImpl()
    {
      if(TaskManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateTaskManager());
      }
    }
    public static void SetUndoManagerUserFactory(Undo.Client.IUndoManagerUserFactory factory)
    {
      UndoManager_ = factory;
    }
    public static void SetUndoManagerAPlayDefaultFactory()
    {
      UndoManager_ = null;
    }
    public static APlay.Generated.Intern.Client.__IUndoManagerAPImpl CreateUndoManagerImpl()
    {
      if(UndoManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateUndoManager());
      }
    }
    static private Undo.Client.IClientUserFactory Client_;
    static private Undo.Client.ITaskUserFactory Task_;
    static private Undo.Client.ITaskManagerUserFactory TaskManager_;
    static private Undo.Client.IUndoManagerUserFactory UndoManager_;
  }
  
}
namespace Undo.Client
{
  public partial class UserClassFactory : APlay.Generated.Intern.Client.IUserClassFactory
  {
    public APlay.Generated.Intern.Client.__IClientAPEvents CreateClientEvents(APlay.Generated.Intern.Client.__IClientAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IClientAPEvents retu__ = ((APlay.Generated.Intern.Client.__IClientAPEvents) (new Undo.Client.Client()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__ITaskAPEvents CreateTaskEvents(APlay.Generated.Intern.Client.__ITaskAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__ITaskAPEvents retu__ = ((APlay.Generated.Intern.Client.__ITaskAPEvents) (new Undo.Client.Task()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__ITaskManagerAPEvents CreateTaskManagerEvents(APlay.Generated.Intern.Client.__ITaskManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__ITaskManagerAPEvents retu__ = ((APlay.Generated.Intern.Client.__ITaskManagerAPEvents) (new Undo.Client.TaskManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IUndoManagerAPEvents CreateUndoManagerEvents(APlay.Generated.Intern.Client.__IUndoManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IUndoManagerAPEvents retu__ = ((APlay.Generated.Intern.Client.__IUndoManagerAPEvents) (new Undo.Client.UndoManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.ITaskListEvents CreateTaskListEvents(APlay.Generated.Intern.Client.ITaskListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.ITaskListEvents) (Undo.Client.TaskList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Client.IHistoryEntryListEvents CreateHistoryEntryListEvents(APlay.Generated.Intern.Client.IHistoryEntryListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.IHistoryEntryListEvents) (Undo.Client.HistoryEntryList.CreateForAPlay(impl))));
    }
  }
  
}
namespace Undo.Client
{
  public partial class APlayUserResolveEngine : APlay.Generated.Intern.Client.IAPlayResolve
  {
    public static void SetResolveEngine(Undo.Client.IAPlayUserResolveEngine inter)
    {
      inter_ = inter;
      APlay.Generated.Intern.Client.APlayInternUserResolver.SetResolveEngine(new Undo.Client.APlayUserResolveEngine());
    }
    static private Undo.Client.IAPlayUserResolveEngine inter_;
  }
  
}
namespace Undo.Client
{
  public partial class Delegates
  {
    public delegate void void_int32(int NewId__);
    public delegate void void_int32_Client(int NewId__, Undo.Client.Client this_);
    public delegate void void_TaskManager(Undo.Client.TaskManager NewTaskManager__);
    public delegate void void_TaskManager_Client(Undo.Client.TaskManager NewTaskManager__, Undo.Client.Client this_);
    public delegate void void_UndoManager(Undo.Client.UndoManager NewUndoManager__);
    public delegate void void_UndoManager_Client(Undo.Client.UndoManager NewUndoManager__, Undo.Client.Client this_);
    public delegate void void_boolean(bool NewIsDone__);
    public delegate void void_boolean_Task(bool NewIsDone__, Undo.Client.Task this_);
    public delegate void void_WString(String NewDescription__);
    public delegate void void_WString_Task(String NewDescription__, Undo.Client.Task this_);
    public delegate void void_TaskList(Undo.Client.TaskList SubTasks__);
    public delegate void void_TaskList_Task(Undo.Client.TaskList SubTasks__, Undo.Client.Task this_);
    public delegate void void_Task(Undo.Client.Task element);
    public delegate void void_Task_Task(Undo.Client.Task element, Undo.Client.Task this_);
    public delegate void void_();
    public delegate void void_int32_Task(int pos, Undo.Client.Task element);
    public delegate void void_int32_Task_Task(int pos, Undo.Client.Task element, Undo.Client.Task this_);
    public delegate void void_TaskList_TaskManager(Undo.Client.TaskList Tasks__, Undo.Client.TaskManager this_);
    public delegate void void_Task_TaskManager(Undo.Client.Task element, Undo.Client.TaskManager this_);
    public delegate void void_int32_Task_TaskManager(int pos, Undo.Client.Task element, Undo.Client.TaskManager this_);
    public delegate void void_int32_TaskManager(int NewId__, Undo.Client.TaskManager this_);
    public delegate void void_Client(Undo.Client.Client NewDataClient__);
    public delegate void void_Client_UndoManager(Undo.Client.Client NewDataClient__, Undo.Client.UndoManager this_);
    public delegate void void_boolean_UndoManager(bool NewCanUndo__, Undo.Client.UndoManager this_);
    public delegate void void_HistoryEntryList(Undo.Client.HistoryEntryList History__);
    public delegate void void_HistoryEntryList_UndoManager(Undo.Client.HistoryEntryList History__, Undo.Client.UndoManager this_);
    public delegate void void_HistoryEntry(Undo.Client.HistoryEntry element);
    public delegate void void_HistoryEntry_UndoManager(Undo.Client.HistoryEntry element, Undo.Client.UndoManager this_);
    public delegate void void_int32_HistoryEntry(int pos, Undo.Client.HistoryEntry element);
    public delegate void void_int32_HistoryEntry_UndoManager(int pos, Undo.Client.HistoryEntry element, Undo.Client.UndoManager this_);
    public delegate void void_int32_UndoManager(int NewActiveHistoryEntryId__, Undo.Client.UndoManager this_);
    public delegate void void_Client_APlayClientSkeleton(Undo.Client.Client clientObject, Undo.Client.APlayClientSkeleton this_);
    public delegate void void_APlayClientSkeleton(Undo.Client.APlayClientSkeleton this_);
    public delegate void void_String(String reason);
    public delegate void void_String_APlayClientSkeleton(String reason, Undo.Client.APlayClientSkeleton this_);
  }
}
