/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using Lobby.Client;
namespace Lobby.Client
{
  public interface  IAPlayFactory
  {
  };
}
namespace Lobby.Client
{
  public interface  IAPlayUserResolveEngine
  {
  };
}
namespace Lobby.Client
{
  public interface  IClientImpl
  {
    bool IsAdmin {get; }
    String RemoteAddress {get; }
    ulong APlayClientId {get; }
    Lobby.Client.User CurrentUser {get; set; }
    bool CanJoinProject {get; }
    bool CanCreateProject {get; }
    Lobby.Client.ProjectList Projects {get; }
    Lobby.Client.Project SelectedProject {get; }
    Lobby.Client.Client DataClient {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void JoinProject (Lobby.Client.Client sender__, int projectId__);
    void CreateProject (Lobby.Client.Client sender__, String name__);
    void SearchProjects (String searchString__);
    void SelectProject (int projectId__);
  };
}
namespace Lobby.Client
{
  public interface  IClientEvents
  {
    void onCanJoinProjectChange (bool NewCanJoinProject__);
    void onCanCreateProjectChange (bool NewCanCreateProject__);
    void onProjectsReplace (Lobby.Client.ProjectList Projects__);
    void onProjectsAdd (Lobby.Client.Project element);
    void onProjectsRemove (Lobby.Client.Project element);
    void onProjectsClear ();
    void onProjectsInsertAt (int pos, Lobby.Client.Project element);
    void onProjectsSetAt (int pos, Lobby.Client.Project element);
    void onProjectsRemoveAt (int pos, Lobby.Client.Project element);
    void onSelectedProjectChange (Lobby.Client.Project NewSelectedProject__);
    void onDataClientChange (Lobby.Client.Client NewDataClient__);
    void onJoinedProject (Lobby.Client.Project project__);
  };
}
namespace Lobby.Client
{
  public interface  IClientSkeleton : Lobby.Client.IClientImpl, APlay.Generated.Intern.Client.__IClientAPEvents, Lobby.Client.IClientEvents
  {
  };
}
namespace Lobby.Client
{
  public interface  IClientFactory
  {
    Lobby.Client.Client CreateClient ();
  };
}
namespace Lobby.Client
{
  public interface  IProjectImpl
  {
    int Id {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace Lobby.Client
{
  public interface  IProjectEvents
  {
  };
}
namespace Lobby.Client
{
  public interface  IProjectSkeleton : Lobby.Client.IProjectImpl, APlay.Generated.Intern.Client.__IProjectAPEvents, Lobby.Client.IProjectEvents
  {
  };
}
namespace Lobby.Client
{
  public interface  IProjectFactory
  {
    Lobby.Client.Project CreateProject ();
  };
}
namespace Lobby.Client
{
  public interface  IUserImpl
  {
    String Name {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace Lobby.Client
{
  public interface  IUserEvents
  {
  };
}
namespace Lobby.Client
{
  public interface  IUserSkeleton : Lobby.Client.IUserImpl, APlay.Generated.Intern.Client.__IUserAPEvents, Lobby.Client.IUserEvents
  {
  };
}
namespace Lobby.Client
{
  public interface  IUserFactory
  {
    Lobby.Client.User CreateUser ();
  };
}
namespace Lobby.Client
{
  public interface  IAPlayClientEvents
  {
    void onConnect (Lobby.Client.Client clientObject);
    void onConnectionSwitch (Lobby.Client.Client clientObject);
    void onDisconnect ();
    void onConnectionFailed ();
    void onConnectionRejected (String reason);
  };
}
namespace Lobby.Client
{
  public interface  IAPlayClientImpl
  {
    String GetVersionString ();
    void Start (String address);
    void StartBalanced (String address);
    void SwitchCloud (String address);
    void SwitchBalancedCloud (String address);
    void EnableEventQueue (bool enable);
    void Stop ();
    bool FireEvent ();
    DateTime GetSyncedTime ();
    void SetExternLogger (APlay.Common.Logging.IExternLogger logger);
  };
}
namespace Lobby.Client
{
  public interface  IUserObjectFactory : Lobby.Client.IClientUserFactory, Lobby.Client.IProjectUserFactory, Lobby.Client.IUserUserFactory
  {
  };
}
namespace Lobby.Client
{
  public interface  IClientUserFactory
  {
    Lobby.Client.IClientImpl CreateClient ();
  };
}
namespace Lobby.Client
{
  public interface  IProjectUserFactory
  {
    Lobby.Client.IProjectImpl CreateProject ();
  };
}
namespace Lobby.Client
{
  public interface  IUserUserFactory
  {
    Lobby.Client.IUserImpl CreateUser ();
  };
}
namespace Lobby.Client
{
  public partial class APlayFactory
  {
  }
  
}
namespace Lobby.Client
{
  public abstract partial class ClientSkeleton : Lobby.Client.IClientSkeleton, APlay.Generated.Intern.Client.__IClientAPEvents
  {
    public ClientSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setClientObject(((APlay.Generated.Intern.Client.__IClientAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setClientObject(APlayObjectFactory.CreateClientImpl());
      }
      ((APlay.Generated.Intern.Client.__Client) (this.getClientObject())).ClientHandler = ((APlay.Generated.Intern.Client.__IClientAPEvents) (((Lobby.Client.ClientSkeleton) (this))));
    }
    public virtual bool IsAdmin
    {
      get
      {
        {
          return (implClient.IsAdmin);
        }
      }
    }
    public virtual String RemoteAddress
    {
      get
      {
        {
          return (implClient.RemoteAddress);
        }
      }
    }
    public virtual ulong APlayClientId
    {
      get
      {
        {
          return (implClient.APlayClientId);
        }
      }
    }
    public virtual Lobby.Client.User CurrentUser
    {
      set
      {
        {
          //User
          implClient.CurrentUser = ((APlay.Generated.Intern.Client.__IUserAPEvents) (value));
        }
      }
      get
      {
        {
          return (((Lobby.Client.User) (implClient.CurrentUser)));
        }
      }
    }
    public virtual bool CanJoinProject
    {
      get
      {
        {
          return (implClient.CanJoinProject);
        }
      }
    }
    public virtual bool CanCreateProject
    {
      get
      {
        {
          return (implClient.CanCreateProject);
        }
      }
    }
    public virtual Lobby.Client.ProjectList Projects
    {
      get
      {
        {
          return (((Lobby.Client.ProjectList) (implClient.Projects)));
        }
      }
    }
    public virtual Lobby.Client.Project SelectedProject
    {
      get
      {
        {
          return (((Lobby.Client.Project) (implClient.SelectedProject)));
        }
      }
    }
    public virtual Lobby.Client.Client DataClient
    {
      get
      {
        {
          return (((Lobby.Client.Client) (implClient.DataClient)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implClient.APlayEntityId);
        }
      }
    }
    public virtual void onCanJoinProjectChange(bool NewCanJoinProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanJoinProjectChange received","Client.Designed");
    }
    public void onInternCanJoinProjectChange(bool NewCanJoinProject__)
    {
      if(CanJoinProjectChangeEventHandler!=null)
      {
        CanJoinProjectChangeEventHandler(NewCanJoinProject__);
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticCanJoinProjectChangeEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticCanJoinProjectChangeEventHandler(NewCanJoinProject__, ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onCanJoinProjectChange(NewCanJoinProject__);
        }
      }
    }
    public virtual void onCanCreateProjectChange(bool NewCanCreateProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanCreateProjectChange received","Client.Designed");
    }
    public void onInternCanCreateProjectChange(bool NewCanCreateProject__)
    {
      if(CanCreateProjectChangeEventHandler!=null)
      {
        CanCreateProjectChangeEventHandler(NewCanCreateProject__);
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticCanCreateProjectChangeEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticCanCreateProjectChangeEventHandler(NewCanCreateProject__, ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onCanCreateProjectChange(NewCanCreateProject__);
        }
      }
    }
    public virtual void onProjectsReplace(Lobby.Client.ProjectList Projects__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsReplace received","Client.Designed");
    }
    public void onInternProjectsReplace(APlay.Generated.Intern.Client.IProjectListEvents Projects__)
    {
      if(ProjectsReplaceEventHandler!=null)
      {
        ProjectsReplaceEventHandler(((Lobby.Client.ProjectList) (Projects__)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticProjectsReplaceEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticProjectsReplaceEventHandler(((Lobby.Client.ProjectList) (Projects__)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onProjectsReplace(((Lobby.Client.ProjectList) (Projects__)));
        }
      }
    }
    public virtual void onProjectsAdd(Lobby.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsAdd received","Client.Designed");
    }
    public void onInternProjectsAdd(APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsAddEventHandler!=null)
      {
        ProjectsAddEventHandler(((Lobby.Client.Project) (element)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticProjectsAddEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticProjectsAddEventHandler(((Lobby.Client.Project) (element)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onProjectsAdd(((Lobby.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsRemove(Lobby.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsRemove received","Client.Designed");
    }
    public void onInternProjectsRemove(APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsRemoveEventHandler!=null)
      {
        ProjectsRemoveEventHandler(((Lobby.Client.Project) (element)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticProjectsRemoveEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticProjectsRemoveEventHandler(((Lobby.Client.Project) (element)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onProjectsRemove(((Lobby.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsClear received","Client.Designed");
    }
    public void onInternProjectsClear()
    {
      if(ProjectsClearEventHandler!=null)
      {
        ProjectsClearEventHandler();
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticProjectsClearEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticProjectsClearEventHandler(((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onProjectsClear();
        }
      }
    }
    public virtual void onProjectsInsertAt(int pos, Lobby.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsInsertAt received","Client.Designed");
    }
    public void onInternProjectsInsertAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsInsertAtEventHandler!=null)
      {
        ProjectsInsertAtEventHandler(pos, ((Lobby.Client.Project) (element)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticProjectsInsertAtEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticProjectsInsertAtEventHandler(pos, ((Lobby.Client.Project) (element)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onProjectsInsertAt(pos, ((Lobby.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsSetAt(int pos, Lobby.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsSetAt received","Client.Designed");
    }
    public void onInternProjectsSetAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsSetAtEventHandler!=null)
      {
        ProjectsSetAtEventHandler(pos, ((Lobby.Client.Project) (element)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticProjectsSetAtEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticProjectsSetAtEventHandler(pos, ((Lobby.Client.Project) (element)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onProjectsSetAt(pos, ((Lobby.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsRemoveAt(int pos, Lobby.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsRemoveAt received","Client.Designed");
    }
    public void onInternProjectsRemoveAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsRemoveAtEventHandler!=null)
      {
        ProjectsRemoveAtEventHandler(pos, ((Lobby.Client.Project) (element)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticProjectsRemoveAtEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticProjectsRemoveAtEventHandler(pos, ((Lobby.Client.Project) (element)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onProjectsRemoveAt(pos, ((Lobby.Client.Project) (element)));
        }
      }
    }
    public virtual void onSelectedProjectChange(Lobby.Client.Project NewSelectedProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSelectedProjectChange received","Client.Designed");
    }
    public void onInternSelectedProjectChange(APlay.Generated.Intern.Client.__IProjectAPEvents NewSelectedProject__)
    {
      if(SelectedProjectChangeEventHandler!=null)
      {
        SelectedProjectChangeEventHandler(((Lobby.Client.Project) (NewSelectedProject__)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticSelectedProjectChangeEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticSelectedProjectChangeEventHandler(((Lobby.Client.Project) (NewSelectedProject__)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onSelectedProjectChange(((Lobby.Client.Project) (NewSelectedProject__)));
        }
      }
    }
    public virtual void onDataClientChange(Lobby.Client.Client NewDataClient__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onDataClientChange received","Client.Designed");
    }
    public void onInternDataClientChange(APlay.Generated.Intern.Client.__IClientAPEvents NewDataClient__)
    {
      if(DataClientChangeEventHandler!=null)
      {
        DataClientChangeEventHandler(((Lobby.Client.Client) (NewDataClient__)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticDataClientChangeEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticDataClientChangeEventHandler(((Lobby.Client.Client) (NewDataClient__)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onDataClientChange(((Lobby.Client.Client) (NewDataClient__)));
        }
      }
    }
    public abstract void onJoinedProject(Lobby.Client.Project project__);
    public void onInternJoinedProject(APlay.Generated.Intern.Client.__IProjectAPEvents project__)
    {
      if(JoinedProjectEventHandler!=null)
      {
        JoinedProjectEventHandler(((Lobby.Client.Project) (project__)));
      }
      else
      {
        if(Lobby.Client.ClientSkeleton.StaticJoinedProjectEventHandler!=null)
        {
          Lobby.Client.ClientSkeleton.StaticJoinedProjectEventHandler(((Lobby.Client.Project) (project__)), ((Lobby.Client.Client) (this)));
        }
        else
        {
          this.onJoinedProject(((Lobby.Client.Project) (project__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implClient.RequiresInit();
      return (((bool) (retu)));
    }
    public void JoinProject(Lobby.Client.Client sender__, int projectId__)
    {
      implClient.JoinProject(((APlay.Generated.Intern.Client.__IClientAPEvents) (sender__)), projectId__);
    }
    public void CreateProject(Lobby.Client.Client sender__, String name__)
    {
      implClient.CreateProject(((APlay.Generated.Intern.Client.__IClientAPEvents) (sender__)), name__);
    }
    public void SearchProjects(String searchString__)
    {
      implClient.SearchProjects(searchString__);
    }
    public void SelectProject(int projectId__)
    {
      implClient.SelectProject(projectId__);
    }
    public APlay.Generated.Intern.Client.__IClientAPImpl getClientObject()
    {
      return (implClient);
    }
    public void setClientObject(APlay.Generated.Intern.Client.__IClientAPImpl impl)
    {
      implClient = impl;
    }
    public event Lobby.Client.Delegates.void_boolean CanJoinProjectChangeEventHandler;
    static public event Lobby.Client.Delegates.void_boolean_Client StaticCanJoinProjectChangeEventHandler;
    public event Lobby.Client.Delegates.void_boolean CanCreateProjectChangeEventHandler;
    static public event Lobby.Client.Delegates.void_boolean_Client StaticCanCreateProjectChangeEventHandler;
    public event Lobby.Client.Delegates.void_ProjectList ProjectsReplaceEventHandler;
    static public event Lobby.Client.Delegates.void_ProjectList_Client StaticProjectsReplaceEventHandler;
    public event Lobby.Client.Delegates.void_Project ProjectsAddEventHandler;
    static public event Lobby.Client.Delegates.void_Project_Client StaticProjectsAddEventHandler;
    public event Lobby.Client.Delegates.void_Project ProjectsRemoveEventHandler;
    static public event Lobby.Client.Delegates.void_Project_Client StaticProjectsRemoveEventHandler;
    public event Lobby.Client.Delegates.void_ ProjectsClearEventHandler;
    static public event Lobby.Client.Delegates.void_Client StaticProjectsClearEventHandler;
    public event Lobby.Client.Delegates.void_int32_Project ProjectsInsertAtEventHandler;
    static public event Lobby.Client.Delegates.void_int32_Project_Client StaticProjectsInsertAtEventHandler;
    public event Lobby.Client.Delegates.void_int32_Project ProjectsSetAtEventHandler;
    static public event Lobby.Client.Delegates.void_int32_Project_Client StaticProjectsSetAtEventHandler;
    public event Lobby.Client.Delegates.void_int32_Project ProjectsRemoveAtEventHandler;
    static public event Lobby.Client.Delegates.void_int32_Project_Client StaticProjectsRemoveAtEventHandler;
    public event Lobby.Client.Delegates.void_Project SelectedProjectChangeEventHandler;
    static public event Lobby.Client.Delegates.void_Project_Client StaticSelectedProjectChangeEventHandler;
    public event Lobby.Client.Delegates.void_Client DataClientChangeEventHandler;
    static public event Lobby.Client.Delegates.void_Client_Client StaticDataClientChangeEventHandler;
    public event Lobby.Client.Delegates.void_Project JoinedProjectEventHandler;
    static public event Lobby.Client.Delegates.void_Project_Client StaticJoinedProjectEventHandler;
    private APlay.Generated.Intern.Client.__IClientAPImpl implClient;
  }
  
}
namespace Lobby.Client
{
  public abstract partial class ProjectSkeleton : Lobby.Client.IProjectSkeleton, APlay.Generated.Intern.Client.__IProjectAPEvents
  {
    public ProjectSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setProjectObject(((APlay.Generated.Intern.Client.__IProjectAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setProjectObject(APlayObjectFactory.CreateProjectImpl());
      }
      ((APlay.Generated.Intern.Client.__Project) (this.getProjectObject())).ProjectHandler = ((APlay.Generated.Intern.Client.__IProjectAPEvents) (((Lobby.Client.ProjectSkeleton) (this))));
    }
    public virtual int Id
    {
      set
      {
        {
          //int32
          implProject.Id = value;
        }
      }
      get
      {
        {
          return (implProject.Id);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implProject.APlayEntityId);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implProject.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__IProjectAPImpl getProjectObject()
    {
      return (implProject);
    }
    public void setProjectObject(APlay.Generated.Intern.Client.__IProjectAPImpl impl)
    {
      implProject = impl;
    }
    private APlay.Generated.Intern.Client.__IProjectAPImpl implProject;
  }
  
}
namespace Lobby.Client
{
  public abstract partial class UserSkeleton : Lobby.Client.IUserSkeleton, APlay.Generated.Intern.Client.__IUserAPEvents
  {
    public UserSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setUserObject(((APlay.Generated.Intern.Client.__IUserAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setUserObject(APlayObjectFactory.CreateUserImpl());
      }
      ((APlay.Generated.Intern.Client.__User) (this.getUserObject())).UserHandler = ((APlay.Generated.Intern.Client.__IUserAPEvents) (((Lobby.Client.UserSkeleton) (this))));
    }
    public virtual String Name
    {
      set
      {
        {
          //WString
          implUser.Name = value;
        }
      }
      get
      {
        {
          return (implUser.Name);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implUser.APlayEntityId);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implUser.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__IUserAPImpl getUserObject()
    {
      return (implUser);
    }
    public void setUserObject(APlay.Generated.Intern.Client.__IUserAPImpl impl)
    {
      implUser = impl;
    }
    private APlay.Generated.Intern.Client.__IUserAPImpl implUser;
  }
  
}
namespace Lobby.Client
{
  public partial struct ProjectDetail
  {
    public ProjectDetail(String Name__, String CreatedBy__, DateTime CreationDate__)
    {
      Name = Name__;
      CreatedBy = CreatedBy__;
      CreationDate = CreationDate__;
    }
    public String Name;
    public String CreatedBy;
    public DateTime CreationDate;
    public static bool operator ==(ProjectDetail a, ProjectDetail b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Name==b.Name)&& (a.CreatedBy==b.CreatedBy)&& (a.CreationDate==b.CreationDate);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(ProjectDetail))
      {
        return false;
      }
      ProjectDetail a = this;
      ProjectDetail b = (ProjectDetail)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Name==b.Name)&&(a.CreatedBy==b.CreatedBy)&&(a.CreationDate==b.CreationDate);
    }
    public override int GetHashCode()
    {
      return Name.GetHashCode() + CreatedBy.GetHashCode() + CreationDate.GetHashCode();
    }
    public static bool operator !=(ProjectDetail a, ProjectDetail b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Name.ToString()+"]" + "["+CreatedBy.ToString()+"]" + "["+CreationDate.ToString()+"]";
    }
  }
}
namespace Lobby.Client
{
  public partial class ProjectList : IList<Lobby.Client.Project>, APlay.Generated.Intern.Client.IProjectListEvents
  {
    public ProjectList()
    {
      APlay.Generated.Intern.Client.IProjectListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ProjectList();
      }
    }
    public ProjectList(APlay.Generated.Intern.Client.IProjectListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ProjectList();
      }
    }
    public static Lobby.Client.ProjectList CreateForAPlay(APlay.Generated.Intern.Client.IProjectListImpl impl)
    {
      Lobby.Client.ProjectList ob = new Lobby.Client.ProjectList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.IProjectListImpl getProjectObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.IProjectListImpl impl;
    
public int IndexOf(Lobby.Client.Project item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, Lobby.Client.Project item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public Lobby.Client.Project this[int index]
{
    get
    {
         
        return (Lobby.Client.Project)impl.get((int)index);
    }
    set
    {
        Lobby.Client.Project item =value;
        impl.setAt(index,item);
    }
}

public void Add(Lobby.Client.Project item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(Lobby.Client.Project item)
{
    return impl.contains(item);
}

public void CopyTo(Lobby.Client.Project[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (Lobby.Client.Project item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(Lobby.Client.Project item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<Lobby.Client.Project> GetEnumerator()
    {
        return new ProjectListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace Lobby.Client
{
  public partial class ProjectListEnumerator : IEnumerator<Lobby.Client.Project>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__Project> intern;
        public ProjectListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__Project> intern)
        {
            this.intern = intern;
        }
        public Lobby.Client.Project Current
        {
            get { APlay.Generated.Intern.Client.__Project item = (APlay.Generated.Intern.Client.__Project)intern.Current; return ((Lobby.Client.Project) ((item==null)?null:item.__GetExternProject()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace Lobby.Client
{
  public abstract partial class APlayClientSkeleton : Lobby.Client.IAPlayClientEvents, APlay.Generated.Intern.Client.IDesignedClient
  {
    public APlayClientSkeleton()
    {
      APlay.Generated.Intern.Client.DesignedClient client = new APlay.Generated.Intern.Client.DesignedClient(this);
      client.Factory = ((APlay.Generated.Intern.Client.IUserClassFactory) (new Lobby.Client.UserClassFactory()));
      impl = client;
    }
    public abstract void onConnect(Lobby.Client.Client clientObject);
    public void onInternConnect(APlay.Generated.Intern.Client.__IClientAPEvents clientObject)
    {
      if(ConnectEventHandler!=null)
      {
        ConnectEventHandler(((Lobby.Client.Client) (clientObject)));
      }
      else
      {
        if(Lobby.Client.APlayClientSkeleton.StaticConnectEventHandler!=null)
        {
          Lobby.Client.APlayClientSkeleton.StaticConnectEventHandler(((Lobby.Client.Client) (clientObject)), ((Lobby.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnect(((Lobby.Client.Client) (clientObject)));
        }
      }
    }
    public virtual void onConnectionSwitch(Lobby.Client.Client clientObject)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionSwitch received","Client.Designed");
    }
    public void onInternConnectionSwitch(APlay.Generated.Intern.Client.__IClientAPEvents clientObject)
    {
      if(ConnectionSwitchEventHandler!=null)
      {
        ConnectionSwitchEventHandler(((Lobby.Client.Client) (clientObject)));
      }
      else
      {
        if(Lobby.Client.APlayClientSkeleton.StaticConnectionSwitchEventHandler!=null)
        {
          Lobby.Client.APlayClientSkeleton.StaticConnectionSwitchEventHandler(((Lobby.Client.Client) (clientObject)), ((Lobby.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionSwitch(((Lobby.Client.Client) (clientObject)));
        }
      }
    }
    public abstract void onDisconnect();
    public void onInternDisconnect()
    {
      if(DisconnectEventHandler!=null)
      {
        DisconnectEventHandler();
      }
      else
      {
        if(Lobby.Client.APlayClientSkeleton.StaticDisconnectEventHandler!=null)
        {
          Lobby.Client.APlayClientSkeleton.StaticDisconnectEventHandler(((Lobby.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onDisconnect();
        }
      }
    }
    public abstract void onConnectionFailed();
    public void onInternConnectionFailed()
    {
      if(ConnectionFailedEventHandler!=null)
      {
        ConnectionFailedEventHandler();
      }
      else
      {
        if(Lobby.Client.APlayClientSkeleton.StaticConnectionFailedEventHandler!=null)
        {
          Lobby.Client.APlayClientSkeleton.StaticConnectionFailedEventHandler(((Lobby.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionFailed();
        }
      }
    }
    public virtual void onConnectionRejected(String reason)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionRejected received","Client.Designed");
    }
    public void onInternConnectionRejected(String reason)
    {
      if(ConnectionRejectedEventHandler!=null)
      {
        ConnectionRejectedEventHandler(reason);
      }
      else
      {
        if(Lobby.Client.APlayClientSkeleton.StaticConnectionRejectedEventHandler!=null)
        {
          Lobby.Client.APlayClientSkeleton.StaticConnectionRejectedEventHandler(reason, ((Lobby.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionRejected(reason);
        }
      }
    }
    public String GetVersionString()
    {
      String retu = impl.GetVersionString();
      return (((String) (retu)));
    }
    public void Start(String address)
    {
      impl.Start(address);
    }
    public void StartBalanced(String address)
    {
      impl.StartBalanced(address);
    }
    public void SwitchCloud(String address)
    {
      impl.SwitchCloud(address);
    }
    public void SwitchBalancedCloud(String address)
    {
      impl.SwitchBalancedCloud(address);
    }
    public void EnableEventQueue(bool enable)
    {
      impl.EnableEventQueue(enable);
    }
    public void Stop()
    {
      impl.Stop();
    }
    public bool FireEvent()
    {
      bool retu = impl.FireEvent();
      return (((bool) (retu)));
    }
    public DateTime GetSyncedTime()
    {
      DateTime retu = impl.GetSyncedTime();
      return (((DateTime) (retu)));
    }
    public void SetExternLogger(APlay.Common.Logging.IExternLogger logger)
    {
      impl.SetExternLogger(((APlay.Common.Logging.IExternLogger) (logger)));
    }
    public event Lobby.Client.Delegates.void_Client ConnectEventHandler;
    static public event Lobby.Client.Delegates.void_Client_APlayClientSkeleton StaticConnectEventHandler;
    public event Lobby.Client.Delegates.void_Client ConnectionSwitchEventHandler;
    static public event Lobby.Client.Delegates.void_Client_APlayClientSkeleton StaticConnectionSwitchEventHandler;
    public event Lobby.Client.Delegates.void_ DisconnectEventHandler;
    static public event Lobby.Client.Delegates.void_APlayClientSkeleton StaticDisconnectEventHandler;
    public event Lobby.Client.Delegates.void_ ConnectionFailedEventHandler;
    static public event Lobby.Client.Delegates.void_APlayClientSkeleton StaticConnectionFailedEventHandler;
    public event Lobby.Client.Delegates.void_String ConnectionRejectedEventHandler;
    static public event Lobby.Client.Delegates.void_String_APlayClientSkeleton StaticConnectionRejectedEventHandler;
    private APlay.Generated.Intern.Client.IDesignedClientImpl impl;
  }
  
}
namespace Lobby.Client
{
  public partial class APlayObjectFactory
  {
    public static void SetUserFactory(Lobby.Client.IUserObjectFactory factory)
    {
      Client_ = factory;
      Project_ = factory;
      User_ = factory;
    }
    public static void SetAPlayDefaultFactory()
    {
      Client_ = null;
      Project_ = null;
      User_ = null;
    }
    public static void SetClientUserFactory(Lobby.Client.IClientUserFactory factory)
    {
      Client_ = factory;
    }
    public static void SetClientAPlayDefaultFactory()
    {
      Client_ = null;
    }
    public static APlay.Generated.Intern.Client.__IClientAPImpl CreateClientImpl()
    {
      if(Client_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateClient());
      }
    }
    public static void SetProjectUserFactory(Lobby.Client.IProjectUserFactory factory)
    {
      Project_ = factory;
    }
    public static void SetProjectAPlayDefaultFactory()
    {
      Project_ = null;
    }
    public static APlay.Generated.Intern.Client.__IProjectAPImpl CreateProjectImpl()
    {
      if(Project_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateProject());
      }
    }
    public static void SetUserUserFactory(Lobby.Client.IUserUserFactory factory)
    {
      User_ = factory;
    }
    public static void SetUserAPlayDefaultFactory()
    {
      User_ = null;
    }
    public static APlay.Generated.Intern.Client.__IUserAPImpl CreateUserImpl()
    {
      if(User_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateUser());
      }
    }
    static private Lobby.Client.IClientUserFactory Client_;
    static private Lobby.Client.IProjectUserFactory Project_;
    static private Lobby.Client.IUserUserFactory User_;
  }
  
}
namespace Lobby.Client
{
  public partial class UserClassFactory : APlay.Generated.Intern.Client.IUserClassFactory
  {
    public APlay.Generated.Intern.Client.__IClientAPEvents CreateClientEvents(APlay.Generated.Intern.Client.__IClientAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IClientAPEvents retu__ = ((APlay.Generated.Intern.Client.__IClientAPEvents) (new Lobby.Client.Client()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IProjectAPEvents CreateProjectEvents(APlay.Generated.Intern.Client.__IProjectAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IProjectAPEvents retu__ = ((APlay.Generated.Intern.Client.__IProjectAPEvents) (new Lobby.Client.Project()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IUserAPEvents CreateUserEvents(APlay.Generated.Intern.Client.__IUserAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IUserAPEvents retu__ = ((APlay.Generated.Intern.Client.__IUserAPEvents) (new Lobby.Client.User()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.IProjectListEvents CreateProjectListEvents(APlay.Generated.Intern.Client.IProjectListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.IProjectListEvents) (Lobby.Client.ProjectList.CreateForAPlay(impl))));
    }
  }
  
}
namespace Lobby.Client
{
  public partial class APlayUserResolveEngine : APlay.Generated.Intern.Client.IAPlayResolve
  {
    public static void SetResolveEngine(Lobby.Client.IAPlayUserResolveEngine inter)
    {
      inter_ = inter;
      APlay.Generated.Intern.Client.APlayInternUserResolver.SetResolveEngine(new Lobby.Client.APlayUserResolveEngine());
    }
    static private Lobby.Client.IAPlayUserResolveEngine inter_;
  }
  
}
namespace Lobby.Client
{
  public partial class Delegates
  {
    public delegate void void_boolean(bool NewCanJoinProject__);
    public delegate void void_boolean_Client(bool NewCanJoinProject__, Lobby.Client.Client this_);
    public delegate void void_ProjectList(Lobby.Client.ProjectList Projects__);
    public delegate void void_ProjectList_Client(Lobby.Client.ProjectList Projects__, Lobby.Client.Client this_);
    public delegate void void_Project(Lobby.Client.Project element);
    public delegate void void_Project_Client(Lobby.Client.Project element, Lobby.Client.Client this_);
    public delegate void void_();
    public delegate void void_Client(Lobby.Client.Client this_);
    public delegate void void_int32_Project(int pos, Lobby.Client.Project element);
    public delegate void void_int32_Project_Client(int pos, Lobby.Client.Project element, Lobby.Client.Client this_);
    public delegate void void_Client_Client(Lobby.Client.Client NewDataClient__, Lobby.Client.Client this_);
    public delegate void void_Client_APlayClientSkeleton(Lobby.Client.Client clientObject, Lobby.Client.APlayClientSkeleton this_);
    public delegate void void_APlayClientSkeleton(Lobby.Client.APlayClientSkeleton this_);
    public delegate void void_String(String reason);
    public delegate void void_String_APlayClientSkeleton(String reason, Lobby.Client.APlayClientSkeleton this_);
  }
}
