/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Server;
namespace APlayTest.Server
{
  public interface  IAPlayFactory
  {
  };
}
namespace APlayTest.Server
{
  public interface  IAPlayUserResolveEngine
  {
  };
}
namespace APlayTest.Server
{
  public interface  IClientImpl
  {
    bool IsAdmin {get; }
    String RemoteAddress {get; }
    ulong APlayClientId {get; }
    APlayTest.Server.Project CurrentProject {get; set; }
    APlayTest.Server.ProjectManager ProjectManager {get; set; }
    APlayTest.Server.User CurrentUser {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithProjectManager (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void SyncedWithSheet (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void SyncedWithSheetManager (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void forceClientDisconnect (String reason);
  };
}
namespace APlayTest.Server
{
  public interface  IClientEvents
  {
    void onCurrentUserChange (APlayTest.Server.User NewCurrentUser__);
  };
}
namespace APlayTest.Server
{
  public interface  IClientSkeleton : APlayTest.Server.IClientImpl, APlay.Generated.Intern.Server.__IClientAPEvents, APlayTest.Server.IClientEvents
  {
  };
}
namespace APlayTest.Server
{
  public interface  IClientFactory
  {
    APlayTest.Server.Client CreateClient ();
  };
}
namespace APlayTest.Server
{
  public interface  IProjectImpl
  {
    int Id {get; set; }
    APlayTest.Server.ProjectDetail ProjectDetail {get; set; }
    APlayTest.Server.SheetManager SheetManager {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithProjectManager (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void SyncedWithSheet (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void SyncedWithSheetManager (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
  };
}
namespace APlayTest.Server
{
  public interface  IProjectEvents
  {
    void onIdChange (int NewId__);
    void onProjectDetailChange (APlayTest.Server.ProjectDetail NewProjectDetail__);
  };
}
namespace APlayTest.Server
{
  public interface  IProjectSkeleton : APlayTest.Server.IProjectImpl, APlay.Generated.Intern.Server.__IProjectAPEvents, APlayTest.Server.IProjectEvents
  {
  };
}
namespace APlayTest.Server
{
  public interface  IProjectFactory
  {
    APlayTest.Server.Project CreateProject ();
  };
}
namespace APlayTest.Server
{
  public interface  IProjectManagerImpl
  {
    bool CanJoinProject {get; set; }
    bool CanCreateProject {get; set; }
    APlayTest.Server.ProjectList Projects {get; set; }
    APlayTest.Server.Project SelectedProject {get; set; }
    APlayTest.Server.Client DataClient {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void JoinedProject (APlayTest.Server.Project project__);
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithProjectManager (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void SyncedWithSheet (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void SyncedWithSheetManager (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
  };
}
namespace APlayTest.Server
{
  public interface  IProjectManagerEvents
  {
    void onJoinProject (APlayTest.Server.Client sender__, int projectId__);
    void onCreateProject (APlayTest.Server.Client sender__, String name__);
    void onSearchProjects (String searchString__);
    void onSelectProject (int projectId__);
  };
}
namespace APlayTest.Server
{
  public interface  IProjectManagerSkeleton : APlayTest.Server.IProjectManagerImpl, APlay.Generated.Intern.Server.__IProjectManagerAPEvents, APlayTest.Server.IProjectManagerEvents
  {
  };
}
namespace APlayTest.Server
{
  public interface  IProjectManagerFactory
  {
    APlayTest.Server.ProjectManager CreateProjectManager ();
  };
}
namespace APlayTest.Server
{
  public interface  ISheetImpl
  {
    int Id {get; }
    String Name {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithProjectManager (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void SyncedWithSheet (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void SyncedWithSheetManager (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
  };
}
namespace APlayTest.Server
{
  public interface  ISheetEvents
  {
    void onIdChange (int NewId__);
    void onNameChange (String NewName__);
  };
}
namespace APlayTest.Server
{
  public interface  ISheetSkeleton : APlayTest.Server.ISheetImpl, APlay.Generated.Intern.Server.__ISheetAPEvents, APlayTest.Server.ISheetEvents
  {
  };
}
namespace APlayTest.Server
{
  public interface  ISheetFactory
  {
    APlayTest.Server.Sheet CreateSheet ();
  };
}
namespace APlayTest.Server
{
  public interface  ISheetManagerImpl
  {
    APlayTest.Server.SheetList Sheets {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithProjectManager (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void SyncedWithSheet (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void SyncedWithSheetManager (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
  };
}
namespace APlayTest.Server
{
  public interface  ISheetManagerEvents
  {
  };
}
namespace APlayTest.Server
{
  public interface  ISheetManagerSkeleton : APlayTest.Server.ISheetManagerImpl, APlay.Generated.Intern.Server.__ISheetManagerAPEvents, APlayTest.Server.ISheetManagerEvents
  {
  };
}
namespace APlayTest.Server
{
  public interface  ISheetManagerFactory
  {
    APlayTest.Server.SheetManager CreateSheetManager ();
  };
}
namespace APlayTest.Server
{
  public interface  IUserImpl
  {
    String Name {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool Release ();
    void addOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    bool isOwner (APlay.Generated.Intern.Server.__IClientAPEvents owner);
    void removeClientInterest (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void removeClientInterestRecursiveByObjectOwners (APlay.Generated.Intern.Server.__IUserAPEvents ob);
    void removeClientInterestRecursiveByClient (APlay.Generated.Intern.Server.__IClientAPEvents client);
    void SyncedWithClient (APlay.Generated.Intern.Server.__IClientAPEvents ob);
    void SyncedWithProject (APlay.Generated.Intern.Server.__IProjectAPEvents ob);
    void SyncedWithProjectManager (APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob);
    void SyncedWithSheet (APlay.Generated.Intern.Server.__ISheetAPEvents ob);
    void SyncedWithSheetManager (APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob);
    void SyncedWithUser (APlay.Generated.Intern.Server.__IUserAPEvents ob);
  };
}
namespace APlayTest.Server
{
  public interface  IUserEvents
  {
    void onNameChange (String NewName__);
  };
}
namespace APlayTest.Server
{
  public interface  IUserSkeleton : APlayTest.Server.IUserImpl, APlay.Generated.Intern.Server.__IUserAPEvents, APlayTest.Server.IUserEvents
  {
  };
}
namespace APlayTest.Server
{
  public interface  IUserFactory
  {
    APlayTest.Server.User CreateUser ();
  };
}
namespace APlayTest.Server
{
  public interface  IAPlayServerEvents
  {
    void onClientConnect (APlayTest.Server.Client client);
    void onClientDisconnect (APlayTest.Server.Client client);
    void onCloudReady ();
    void onCloudFailed (String reason);
    void onUserException (Exception ex);
  };
}
namespace APlayTest.Server
{
  public interface  IAPlayServerImpl
  {
    void InitPersistence (String hostName, int port, String userName, String password, String databaseName);
    void InitPersistenceOdbc (String connString);
    void InitAsSingle ();
    void InitAsMaster (String publicClientAddress, String serverToServerAddress, String masterServerListenAddress);
    void InitAsSlave (String publicClientAddress, String serverToServerAddress, String masterServerAddress);
    void StartForClients (String clientAddress);
    void StopForClients ();
    bool Stop ();
    void StartUnityCrossDomainServer (String listenAddress);
    void StartFlashCrossDomainServer (String listenAddress);
    APlay.Server.Statistics GetStatistic ();
    bool IsMaster ();
    DateTime GetSyncedTime ();
    void SetExternLogger (APlay.Common.Logging.IExternLogger logger);
    String GetVersionString ();
  };
}
namespace APlayTest.Server
{
  public interface  IAPlayServerSkeleton
  {
  };
}
namespace APlayTest.Server
{
  public interface  IUserObjectFactory : APlayTest.Server.IClientUserFactory, APlayTest.Server.IProjectUserFactory, APlayTest.Server.IProjectManagerUserFactory, APlayTest.Server.ISheetUserFactory, APlayTest.Server.ISheetManagerUserFactory, APlayTest.Server.IUserUserFactory
  {
  };
}
namespace APlayTest.Server
{
  public interface  IClientUserFactory
  {
    APlayTest.Server.IClientImpl CreateClient ();
  };
}
namespace APlayTest.Server
{
  public interface  IProjectUserFactory
  {
    APlayTest.Server.IProjectImpl CreateProject ();
  };
}
namespace APlayTest.Server
{
  public interface  IProjectManagerUserFactory
  {
    APlayTest.Server.IProjectManagerImpl CreateProjectManager ();
  };
}
namespace APlayTest.Server
{
  public interface  ISheetUserFactory
  {
    APlayTest.Server.ISheetImpl CreateSheet ();
  };
}
namespace APlayTest.Server
{
  public interface  ISheetManagerUserFactory
  {
    APlayTest.Server.ISheetManagerImpl CreateSheetManager ();
  };
}
namespace APlayTest.Server
{
  public interface  IUserUserFactory
  {
    APlayTest.Server.IUserImpl CreateUser ();
  };
}
namespace APlayTest.Server
{
  public partial class APlayFactory
  {
  }
  
}
namespace APlayTest.Server
{
  public abstract partial class APlayServerSkeleton : APlayTest.Server.IAPlayServerEvents, APlay.Generated.Intern.Server.IDesignedServer
  {
    public APlayServerSkeleton()
    {
      APlay.Generated.Intern.Server.DesignedServer server = new APlay.Generated.Intern.Server.DesignedServer(this);
      server.Factory = ((APlay.Generated.Intern.Server.IUserClassFactory) (new APlayTest.Server.UserClassFactory()));
      impl = server;
    }
    public bool onStaticCallField(ushort typeId, ushort fieldId, APlay.Common.Protocol.MessageReader reader_, byte roleId, ulong senderId)
    {
      APlay.Common.Logging.Logger.LogDesigned(1,"onStaticCallField","Server.Designed");
      switch(roleId)
      {
        case 0: // []
        {
        break;
        }
      }
      return (true);
    }
    public abstract void onClientConnect(APlayTest.Server.Client client);
    public void onInternClientConnect(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      if(ClientConnectEventHandler!=null)
      {
        ClientConnectEventHandler(((APlayTest.Server.Client) (client)));
      }
      else
      {
        if(APlayTest.Server.APlayServerSkeleton.StaticClientConnectEventHandler!=null)
        {
          APlayTest.Server.APlayServerSkeleton.StaticClientConnectEventHandler(((APlayTest.Server.Client) (client)), ((APlayTest.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onClientConnect(((APlayTest.Server.Client) (client)));
        }
      }
    }
    public abstract void onClientDisconnect(APlayTest.Server.Client client);
    public void onInternClientDisconnect(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      if(ClientDisconnectEventHandler!=null)
      {
        ClientDisconnectEventHandler(((APlayTest.Server.Client) (client)));
      }
      else
      {
        if(APlayTest.Server.APlayServerSkeleton.StaticClientDisconnectEventHandler!=null)
        {
          APlayTest.Server.APlayServerSkeleton.StaticClientDisconnectEventHandler(((APlayTest.Server.Client) (client)), ((APlayTest.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onClientDisconnect(((APlayTest.Server.Client) (client)));
        }
      }
    }
    public virtual void onCloudReady()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCloudReady received","Server.Designed");
    }
    public void onInternCloudReady()
    {
      if(CloudReadyEventHandler!=null)
      {
        CloudReadyEventHandler();
      }
      else
      {
        if(APlayTest.Server.APlayServerSkeleton.StaticCloudReadyEventHandler!=null)
        {
          APlayTest.Server.APlayServerSkeleton.StaticCloudReadyEventHandler(((APlayTest.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onCloudReady();
        }
      }
    }
    public virtual void onCloudFailed(String reason)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCloudFailed received","Server.Designed");
    }
    public void onInternCloudFailed(String reason)
    {
      if(CloudFailedEventHandler!=null)
      {
        CloudFailedEventHandler(reason);
      }
      else
      {
        if(APlayTest.Server.APlayServerSkeleton.StaticCloudFailedEventHandler!=null)
        {
          APlayTest.Server.APlayServerSkeleton.StaticCloudFailedEventHandler(reason, ((APlayTest.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onCloudFailed(reason);
        }
      }
    }
    public virtual void onUserException(Exception ex)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onUserException received","Server.Designed");
    }
    public void onInternUserException(Exception ex)
    {
      if(UserExceptionEventHandler!=null)
      {
        UserExceptionEventHandler(((Exception) (ex)));
      }
      else
      {
        if(APlayTest.Server.APlayServerSkeleton.StaticUserExceptionEventHandler!=null)
        {
          APlayTest.Server.APlayServerSkeleton.StaticUserExceptionEventHandler(((Exception) (ex)), ((APlayTest.Server.APlayServerSkeleton) (this)));
        }
        else
        {
          this.onUserException(((Exception) (ex)));
        }
      }
    }
    public void InitPersistence(String hostName, int port, String userName, String password, String databaseName)
    {
      impl.InitPersistence(hostName, port, userName, password, databaseName);
    }
    public void InitPersistenceOdbc(String connString)
    {
      impl.InitPersistenceOdbc(connString);
    }
    public void InitAsSingle()
    {
      impl.InitAsSingle();
    }
    public void InitAsMaster(String publicClientAddress, String serverToServerAddress, String masterServerListenAddress)
    {
      impl.InitAsMaster(publicClientAddress, serverToServerAddress, masterServerListenAddress);
    }
    public void InitAsSlave(String publicClientAddress, String serverToServerAddress, String masterServerAddress)
    {
      impl.InitAsSlave(publicClientAddress, serverToServerAddress, masterServerAddress);
    }
    public void StartForClients(String clientAddress)
    {
      impl.StartForClients(clientAddress);
    }
    public void StopForClients()
    {
      impl.StopForClients();
    }
    public bool Stop()
    {
      bool retu = impl.Stop();
      return (((bool) (retu)));
    }
    public void StartUnityCrossDomainServer(String listenAddress)
    {
      impl.StartUnityCrossDomainServer(listenAddress);
    }
    public void StartFlashCrossDomainServer(String listenAddress)
    {
      impl.StartFlashCrossDomainServer(listenAddress);
    }
    public APlay.Server.Statistics GetStatistic()
    {
      APlay.Server.Statistics retu = impl.GetStatistic();
      return (((APlay.Server.Statistics) (retu)));
    }
    public bool IsMaster()
    {
      bool retu = impl.IsMaster();
      return (((bool) (retu)));
    }
    public DateTime GetSyncedTime()
    {
      DateTime retu = impl.GetSyncedTime();
      return (((DateTime) (retu)));
    }
    public void SetExternLogger(APlay.Common.Logging.IExternLogger logger)
    {
      impl.SetExternLogger(((APlay.Common.Logging.IExternLogger) (logger)));
    }
    public String GetVersionString()
    {
      String retu = impl.GetVersionString();
      return (((String) (retu)));
    }
    public event APlayTest.Server.Delegates.void_Client ClientConnectEventHandler;
    static public event APlayTest.Server.Delegates.void_Client_APlayServerSkeleton StaticClientConnectEventHandler;
    public event APlayTest.Server.Delegates.void_Client ClientDisconnectEventHandler;
    static public event APlayTest.Server.Delegates.void_Client_APlayServerSkeleton StaticClientDisconnectEventHandler;
    public event APlayTest.Server.Delegates.void_ CloudReadyEventHandler;
    static public event APlayTest.Server.Delegates.void_APlayServerSkeleton StaticCloudReadyEventHandler;
    public event APlayTest.Server.Delegates.void_String CloudFailedEventHandler;
    static public event APlayTest.Server.Delegates.void_String_APlayServerSkeleton StaticCloudFailedEventHandler;
    public event APlayTest.Server.Delegates.void_Exception UserExceptionEventHandler;
    static public event APlayTest.Server.Delegates.void_Exception_APlayServerSkeleton StaticUserExceptionEventHandler;
    private APlay.Generated.Intern.Server.IDesignedServerImpl impl;
  }
  
}
namespace APlayTest.Server
{
  public abstract partial class ClientSkeleton : APlayTest.Server.IClientSkeleton, APlay.Generated.Intern.Server.__IClientAPEvents
  {
    public ClientSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setClientObject(((APlay.Generated.Intern.Server.__IClientAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setClientObject(APlayObjectFactory.CreateClientImpl());
      }
      ((APlay.Generated.Intern.Server.__Client) (this.getClientObject())).ClientHandler = ((APlay.Generated.Intern.Server.__IClientAPEvents) (((APlayTest.Server.ClientSkeleton) (this))));
    }
    public virtual bool IsAdmin
    {
      get
      {
        {
          return (implClient.IsAdmin);
        }
      }
    }
    public virtual String RemoteAddress
    {
      get
      {
        {
          return (implClient.RemoteAddress);
        }
      }
    }
    public virtual ulong APlayClientId
    {
      get
      {
        {
          return (implClient.APlayClientId);
        }
      }
    }
    public virtual APlayTest.Server.Project CurrentProject
    {
      set
      {
        {
          //Project
          implClient.CurrentProject = ((APlay.Generated.Intern.Server.__IProjectAPEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Server.Project) (implClient.CurrentProject)));
        }
      }
    }
    public virtual APlayTest.Server.ProjectManager ProjectManager
    {
      set
      {
        {
          //ProjectManager
          implClient.ProjectManager = ((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Server.ProjectManager) (implClient.ProjectManager)));
        }
      }
    }
    public virtual APlayTest.Server.User CurrentUser
    {
      get
      {
        {
          return (((APlayTest.Server.User) (implClient.CurrentUser)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implClient.APlayEntityId);
        }
      }
    }
    public virtual void onCurrentUserChange(APlayTest.Server.User NewCurrentUser__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCurrentUserChange received","Server.Designed");
    }
    public void onInternCurrentUserChange(APlay.Generated.Intern.Server.__IUserAPEvents NewCurrentUser__)
    {
      if(CurrentUserChangeEventHandler!=null)
      {
        CurrentUserChangeEventHandler(((APlayTest.Server.User) (NewCurrentUser__)));
      }
      else
      {
        if(APlayTest.Server.ClientSkeleton.StaticCurrentUserChangeEventHandler!=null)
        {
          APlayTest.Server.ClientSkeleton.StaticCurrentUserChangeEventHandler(((APlayTest.Server.User) (NewCurrentUser__)), ((APlayTest.Server.Client) (this)));
        }
        else
        {
          this.onCurrentUserChange(((APlayTest.Server.User) (NewCurrentUser__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implClient.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implClient.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implClient.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implClient.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implClient.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implClient.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implClient.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implClient.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implClient.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implClient.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithProjectManager(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implClient.SyncedWithProjectManager(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void SyncedWithSheet(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implClient.SyncedWithSheet(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void SyncedWithSheetManager(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implClient.SyncedWithSheetManager(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implClient.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void forceClientDisconnect(String reason)
    {
      implClient.forceClientDisconnect(reason);
    }
    public APlay.Generated.Intern.Server.__IClientAPImpl getClientObject()
    {
      return (implClient);
    }
    public void setClientObject(APlay.Generated.Intern.Server.__IClientAPImpl impl)
    {
      implClient = impl;
    }
    public event APlayTest.Server.Delegates.void_User CurrentUserChangeEventHandler;
    static public event APlayTest.Server.Delegates.void_User_Client StaticCurrentUserChangeEventHandler;
    private APlay.Generated.Intern.Server.__IClientAPImpl implClient;
  }
  
}
namespace APlayTest.Server
{
  public abstract partial class ProjectSkeleton : APlayTest.Server.IProjectSkeleton, APlay.Generated.Intern.Server.__IProjectAPEvents
  {
    public ProjectSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setProjectObject(((APlay.Generated.Intern.Server.__IProjectAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setProjectObject(APlayObjectFactory.CreateProjectImpl());
      }
      ((APlay.Generated.Intern.Server.__Project) (this.getProjectObject())).ProjectHandler = ((APlay.Generated.Intern.Server.__IProjectAPEvents) (((APlayTest.Server.ProjectSkeleton) (this))));
    }
    public virtual int Id
    {
      set
      {
        {
          //int32
          implProject.Id = value;
        }
      }
      get
      {
        {
          return (implProject.Id);
        }
      }
    }
    public virtual APlayTest.Server.ProjectDetail ProjectDetail
    {
      set
      {
        {
          //ProjectDetail
          implProject.ProjectDetail = new APlay.Generated.Intern.Server.__ProjectDetail(value.Name, value.CreatedBy, value.CreationDate);
        }
      }
      get
      {
        {
          return (new APlayTest.Server.ProjectDetail(((String) (implProject.ProjectDetail.Name)), ((String) (implProject.ProjectDetail.CreatedBy)), ((DateTime) (implProject.ProjectDetail.CreationDate))));
        }
      }
    }
    public virtual APlayTest.Server.SheetManager SheetManager
    {
      set
      {
        {
          //SheetManager
          implProject.SheetManager = ((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Server.SheetManager) (implProject.SheetManager)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implProject.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Server.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Server.ProjectSkeleton.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Server.ProjectSkeleton.StaticIdChangeEventHandler(NewId__, ((APlayTest.Server.Project) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public virtual void onProjectDetailChange(APlayTest.Server.ProjectDetail NewProjectDetail__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectDetailChange received","Server.Designed");
    }
    public void onInternProjectDetailChange(APlay.Generated.Intern.Server.__ProjectDetail NewProjectDetail__)
    {
      if(ProjectDetailChangeEventHandler!=null)
      {
        ProjectDetailChangeEventHandler(new APlayTest.Server.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))));
      }
      else
      {
        if(APlayTest.Server.ProjectSkeleton.StaticProjectDetailChangeEventHandler!=null)
        {
          APlayTest.Server.ProjectSkeleton.StaticProjectDetailChangeEventHandler(new APlayTest.Server.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))), ((APlayTest.Server.Project) (this)));
        }
        else
        {
          this.onProjectDetailChange(new APlayTest.Server.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implProject.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implProject.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implProject.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implProject.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implProject.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implProject.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implProject.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implProject.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implProject.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implProject.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithProjectManager(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implProject.SyncedWithProjectManager(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void SyncedWithSheet(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implProject.SyncedWithSheet(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void SyncedWithSheetManager(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implProject.SyncedWithSheetManager(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implProject.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__IProjectAPImpl getProjectObject()
    {
      return (implProject);
    }
    public void setProjectObject(APlay.Generated.Intern.Server.__IProjectAPImpl impl)
    {
      implProject = impl;
    }
    public event APlayTest.Server.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Server.Delegates.void_int32_Project StaticIdChangeEventHandler;
    public event APlayTest.Server.Delegates.void_ProjectDetail ProjectDetailChangeEventHandler;
    static public event APlayTest.Server.Delegates.void_ProjectDetail_Project StaticProjectDetailChangeEventHandler;
    private APlay.Generated.Intern.Server.__IProjectAPImpl implProject;
  }
  
}
namespace APlayTest.Server
{
  public abstract partial class ProjectManagerSkeleton : APlayTest.Server.IProjectManagerSkeleton, APlay.Generated.Intern.Server.__IProjectManagerAPEvents
  {
    public ProjectManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setProjectManagerObject(((APlay.Generated.Intern.Server.__IProjectManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setProjectManagerObject(APlayObjectFactory.CreateProjectManagerImpl());
      }
      ((APlay.Generated.Intern.Server.__ProjectManager) (this.getProjectManagerObject())).ProjectManagerHandler = ((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (((APlayTest.Server.ProjectManagerSkeleton) (this))));
    }
    public virtual bool CanJoinProject
    {
      set
      {
        {
          //boolean
          implProjectManager.CanJoinProject = value;
        }
      }
      get
      {
        {
          return (implProjectManager.CanJoinProject);
        }
      }
    }
    public virtual bool CanCreateProject
    {
      set
      {
        {
          //boolean
          implProjectManager.CanCreateProject = value;
        }
      }
      get
      {
        {
          return (implProjectManager.CanCreateProject);
        }
      }
    }
    public virtual APlayTest.Server.ProjectList Projects
    {
      set
      {
        {
          //Project
          implProjectManager.Projects = ((APlay.Generated.Intern.Server.IProjectListEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Server.ProjectList) (implProjectManager.Projects)));
        }
      }
    }
    public virtual APlayTest.Server.Project SelectedProject
    {
      set
      {
        {
          //Project
          implProjectManager.SelectedProject = ((APlay.Generated.Intern.Server.__IProjectAPEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Server.Project) (implProjectManager.SelectedProject)));
        }
      }
    }
    public virtual APlayTest.Server.Client DataClient
    {
      set
      {
        {
          //Client
          implProjectManager.DataClient = ((APlay.Generated.Intern.Server.__IClientAPEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Server.Client) (implProjectManager.DataClient)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implProjectManager.APlayEntityId);
        }
      }
    }
    public abstract void onJoinProject(APlayTest.Server.Client sender__, int projectId__);
    public void onInternJoinProject(APlay.Generated.Intern.Server.__IClientAPEvents sender__, int projectId__)
    {
      if(JoinProjectEventHandler!=null)
      {
        JoinProjectEventHandler(((APlayTest.Server.Client) (sender__)), projectId__);
      }
      else
      {
        if(APlayTest.Server.ProjectManagerSkeleton.StaticJoinProjectEventHandler!=null)
        {
          APlayTest.Server.ProjectManagerSkeleton.StaticJoinProjectEventHandler(((APlayTest.Server.Client) (sender__)), projectId__, ((APlayTest.Server.ProjectManager) (this)));
        }
        else
        {
          this.onJoinProject(((APlayTest.Server.Client) (sender__)), projectId__);
        }
      }
    }
    public abstract void onCreateProject(APlayTest.Server.Client sender__, String name__);
    public void onInternCreateProject(APlay.Generated.Intern.Server.__IClientAPEvents sender__, String name__)
    {
      if(CreateProjectEventHandler!=null)
      {
        CreateProjectEventHandler(((APlayTest.Server.Client) (sender__)), name__);
      }
      else
      {
        if(APlayTest.Server.ProjectManagerSkeleton.StaticCreateProjectEventHandler!=null)
        {
          APlayTest.Server.ProjectManagerSkeleton.StaticCreateProjectEventHandler(((APlayTest.Server.Client) (sender__)), name__, ((APlayTest.Server.ProjectManager) (this)));
        }
        else
        {
          this.onCreateProject(((APlayTest.Server.Client) (sender__)), name__);
        }
      }
    }
    public abstract void onSearchProjects(String searchString__);
    public void onInternSearchProjects(String searchString__)
    {
      if(SearchProjectsEventHandler!=null)
      {
        SearchProjectsEventHandler(searchString__);
      }
      else
      {
        if(APlayTest.Server.ProjectManagerSkeleton.StaticSearchProjectsEventHandler!=null)
        {
          APlayTest.Server.ProjectManagerSkeleton.StaticSearchProjectsEventHandler(searchString__, ((APlayTest.Server.ProjectManager) (this)));
        }
        else
        {
          this.onSearchProjects(searchString__);
        }
      }
    }
    public abstract void onSelectProject(int projectId__);
    public void onInternSelectProject(int projectId__)
    {
      if(SelectProjectEventHandler!=null)
      {
        SelectProjectEventHandler(projectId__);
      }
      else
      {
        if(APlayTest.Server.ProjectManagerSkeleton.StaticSelectProjectEventHandler!=null)
        {
          APlayTest.Server.ProjectManagerSkeleton.StaticSelectProjectEventHandler(projectId__, ((APlayTest.Server.ProjectManager) (this)));
        }
        else
        {
          this.onSelectProject(projectId__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implProjectManager.RequiresInit();
      return (((bool) (retu)));
    }
    public void JoinedProject(APlayTest.Server.Project project__)
    {
      implProjectManager.JoinedProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (project__)));
    }
    public bool Release()
    {
      bool retu = implProjectManager.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implProjectManager.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implProjectManager.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implProjectManager.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implProjectManager.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implProjectManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implProjectManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implProjectManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implProjectManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implProjectManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implProjectManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implProjectManager.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implProjectManager.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implProjectManager.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithProjectManager(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implProjectManager.SyncedWithProjectManager(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void SyncedWithSheet(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implProjectManager.SyncedWithSheet(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void SyncedWithSheetManager(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implProjectManager.SyncedWithSheetManager(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implProjectManager.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__IProjectManagerAPImpl getProjectManagerObject()
    {
      return (implProjectManager);
    }
    public void setProjectManagerObject(APlay.Generated.Intern.Server.__IProjectManagerAPImpl impl)
    {
      implProjectManager = impl;
    }
    public event APlayTest.Server.Delegates.void_Client_int32 JoinProjectEventHandler;
    static public event APlayTest.Server.Delegates.void_Client_int32_ProjectManager StaticJoinProjectEventHandler;
    public event APlayTest.Server.Delegates.void_Client_WString CreateProjectEventHandler;
    static public event APlayTest.Server.Delegates.void_Client_WString_ProjectManager StaticCreateProjectEventHandler;
    public event APlayTest.Server.Delegates.void_WString SearchProjectsEventHandler;
    static public event APlayTest.Server.Delegates.void_WString_ProjectManager StaticSearchProjectsEventHandler;
    public event APlayTest.Server.Delegates.void_int32 SelectProjectEventHandler;
    static public event APlayTest.Server.Delegates.void_int32_ProjectManager StaticSelectProjectEventHandler;
    private APlay.Generated.Intern.Server.__IProjectManagerAPImpl implProjectManager;
  }
  
}
namespace APlayTest.Server
{
  public abstract partial class SheetSkeleton : APlayTest.Server.ISheetSkeleton, APlay.Generated.Intern.Server.__ISheetAPEvents
  {
    public SheetSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setSheetObject(((APlay.Generated.Intern.Server.__ISheetAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setSheetObject(APlayObjectFactory.CreateSheetImpl());
      }
      ((APlay.Generated.Intern.Server.__Sheet) (this.getSheetObject())).SheetHandler = ((APlay.Generated.Intern.Server.__ISheetAPEvents) (((APlayTest.Server.SheetSkeleton) (this))));
    }
    public virtual int Id
    {
      get
      {
        {
          return (implSheet.Id);
        }
      }
    }
    public virtual String Name
    {
      get
      {
        {
          return (implSheet.Name);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implSheet.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Server.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Server.SheetSkeleton.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Server.SheetSkeleton.StaticIdChangeEventHandler(NewId__, ((APlayTest.Server.Sheet) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public virtual void onNameChange(String NewName__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onNameChange received","Server.Designed");
    }
    public void onInternNameChange(String NewName__)
    {
      if(NameChangeEventHandler!=null)
      {
        NameChangeEventHandler(NewName__);
      }
      else
      {
        if(APlayTest.Server.SheetSkeleton.StaticNameChangeEventHandler!=null)
        {
          APlayTest.Server.SheetSkeleton.StaticNameChangeEventHandler(NewName__, ((APlayTest.Server.Sheet) (this)));
        }
        else
        {
          this.onNameChange(NewName__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implSheet.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implSheet.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implSheet.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implSheet.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implSheet.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implSheet.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implSheet.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implSheet.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implSheet.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implSheet.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implSheet.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implSheet.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implSheet.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implSheet.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implSheet.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithProjectManager(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implSheet.SyncedWithProjectManager(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void SyncedWithSheet(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implSheet.SyncedWithSheet(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void SyncedWithSheetManager(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implSheet.SyncedWithSheetManager(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implSheet.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__ISheetAPImpl getSheetObject()
    {
      return (implSheet);
    }
    public void setSheetObject(APlay.Generated.Intern.Server.__ISheetAPImpl impl)
    {
      implSheet = impl;
    }
    public event APlayTest.Server.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Server.Delegates.void_int32_Sheet StaticIdChangeEventHandler;
    public event APlayTest.Server.Delegates.void_WString NameChangeEventHandler;
    static public event APlayTest.Server.Delegates.void_WString_Sheet StaticNameChangeEventHandler;
    private APlay.Generated.Intern.Server.__ISheetAPImpl implSheet;
  }
  
}
namespace APlayTest.Server
{
  public abstract partial class SheetManagerSkeleton : APlayTest.Server.ISheetManagerSkeleton, APlay.Generated.Intern.Server.__ISheetManagerAPEvents
  {
    public SheetManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setSheetManagerObject(((APlay.Generated.Intern.Server.__ISheetManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setSheetManagerObject(APlayObjectFactory.CreateSheetManagerImpl());
      }
      ((APlay.Generated.Intern.Server.__SheetManager) (this.getSheetManagerObject())).SheetManagerHandler = ((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (((APlayTest.Server.SheetManagerSkeleton) (this))));
    }
    public virtual APlayTest.Server.SheetList Sheets
    {
      set
      {
        {
          //Sheet
          implSheetManager.Sheets = ((APlay.Generated.Intern.Server.ISheetListEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Server.SheetList) (implSheetManager.Sheets)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implSheetManager.APlayEntityId);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implSheetManager.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implSheetManager.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implSheetManager.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implSheetManager.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implSheetManager.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implSheetManager.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implSheetManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implSheetManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implSheetManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implSheetManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implSheetManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implSheetManager.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implSheetManager.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implSheetManager.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implSheetManager.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithProjectManager(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implSheetManager.SyncedWithProjectManager(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void SyncedWithSheet(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implSheetManager.SyncedWithSheet(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void SyncedWithSheetManager(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implSheetManager.SyncedWithSheetManager(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implSheetManager.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__ISheetManagerAPImpl getSheetManagerObject()
    {
      return (implSheetManager);
    }
    public void setSheetManagerObject(APlay.Generated.Intern.Server.__ISheetManagerAPImpl impl)
    {
      implSheetManager = impl;
    }
    private APlay.Generated.Intern.Server.__ISheetManagerAPImpl implSheetManager;
  }
  
}
namespace APlayTest.Server
{
  public abstract partial class UserSkeleton : APlayTest.Server.IUserSkeleton, APlay.Generated.Intern.Server.__IUserAPEvents
  {
    public UserSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setUserObject(((APlay.Generated.Intern.Server.__IUserAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setUserObject(APlayObjectFactory.CreateUserImpl());
      }
      ((APlay.Generated.Intern.Server.__User) (this.getUserObject())).UserHandler = ((APlay.Generated.Intern.Server.__IUserAPEvents) (((APlayTest.Server.UserSkeleton) (this))));
    }
    public virtual String Name
    {
      get
      {
        {
          return (implUser.Name);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implUser.APlayEntityId);
        }
      }
    }
    public virtual void onNameChange(String NewName__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onNameChange received","Server.Designed");
    }
    public void onInternNameChange(String NewName__)
    {
      if(NameChangeEventHandler!=null)
      {
        NameChangeEventHandler(NewName__);
      }
      else
      {
        if(APlayTest.Server.UserSkeleton.StaticNameChangeEventHandler!=null)
        {
          APlayTest.Server.UserSkeleton.StaticNameChangeEventHandler(NewName__, ((APlayTest.Server.User) (this)));
        }
        else
        {
          this.onNameChange(NewName__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implUser.RequiresInit();
      return (((bool) (retu)));
    }
    public bool Release()
    {
      bool retu = implUser.Release();
      return (((bool) (retu)));
    }
    public void addOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implUser.addOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public void removeOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      implUser.removeOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
    }
    public bool isOwner(APlay.Generated.Intern.Server.__IClientAPEvents owner)
    {
      bool retu = implUser.isOwner(((APlay.Generated.Intern.Server.__IClientAPEvents) (owner)));
      return (((bool) (retu)));
    }
    public void removeClientInterest(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implUser.removeClientInterest(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByObjectOwners(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implUser.removeClientInterestRecursiveByObjectOwners(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public void removeClientInterestRecursiveByClient(APlay.Generated.Intern.Server.__IClientAPEvents client)
    {
      implUser.removeClientInterestRecursiveByClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (client)));
    }
    public void SyncedWithClient(APlay.Generated.Intern.Server.__IClientAPEvents ob)
    {
      implUser.SyncedWithClient(((APlay.Generated.Intern.Server.__IClientAPEvents) (ob)));
    }
    public void SyncedWithProject(APlay.Generated.Intern.Server.__IProjectAPEvents ob)
    {
      implUser.SyncedWithProject(((APlay.Generated.Intern.Server.__IProjectAPEvents) (ob)));
    }
    public void SyncedWithProjectManager(APlay.Generated.Intern.Server.__IProjectManagerAPEvents ob)
    {
      implUser.SyncedWithProjectManager(((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (ob)));
    }
    public void SyncedWithSheet(APlay.Generated.Intern.Server.__ISheetAPEvents ob)
    {
      implUser.SyncedWithSheet(((APlay.Generated.Intern.Server.__ISheetAPEvents) (ob)));
    }
    public void SyncedWithSheetManager(APlay.Generated.Intern.Server.__ISheetManagerAPEvents ob)
    {
      implUser.SyncedWithSheetManager(((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (ob)));
    }
    public void SyncedWithUser(APlay.Generated.Intern.Server.__IUserAPEvents ob)
    {
      implUser.SyncedWithUser(((APlay.Generated.Intern.Server.__IUserAPEvents) (ob)));
    }
    public APlay.Generated.Intern.Server.__IUserAPImpl getUserObject()
    {
      return (implUser);
    }
    public void setUserObject(APlay.Generated.Intern.Server.__IUserAPImpl impl)
    {
      implUser = impl;
    }
    public event APlayTest.Server.Delegates.void_WString NameChangeEventHandler;
    static public event APlayTest.Server.Delegates.void_WString_User StaticNameChangeEventHandler;
    private APlay.Generated.Intern.Server.__IUserAPImpl implUser;
  }
  
}
namespace APlayTest.Server
{
  public partial struct ProjectDetail
  {
    public ProjectDetail(String Name__, String CreatedBy__, DateTime CreationDate__)
    {
      Name = Name__;
      CreatedBy = CreatedBy__;
      CreationDate = CreationDate__;
    }
    public String Name;
    public String CreatedBy;
    public DateTime CreationDate;
    public static bool operator ==(ProjectDetail a, ProjectDetail b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Name==b.Name)&& (a.CreatedBy==b.CreatedBy)&& (a.CreationDate==b.CreationDate);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(ProjectDetail))
      {
        return false;
      }
      ProjectDetail a = this;
      ProjectDetail b = (ProjectDetail)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Name==b.Name)&&(a.CreatedBy==b.CreatedBy)&&(a.CreationDate==b.CreationDate);
    }
    public override int GetHashCode()
    {
      return Name.GetHashCode() + CreatedBy.GetHashCode() + CreationDate.GetHashCode();
    }
    public static bool operator !=(ProjectDetail a, ProjectDetail b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Name.ToString()+"]" + "["+CreatedBy.ToString()+"]" + "["+CreationDate.ToString()+"]";
    }
  }
}
namespace APlayTest.Server
{
  public partial class ProjectList : IList<APlayTest.Server.Project>, APlay.Generated.Intern.Server.IProjectListEvents
  {
    public ProjectList()
    {
      APlay.Generated.Intern.Server.IProjectListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.ProjectList();
      }
    }
    public ProjectList(APlay.Generated.Intern.Server.IProjectListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.ProjectList();
      }
    }
    public static APlayTest.Server.ProjectList CreateForAPlay(APlay.Generated.Intern.Server.IProjectListImpl impl)
    {
      APlayTest.Server.ProjectList ob = new APlayTest.Server.ProjectList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Server.IProjectListImpl getProjectObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Server.IProjectListImpl impl;
    
public int IndexOf(APlayTest.Server.Project item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Server.Project item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Server.Project this[int index]
{
    get
    {
         
        return (APlayTest.Server.Project)impl.get((int)index);
    }
    set
    {
        APlayTest.Server.Project item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Server.Project item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Server.Project item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Server.Project[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Server.Project item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Server.Project item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Server.Project> GetEnumerator()
    {
        return new ProjectListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Server
{
  public partial class ProjectListEnumerator : IEnumerator<APlayTest.Server.Project>
  {
    
        IEnumerator<APlay.Generated.Intern.Server.__Project> intern;
        public ProjectListEnumerator(IEnumerator<APlay.Generated.Intern.Server.__Project> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Server.Project Current
        {
            get { APlay.Generated.Intern.Server.__Project item = (APlay.Generated.Intern.Server.__Project)intern.Current; return ((APlayTest.Server.Project) ((item==null)?null:item.__GetExternProject()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Server
{
  public partial class SheetList : IList<APlayTest.Server.Sheet>, APlay.Generated.Intern.Server.ISheetListEvents
  {
    public SheetList()
    {
      APlay.Generated.Intern.Server.ISheetListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.SheetList();
      }
    }
    public SheetList(APlay.Generated.Intern.Server.ISheetListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Server.SheetList();
      }
    }
    public static APlayTest.Server.SheetList CreateForAPlay(APlay.Generated.Intern.Server.ISheetListImpl impl)
    {
      APlayTest.Server.SheetList ob = new APlayTest.Server.SheetList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Server.ISheetListImpl getSheetObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Server.ISheetListImpl impl;
    
public int IndexOf(APlayTest.Server.Sheet item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Server.Sheet item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Server.Sheet this[int index]
{
    get
    {
         
        return (APlayTest.Server.Sheet)impl.get((int)index);
    }
    set
    {
        APlayTest.Server.Sheet item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Server.Sheet item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Server.Sheet item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Server.Sheet[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Server.Sheet item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Server.Sheet item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Server.Sheet> GetEnumerator()
    {
        return new SheetListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Server
{
  public partial class SheetListEnumerator : IEnumerator<APlayTest.Server.Sheet>
  {
    
        IEnumerator<APlay.Generated.Intern.Server.__Sheet> intern;
        public SheetListEnumerator(IEnumerator<APlay.Generated.Intern.Server.__Sheet> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Server.Sheet Current
        {
            get { APlay.Generated.Intern.Server.__Sheet item = (APlay.Generated.Intern.Server.__Sheet)intern.Current; return ((APlayTest.Server.Sheet) ((item==null)?null:item.__GetExternSheet()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Server
{
  public partial class APlayObjectFactory
  {
    public static void SetUserFactory(APlayTest.Server.IUserObjectFactory factory)
    {
      Client_ = factory;
      Project_ = factory;
      ProjectManager_ = factory;
      Sheet_ = factory;
      SheetManager_ = factory;
      User_ = factory;
    }
    public static void SetAPlayDefaultFactory()
    {
      Client_ = null;
      Project_ = null;
      ProjectManager_ = null;
      Sheet_ = null;
      SheetManager_ = null;
      User_ = null;
    }
    public static void SetClientUserFactory(APlayTest.Server.IClientUserFactory factory)
    {
      Client_ = factory;
    }
    public static void SetClientAPlayDefaultFactory()
    {
      Client_ = null;
    }
    public static APlay.Generated.Intern.Server.__IClientAPImpl CreateClientImpl()
    {
      if(Client_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateClient());
      }
    }
    public static void SetProjectUserFactory(APlayTest.Server.IProjectUserFactory factory)
    {
      Project_ = factory;
    }
    public static void SetProjectAPlayDefaultFactory()
    {
      Project_ = null;
    }
    public static APlay.Generated.Intern.Server.__IProjectAPImpl CreateProjectImpl()
    {
      if(Project_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateProject());
      }
    }
    public static void SetProjectManagerUserFactory(APlayTest.Server.IProjectManagerUserFactory factory)
    {
      ProjectManager_ = factory;
    }
    public static void SetProjectManagerAPlayDefaultFactory()
    {
      ProjectManager_ = null;
    }
    public static APlay.Generated.Intern.Server.__IProjectManagerAPImpl CreateProjectManagerImpl()
    {
      if(ProjectManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateProjectManager());
      }
    }
    public static void SetSheetUserFactory(APlayTest.Server.ISheetUserFactory factory)
    {
      Sheet_ = factory;
    }
    public static void SetSheetAPlayDefaultFactory()
    {
      Sheet_ = null;
    }
    public static APlay.Generated.Intern.Server.__ISheetAPImpl CreateSheetImpl()
    {
      if(Sheet_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateSheet());
      }
    }
    public static void SetSheetManagerUserFactory(APlayTest.Server.ISheetManagerUserFactory factory)
    {
      SheetManager_ = factory;
    }
    public static void SetSheetManagerAPlayDefaultFactory()
    {
      SheetManager_ = null;
    }
    public static APlay.Generated.Intern.Server.__ISheetManagerAPImpl CreateSheetManagerImpl()
    {
      if(SheetManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateSheetManager());
      }
    }
    public static void SetUserUserFactory(APlayTest.Server.IUserUserFactory factory)
    {
      User_ = factory;
    }
    public static void SetUserAPlayDefaultFactory()
    {
      User_ = null;
    }
    public static APlay.Generated.Intern.Server.__IUserAPImpl CreateUserImpl()
    {
      if(User_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Server.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Server.APlayInternalFactory.CreateUser());
      }
    }
    static private APlayTest.Server.IClientUserFactory Client_;
    static private APlayTest.Server.IProjectUserFactory Project_;
    static private APlayTest.Server.IProjectManagerUserFactory ProjectManager_;
    static private APlayTest.Server.ISheetUserFactory Sheet_;
    static private APlayTest.Server.ISheetManagerUserFactory SheetManager_;
    static private APlayTest.Server.IUserUserFactory User_;
  }
  
}
namespace APlayTest.Server
{
  public partial class UserClassFactory : APlay.Generated.Intern.Server.IUserClassFactory
  {
    public APlay.Generated.Intern.Server.__IClientAPEvents CreateClientEvents(APlay.Generated.Intern.Server.__IClientAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IClientAPEvents retu__ = ((APlay.Generated.Intern.Server.__IClientAPEvents) (new APlayTest.Server.Client()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__IProjectAPEvents CreateProjectEvents(APlay.Generated.Intern.Server.__IProjectAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IProjectAPEvents retu__ = ((APlay.Generated.Intern.Server.__IProjectAPEvents) (new APlayTest.Server.Project()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__IProjectManagerAPEvents CreateProjectManagerEvents(APlay.Generated.Intern.Server.__IProjectManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IProjectManagerAPEvents retu__ = ((APlay.Generated.Intern.Server.__IProjectManagerAPEvents) (new APlayTest.Server.ProjectManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__ISheetAPEvents CreateSheetEvents(APlay.Generated.Intern.Server.__ISheetAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__ISheetAPEvents retu__ = ((APlay.Generated.Intern.Server.__ISheetAPEvents) (new APlayTest.Server.Sheet()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__ISheetManagerAPEvents CreateSheetManagerEvents(APlay.Generated.Intern.Server.__ISheetManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__ISheetManagerAPEvents retu__ = ((APlay.Generated.Intern.Server.__ISheetManagerAPEvents) (new APlayTest.Server.SheetManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.__IUserAPEvents CreateUserEvents(APlay.Generated.Intern.Server.__IUserAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Server.__IUserAPEvents retu__ = ((APlay.Generated.Intern.Server.__IUserAPEvents) (new APlayTest.Server.User()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Server.IProjectListEvents CreateProjectListEvents(APlay.Generated.Intern.Server.IProjectListImpl impl)
    {
      return (((APlay.Generated.Intern.Server.IProjectListEvents) (APlayTest.Server.ProjectList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Server.ISheetListEvents CreateSheetListEvents(APlay.Generated.Intern.Server.ISheetListImpl impl)
    {
      return (((APlay.Generated.Intern.Server.ISheetListEvents) (APlayTest.Server.SheetList.CreateForAPlay(impl))));
    }
  }
  
}
namespace APlayTest.Server
{
  public partial class APlayUserResolveEngine : APlay.Generated.Intern.Server.IAPlayResolve
  {
    public static void SetResolveEngine(APlayTest.Server.IAPlayUserResolveEngine inter)
    {
      inter_ = inter;
      APlay.Generated.Intern.Server.APlayInternUserResolver.SetResolveEngine(new APlayTest.Server.APlayUserResolveEngine());
    }
    static private APlayTest.Server.IAPlayUserResolveEngine inter_;
  }
  
}
namespace APlayTest.Server
{
  public partial class Delegates
  {
    public delegate void void_User(APlayTest.Server.User NewCurrentUser__);
    public delegate void void_User_Client(APlayTest.Server.User NewCurrentUser__, APlayTest.Server.Client this_);
    public delegate void void_int32(int NewId__);
    public delegate void void_int32_Project(int NewId__, APlayTest.Server.Project this_);
    public delegate void void_ProjectDetail(APlayTest.Server.ProjectDetail NewProjectDetail__);
    public delegate void void_ProjectDetail_Project(APlayTest.Server.ProjectDetail NewProjectDetail__, APlayTest.Server.Project this_);
    public delegate void void_Client_int32(APlayTest.Server.Client sender__, int projectId__);
    public delegate void void_Client_int32_ProjectManager(APlayTest.Server.Client sender__, int projectId__, APlayTest.Server.ProjectManager this_);
    public delegate void void_Client_WString(APlayTest.Server.Client sender__, String name__);
    public delegate void void_Client_WString_ProjectManager(APlayTest.Server.Client sender__, String name__, APlayTest.Server.ProjectManager this_);
    public delegate void void_WString(String searchString__);
    public delegate void void_WString_ProjectManager(String searchString__, APlayTest.Server.ProjectManager this_);
    public delegate void void_int32_ProjectManager(int projectId__, APlayTest.Server.ProjectManager this_);
    public delegate void void_int32_Sheet(int NewId__, APlayTest.Server.Sheet this_);
    public delegate void void_WString_Sheet(String NewName__, APlayTest.Server.Sheet this_);
    public delegate void void_WString_User(String NewName__, APlayTest.Server.User this_);
    public delegate void void_Client(APlayTest.Server.Client client);
    public delegate void void_Client_APlayServerSkeleton(APlayTest.Server.Client client, APlayTest.Server.APlayServerSkeleton this_);
    public delegate void void_();
    public delegate void void_APlayServerSkeleton(APlayTest.Server.APlayServerSkeleton this_);
    public delegate void void_String(String reason);
    public delegate void void_String_APlayServerSkeleton(String reason, APlayTest.Server.APlayServerSkeleton this_);
    public delegate void void_Exception(Exception ex);
    public delegate void void_Exception_APlayServerSkeleton(Exception ex, APlayTest.Server.APlayServerSkeleton this_);
  }
}
