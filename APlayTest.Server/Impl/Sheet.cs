/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.Linq;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlay.Generated.Intern.Server;
using APlayTest.Server;
using APlayTest.Server.Factories;
using APlayTest.Services.Infracstructure;
using DynamicData;
using sbardos.UndoFramework;
using ChangeReason = sbardos.UndoFramework.ChangeReason;

namespace APlayTest.Server
{
    public class Sheet : APlayTest.Server.SheetSkeleton
    {
        private readonly IUndoService _undoService;
        private readonly Factories.IBlockSymbolFactory _blockSymbolFactory;
        private readonly Factories.IConnectionFactory _connectionFactory;

        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>
        public Sheet()
        {

        }

        public Sheet(int id, IUndoService undoService, Factories.IBlockSymbolFactory blockSymbolFactory, Factories.IConnectionFactory connectionFactory)
        {
            Id = id;
            _undoService = undoService;
            _blockSymbolFactory = blockSymbolFactory;
            _connectionFactory = connectionFactory;

            _undoService.ActiveStateChanged += UndoServiceOnActiveStateChanged;

        }

        private void UndoServiceOnActiveStateChanged(object sender, ActiveStateChangedEventArgs e)
        {
            foreach (var change in e.ChangeSet.Where(c => c.OwnerId == Id))
            {

                APlay.Common.Logging.Logger.LogDesigned(2,
                      "ActiveStateChanged received and updated state. OwnerId: " + change.OwnerId,
                      "AplayTest.Server.Sheet");


                if (change.ChangeReason == ChangeReason.InsertAt)
                {
                    if (change.Undoable is BlockSymbolUndoable)
                    {
                        BlockSymbols.Insert(change.IndexAt,
                            _blockSymbolFactory.Create((BlockSymbolUndoable)change.Undoable, e.ChangeSet));
                    }
                    else if (change.Undoable is ConnectionUndoable)
                    {
                        Connections.Insert(change.IndexAt,
                           _connectionFactory.Create((ConnectionUndoable)change.Undoable, e.ChangeSet));
                    }

                }
                else if (change.ChangeReason == ChangeReason.RemoveAt)
                {
                    if (change.Undoable is BlockSymbolUndoable)
                    {
                        BlockSymbols.RemoveAt(change.IndexAt);
                        _blockSymbolFactory.Remove(change.Undoable.Id);
                    }
                    else if (change.Undoable is ConnectionUndoable)
                    {
                        Connections.RemoveAt(change.IndexAt);
                        _connectionFactory.Remove(change.Undoable.Id);
                    }

                }

                var storedObject = change.Undoable as SheetUndoable;

                if (storedObject != null)
                {
                    if (change.ChangeReason == ChangeReason.Update)
                    {
                        Name = storedObject.Name;
                    }
                }

                Dump();
            }
        }

        private void Dump()
        {
            var dump = "Sheet:" + Name + ", Conns. #: " + Connections.Count + ", BlockSymbol #: " + BlockSymbols.Count;

            foreach (var blockSymbol in BlockSymbols)
            {
                dump += "\n" + blockSymbol.Dump();
            }

            foreach (var connection in Connections)
            {
                dump += "\n" + connection.Dump();
            }

            Console.WriteLine(dump);
        }


        public override BlockSymbol onCreateBlockSymbol()
        {
            var blockSymbol = _blockSymbolFactory.Create(this);
            
            this.SyncedWithBlockSymbol(blockSymbol); //Todo: Ask the APlay guys. Without this, Postion in onAdd() is not set everytime.
            
            return blockSymbol;
        }

        public override void onAdd(BlockSymbol blockSymbol, Client client)
        {
            APlay.Common.Logging.Logger.LogDesigned(2, "OnAdd(blockSymbol) Pos: " + blockSymbol.PositionX + "/" + blockSymbol.PositionY, "AplayTest.Server.Sheet");
           
            var undoObject = new BlockSymbolUndoable(blockSymbol);
           
            _undoService.AddInsert(Id, undoObject, BlockSymbols.Count, "Adding new Block", client.Id);

            BlockSymbols.Add(blockSymbol);
        }

        public override void onRemove(BlockSymbol blockSymbol, Client client)
        {
            //this.SyncedWithBlockSymbol(blockSymbol);

            APlay.Common.Logging.Logger.LogDesigned(2, "Sheet.onRemove called", "AplayTest.Server.Sheet");

            var toBeDeleted = BlockSymbols.First(t => t.Id == blockSymbol.Id);
            var index = BlockSymbols.IndexOf(toBeDeleted);

            _undoService.StartTransaction(client.Id, "Removing Block [" + toBeDeleted.Id + "]");

            var undoableBlockSymbol = blockSymbol.CreateUndoable();
            blockSymbol.PrepareForRemove(client.Id);

            _undoService.AddRemove(Id, undoableBlockSymbol, index, "Removing Block [" + toBeDeleted.Id + "]", client.Id);

            BlockSymbols.RemoveAt(index);

            var connections = blockSymbol.onGetAttachedConnections().ToList();

            var connectionsindexList = new List<int>();
            foreach (var connection in connections)
            {
                index = Connections.IndexOf(connection);
                if (index >= 0)
                {
                    connectionsindexList.Add(index);
                }
            }

            connectionsindexList.Sort();

            for (int i = connectionsindexList.Count - 1; i >= 0; i--)
            {
                var connection = connections[connectionsindexList[i]];

                connection.PrepareForRemove(client.Id);

                var undoableConnection = connection.CreateUndoble();


                _undoService.AddRemove(Id, undoableConnection, connectionsindexList[i], "Removing connection [" + undoableConnection.Id + "]", client.Id);
                Connections.Remove(connection);
            }


            _undoService.EndTransaction(client.Id);
        }

        public override Connection onCreateConnection()
        {
            return _connectionFactory.Create(this);
        }

        public override void onAddConnection(Connection connection, Client client)
        {
            APlay.Common.Logging.Logger.LogDesigned(2, "Sheet.onAddConnection called", "AplayTest.Server.Sheet");
            connection.Sheet = this;

            _undoService.StartTransaction(client.Id, "Add connection [" + connection.Id + "]");

            var undoableConnection = new ConnectionUndoable(connection);
            _undoService.AddInsert(Id, undoableConnection, Connections.Count, "Adding connection [" + undoableConnection.Id + "]", client.Id);

            //Connections.Insert(Connections.Count,connection);
            Connections.Add(connection);

            _undoService.EndTransaction(client.Id);
        }

        public override void onRemoveConnection(Connection connection, Client client)
        {
            APlay.Common.Logging.Logger.LogDesigned(2, "Sheet.onRemoveConnection called", "AplayTest.Server.Sheet");

            _undoService.StartTransaction(client.Id, "Remove connection [" + connection.Id + "]");

            var from = connection.From;
            var fromUndoable = new ConnectorUndoable(from);

            var to = connection.To;
            var toUndoable = new ConnectorUndoable(to);

            from.Disconnect(connection);
            to.Disconnect(connection);

            _undoService.AddUpdate(fromUndoable, new ConnectorUndoable(from), "", client.Id);
            _undoService.AddUpdate(toUndoable, new ConnectorUndoable(to), "", client.Id);

            var undoableConnection = new ConnectionUndoable(connection);

            connection.PrepareForRemove(client.Id);

            var index = Connections.IndexOf(connection);
            _undoService.AddRemove(Id, undoableConnection, index, "Removing connection [" + undoableConnection.Id + "]", client.Id);

            Connections.RemoveAt(index);

            _undoService.EndTransaction(client.Id);
        }




        public override void onSetName(string name, Client client)
        {
            if (Name == name)
                return;

            var oldState = new SheetUndoable(this);

            Name = name;

            var newState = new SheetUndoable(this);

            _undoService.AddUpdate(oldState, newState, "Sheet name changed", client.Id);
        }

        public void Remove(Connection connection)
        {
            Connections.Remove(connection);
        }
    }

    public class SheetUndoable : IUndoable
    {
        public SheetUndoable(Sheet sheet)
        {
            Id = sheet.Id;
            Name = sheet.Name;

            BlockIds = sheet.BlockSymbols.Select(b => b.Id).ToList();
            ConnectionIds = sheet.Connections.Select(c => c.Id).ToList();
        }

        public IEnumerable<int> ConnectionIds { get; set; }

        public IEnumerable<int> BlockIds { get; private set; }

        public string Name { get; set; }

        public int Id { get; private set; }

        public string Dump()
        {
            return "Sheet: Name: " + Name;
        }
    }
}
