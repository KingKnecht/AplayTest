/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Server;
using sbardos.UndoFramework;

namespace APlayTest.Server
{
    public class Connection : APlayTest.Server.ConnectionSkeleton
    {
        private readonly IUndoService _undoService;
        private readonly Action<Connection> _onPrepareRemoveCallBack;
        private Connector _localFrom;

        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>

        public Connection()
        {

        }

        public Connection(int id, IUndoService undoService, Action<Connection> onPrepareRemoveCallBack, Sheet sheet)
        {
            Id = id;
            _undoService = undoService;
            _onPrepareRemoveCallBack = onPrepareRemoveCallBack;
            Sheet = sheet;
            _undoService.ActiveStateChanged += UndoServiceOnActiveStateChanged;
        }

        public Sheet Sheet { get; set; }

        private void UndoServiceOnActiveStateChanged(object sender, ActiveStateChangedEventArgs activeStateChangedEventArgs)
        {

        }


        public override void onSetFromPosition(AplayPoint position, Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetFromPosition called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }


        public override void onSetToPosition(AplayPoint position, Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetToPosition called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }
        public override void onSetFrom(Connector connector, Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetFrom called", "APlayTest.Server.Connection");

            connector.PositionChangeEventHandler -= FromConnectorOnPositionChangeEventHandler;
            connector.PositionChangeEventHandler += FromConnectorOnPositionChangeEventHandler;

        }

        private void FromConnectorOnPositionChangeEventHandler(AplayPoint newFromPosition)
        {
            APlay.Common.Logging.Logger.LogDesigned(2,
                              "Connection: FromPosition changed: " + newFromPosition,
                              "Undo.Server.Connection");
            FromPosition = newFromPosition;
        }

        public override void onSetTo(Connector connector, Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetTo called", "APlayTest.Server.Connection");
            connector.PositionChangeEventHandler -= ToConnectorOnPositionChangeEventHandler;
            connector.PositionChangeEventHandler += ToConnectorOnPositionChangeEventHandler;
        }

        private void ToConnectorOnPositionChangeEventHandler(AplayPoint newToPosition)
        {
            APlay.Common.Logging.Logger.LogDesigned(2,
                             "Connection: ToPosition changed: " + newToPosition,
                             "Undo.Server.Connection");

            ToPosition = newToPosition;
        }

        public override void onSetColor(uint color, Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetColor called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }

        public void PrepareForRemove(int clientId)
        {
            _undoService.ActiveStateChanged -= UndoServiceOnActiveStateChanged;
            _onPrepareRemoveCallBack(this);
        }

        public void Disconnect()
        {
            if (From != null)
            {
                From.Connections.Remove(this);
            }

            if (To != null)
            {
                To.Connections.Remove(this);
            }

            From = null;
            To = null;
        }

        public ConnectionUndoable CreateUndoble()
        {
            return new ConnectionUndoable(this);
        }

        public string Dump()
        {
            var dump = "Connection Id: " + Id;
            if (From != null)
            {
                dump += "\n\tFromId: " + From.Id;    
            }

            if (To != null)
            {
                dump += "\n\tToId: " + To.Id;
            }
            return dump;
        }
    }

    public class ConnectionUndoable : IUndoable
    {

        public ConnectionUndoable(Connection connection)
        {
            Id = connection.Id;
            if (connection.From != null)
            {
                 From = connection.From.CreateUndoable();
            }
            if (connection.To != null)
            {
                To = connection.To.CreateUndoable();
            }

            FromPosition = connection.FromPosition;
            ToPosition = connection.ToPosition;
            SheetId = connection.Sheet.Id;
        }

        public ConnectorUndoable To { get; set; }

        public ConnectorUndoable From { get; set; }

        public int SheetId { get; set; }

        public AplayPoint ToPosition { get; set; }

        public AplayPoint FromPosition { get; set; }

        //public int ToId { get; set; }

        //public int FromId { get; set; }

        public int Id { get; private set; }
        public string Dump()
        {
            var fromId = From != null ? From.Id : 0;
            var toId = To != null ? To.Id : 0;

            return "Connection: Id: " + Id + ", FromId: " + fromId + ", ToId: " + toId + ", FromPos: " + FromPosition + ", ToPos: " + ToPosition;
        }
    }
}
