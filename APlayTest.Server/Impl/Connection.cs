/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Server;
using sbardos.UndoFramework;

namespace APlayTest.Server
{
    public class Connection : APlayTest.Server.ConnectionSkeleton
    {
        private readonly IUndoService _undoService;

        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>

        public Connection()
        {

        }

        public Connection(int id, IUndoService undoService)
        {
            Id = id;
            _undoService = undoService;
        }

        public Connection(ConnectionUndoable redoObjectState, ChangeSet changeSet, IUndoService undoService)
        {
            _undoService = undoService;
            Id = redoObjectState.Id;
            FromPosition = redoObjectState.FromPosition;
            ToPosition = redoObjectState.ToPosition;


        }


        public override void onSetFromPosition(APlayTest.Server.AplayPoint position__, APlayTest.Server.Client client__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetFromPosition called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }


        public override void onSetToPosition(APlayTest.Server.AplayPoint position__, APlayTest.Server.Client client__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetToPosition called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }
        public override void onSetFrom(APlayTest.Server.Connector connector__, APlayTest.Server.Client client__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetFrom called", "APlayTest.Server.Connection");

            connector__.PositionChangeEventHandler -= FromConnectorOnPositionChangeEventHandler;
            connector__.PositionChangeEventHandler += FromConnectorOnPositionChangeEventHandler;

        }

        private void FromConnectorOnPositionChangeEventHandler(AplayPoint newFromPosition)
        {
            APlay.Common.Logging.Logger.LogDesigned(2,
                              "Connection: FromPosition changed: " + newFromPosition,
                              "Undo.Server.Connection");
            FromPosition = newFromPosition;
        }

        public override void onSetTo(APlayTest.Server.Connector connector__, APlayTest.Server.Client client__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetTo called", "APlayTest.Server.Connection");
            connector__.PositionChangeEventHandler -= ToConnectorOnPositionChangeEventHandler;
            connector__.PositionChangeEventHandler += ToConnectorOnPositionChangeEventHandler;
        }

        private void ToConnectorOnPositionChangeEventHandler(AplayPoint newToPosition)
        {
            APlay.Common.Logging.Logger.LogDesigned(2,
                             "Connection: ToPosition changed: " + newToPosition,
                             "Undo.Server.Connection");

            ToPosition = newToPosition;
        }

        public override void onSetColor(uint Color__, APlayTest.Server.Client client__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetColor called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }

        public ConnectionUndoable PrepareForRemove(int clientId)
        {
            var currentState = new ConnectionUndoable(this);

            _undoService.AddUpdate(currentState,currentState,"Prepared for delete.", clientId);

            return currentState;
        }

        public void Disconnect()
        {
            if (From != null)
            {
                From.Connections.Remove(this);
            }

            if (To != null)
            {
                To.Connections.Remove(this);
            }

            From = null;
            To = null;
        }
    }

    public class ConnectionUndoable : IUndoable
    {
      
        public ConnectionUndoable(Connection connection)
        {
            Id = connection.Id;
            FromId = connection.From.Id;
            ToId = connection.To.Id;
            FromPosition = connection.FromPosition;
            ToPosition = connection.ToPosition;
        }

        public AplayPoint ToPosition { get; set; }

        public AplayPoint FromPosition { get; set; }

        public int ToId { get; set; }

        public int FromId { get; set; }

        public int Id { get; private set; }
        public string Dump()
        {
            return "Connection: Id: " + Id + ", FromId: " + FromId +", ToId: " + ToId + ", FromPos: " + FromPosition + ", ToPos: " + ToPosition;
        }
    }
}
