/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Server;
using sbardos.UndoFramework;

namespace APlayTest.Server
{
    public class Connection : APlayTest.Server.ConnectionSkeleton
    {
        private readonly IUndoService _undoService;
        private readonly Action<Connection> _onPrepareRemoveCallBack;
     
        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>

        public Connection()
        {

        }

        public Connection(int id, IUndoService undoService, Action<Connection> onPrepareRemoveCallBack, Sheet sheet)
        {
            Id = id;
            _undoService = undoService;
            _onPrepareRemoveCallBack = onPrepareRemoveCallBack;
            Sheet = sheet;
            _undoService.ActiveStateChanged += UndoServiceOnActiveStateChanged;
        }

        public Sheet Sheet { get; set; }

        private void UndoServiceOnActiveStateChanged(object sender, ActiveStateChangedEventArgs e)
        {
            foreach (var change in e.ChangeSet.Where(c => c.OwnerId == Id))
            {
                switch (change.ChangeReason)
                {
                    case ChangeReason.InsertAt:
                        break;
                    case ChangeReason.Update:
                        var undoable = (ConnectionUndoable) change.Undoable;
                        FromPosition = undoable.FromPosition;
                        ToPosition = undoable.ToPosition;
                        
                        break;
                    case ChangeReason.RemoveAt:
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
        }


        public override void onSetFromPosition(AplayPoint position, Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetFromPosition called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }


        public override void onSetToPosition(AplayPoint position, Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetToPosition called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }

        public override void onSetFrom(Connector connector, Client client)
        {
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetFrom called", "APlayTest.Server.Connection");

            var undoable = new ConnectionUndoable(this);
            this.From = connector;
            _undoService.AddUpdate(undoable, new ConnectionUndoable(this), "Set From-Connector: " + connector.Id, client.Id);
        }

        public override void onSetTo(Connector connector, Client client)
        {
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetTo called", "APlayTest.Server.Connection");

            var undoable = new ConnectionUndoable(this);
            this.From = connector;
            _undoService.AddUpdate(undoable, new ConnectionUndoable(this), "Set To-Connector: " + connector.Id, client.Id);
        }

        public override void onSetColor(uint color, Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "Connection.onSetColor called", "APlayTest.Server.Connection");
            /// TODO: add your code here
        }

        public void PrepareForRemove(int clientId)
        {
            _undoService.ActiveStateChanged -= UndoServiceOnActiveStateChanged;
            _onPrepareRemoveCallBack(this);
        }


        public ConnectionUndoable CreateUndoble()
        {
            return new ConnectionUndoable(this);
        }

        public string Dump()
        {
            var dump = "Connection Id: " + Id;
            if (From != null)
            {
                dump += "\n\tFromId: " + From.Id;
            }

            if (To != null)
            {
                dump += "\n\tToId: " + To.Id;
            }
            return dump;
        }
    }

    public class ConnectionUndoable : IUndoable
    {
        public ConnectionUndoable(Connection connection)
        {
            Id = connection.Id;

            FromPosition = connection.FromPosition;
            ToPosition = connection.ToPosition;
            SheetId = connection.Sheet.Id;

            if (connection.From != null)
                FromId = connection.From.Id;

            if (connection.To != null)
                ToId = connection.To.Id;
        }


        public int SheetId { get; set; }

        public AplayPoint ToPosition { get; set; }

        public AplayPoint FromPosition { get; set; }

        public int ToId { get; set; }

        public int FromId { get; set; }

        public int Id { get; private set; }

        public string Dump()
        {
            return "Connection: Id: " + Id + ", FromPos: " + FromPosition + ", ToPos: " + ToPosition;
        }
    }
}
