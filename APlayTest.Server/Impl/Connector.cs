/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.Linq;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Server;
using sbardos.UndoFramework;

namespace APlayTest.Server
{
    public class Connector : APlayTest.Server.ConnectorSkeleton
    {
        public Sheet Sheet { get; set; }
        private readonly IUndoService _undoService;
        private readonly Action<Connector> _onPrepareRemoveCallBack;
        private readonly Action<int> _prepareRemoveCallback;

        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>

        public Connector()
        {
            /// TODO: add your code here
        }

        public Connector(int id, IUndoService undoService, Action<Connector> onPrepareRemoveCallBack, Sheet sheet)
        {
            Sheet = sheet;
            Id = id;
            _undoService = undoService;
            _onPrepareRemoveCallBack = onPrepareRemoveCallBack;

            _undoService.ActiveStateChanged += UndoServiceOnActiveStateChanged;
        }

        private void UndoServiceOnActiveStateChanged(object sender, ActiveStateChangedEventArgs e)
        {

        }


        public override void onPositionChange(AplayPoint position)
        {
            //APlay.Common.Logging.Logger.LogDesigned(2,
            //                   "Connector: Position changed: " + position,
            //                   "Undo.Server.Connector");

            UpdateConnectionPositions(position);
        }

        private void UpdateConnectionPositions(AplayPoint position)
        {
            foreach (var connection in Connections)
            {
                if (connection.From != null && connection.From.Id == this.Id)
                {
                    connection.FromPosition = position;
                }

                if (connection.To != null && connection.To.Id == this.Id)
                {
                    connection.ToPosition = position;
                }
            }
        }

        public void PrepareForRemove(int clientId)
        {
            _undoService.ActiveStateChanged -= UndoServiceOnActiveStateChanged;

            _onPrepareRemoveCallBack(this);
        }

        public ConnectorUndoable CreateUndoable()
        {
            return new ConnectorUndoable(this);
        }

        public string Dump()
        {
            var dump = "Connector: Id: " + Id;
            dump += "\n\tDirection: " + Direction;

            foreach (var connection in Connections)
            {
                dump += "\n\t" + connection.Dump();
            }

            return dump;
        }
    }

    public class ConnectorUndoable : IUndoable
    {
        public ConnectorUndoable(Connector connector)
        {
            Id = connector.Id;
            Position = connector.Position;
            Direction = connector.Direction;

            //Connections = connector.Connections.Select(c => c.CreateUndoble()).ToList();

            SheetId = connector.Sheet.Id;
        }

        public IEnumerable<ConnectionUndoable> Connections { get; set; }

      
        public ConnectorDirection Direction { get; set; }

        public AplayPoint Position { get; set; }

        public int Id { get; private set; }
        public int SheetId { get; set; }

        public string Dump()
        {
            var str = "Connector Id: " + Id + ", Pos: " + Position + ", Direction: " + Direction + ", Conn.Ids: ";
            str += string.Join(", ", Connections.Select(c => c.Id));
            return str;
        }
    }
}
