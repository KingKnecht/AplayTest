/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlay.Generated.Intern.Server;
using APlayTest.Server;
using APlayTest.Services;
using DynamicData;
using Reactive.Bindings.Extensions;

namespace APlayTest.Server
{
    public sealed class ProjectManager : APlayTest.Server.ProjectManagerSkeleton, IDisposable
    {
        private readonly IProjectDetailsService _projectDetailsService;
        private string _searchString = String.Empty;
        private CompositeDisposable _cleanUp = new CompositeDisposable();

        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>
        public ProjectManager()
        {
        }

        public ProjectManager(IProjectDetailsService projectDetailsService)
        {
            _projectDetailsService = projectDetailsService;

            //Subscribe for newly added, deleted projects from the service.
            var serviceUpdates = _projectDetailsService.ProjectDetailsDelta.Connect()
                 .Filter(pd => Filter(_searchString, pd))
                 .Transform(pd => new ProjectDetail(pd.Name, pd.CreatedBy, pd.CreationDate, pd.ProjectId))
                 .Subscribe(changeSet =>
                 {
                     foreach (var change in changeSet)
                     {
                         if (change.Reason == ChangeReason.Add)
                         {
                             ProjectDetails.Add(change.Current);
                         }
                         if (change.Reason == ChangeReason.Remove)
                         {
                             ProjectDetails.Remove(change.Current);
                         }
                     }

                     UpdateStates();
                 });

            _cleanUp.Add(serviceUpdates);

            UpdateStates();
        }


        public override void onJoinProject(int projectId__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "ProjectManager.onJoinProject called", "APlayTest.Server.ProjectManager");
            /// TODO: add your code here
        }
        public override void onCreateProject(String name__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "ProjectManager.onCreateProject called", "APlayTest.Server.ProjectManager");

            var newProjectDetail = _projectDetailsService.CreateProject(name__);

            var aplayProjectDetail = new ProjectDetail(newProjectDetail.Name, newProjectDetail.CreatedBy,
                                                        newProjectDetail.CreationDate, newProjectDetail.ProjectId);

            SelectedProject = aplayProjectDetail;

            UpdateStates();
        }

        private void PublishProjectDetailsList(IEnumerable<ProjectDetail> projectDetails)
        {
            var projectDetailses = projectDetails as IList<ProjectDetail> ?? projectDetails.ToList();

            //Update projects which now longer exist.
            var oldProjects = ProjectDetails.Except(projectDetailses);

            foreach (var projectDetail in oldProjects)
            {
                ProjectDetails.Remove(projectDetail);
            }

            //Add newly created projects.
            var newProjects = projectDetailses.Except(ProjectDetails);

            foreach (var projectDetail in newProjects)
            {
                ProjectDetails.Add(projectDetail);
            }
        }

        public override void onSearchProjects(string searchString__)
        {
            _searchString = searchString__;

            var convertedDetails = _projectDetailsService.GetProjectDetails(detail => Filter(_searchString, detail))
                                        .Select(d => new ProjectDetail(d.Name, d.CreatedBy, d.CreationDate, d.ProjectId))
                                        .ToList();

            PublishProjectDetailsList(convertedDetails);

            if (!convertedDetails.Any())
            {
                SelectedProject = new ProjectDetail();
            }

            if (_searchString == String.Empty && convertedDetails.Any())
            {
                SelectedProject = ProjectDetails.First();
            }

            UpdateStates();
        }

        private static bool Filter(string searchString, Services.ProjectDetail detail)
        {
            if (!string.IsNullOrEmpty(searchString))
            {
                return detail.Name.StartsWith(searchString, StringComparison.CurrentCultureIgnoreCase);
            }

            return true;
        }

        public override void onProjectDetailsListChanged()
        {
            throw new NotImplementedException();
        }

        private void UpdateStates()
        {

            if (SelectedProject.ProjectId != 0)
            {
                CanJoinProject = true;
                CanCreateProject = false;
                return;
            }

            if (_projectDetailsService.IsValidName(_searchString))
            {
                CanJoinProject = false;
                CanCreateProject = true;
                return;
            }
        }

        public override void onSelectedProjectChange(ProjectDetail NewSelectedProject__)
        {
            base.onSelectedProjectChange(NewSelectedProject__);

            SelectedProject = NewSelectedProject__;

            UpdateStates();
        }

        public void Dispose()
        {
            _cleanUp.Dispose();
        }
    }

}
