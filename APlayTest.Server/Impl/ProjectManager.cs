/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlay.Generated.Intern.Server;
using APlayTest.Server;
using APlayTest.Server.Factories;
using APlayTest.Services;
using DynamicData;
using Reactive.Bindings.Extensions;

namespace APlayTest.Server
{
    public sealed class ProjectManager : APlayTest.Server.ProjectManagerSkeleton, IDisposable
    {
        private readonly IProjectManagerService _projectManagerService;
        private readonly IAplayProjectsCache _aplayProjectsCache;
        private string _searchString = String.Empty;
        private CompositeDisposable _cleanUp = new CompositeDisposable();
        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>
        public ProjectManager()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="projectManagerService">Gets projects from some source i.e. DB</param>
        /// <param name="aplayProjectsCache">A cache of transformed projects. Contains Aplay-Projects. These projects must be the same over all ProjectManagers.</param>
        public ProjectManager(IProjectManagerService projectManagerService, IAplayProjectsCache aplayProjectsCache)
        {
            _projectManagerService = projectManagerService;
            _aplayProjectsCache = aplayProjectsCache;


            //Subscribe for newly added, deleted projects from the service.
            var serviceUpdates = _projectManagerService.ProjectsDelta.Connect()
                .Filter(project => Filter(_searchString, project))
                 .Transform(GetAplayProject)
                .Subscribe(changeSet =>
                {
                    foreach (var change in changeSet)
                    {
                        if (change.Reason == ChangeReason.Add)
                        {
                            Projects.Add(change.Current);
                        }
                        if (change.Reason == ChangeReason.Remove)
                        {
                            Projects.Remove(change.Current);
                        }
                    }

                    UpdateStates();
                });

            _cleanUp.Add(serviceUpdates);

            UpdateStates();
        }


        public override void onJoinProject(Client sender, int projectId__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "ProjectManager.onJoinProject called", "APlayTest.Server.ProjectManager");

            onSelectProject(projectId__);

            if (CanJoinProject)
            {
                if (sender.CurrentUser != null)
                {
                    Project joinedProject;
                    if (_aplayProjectsCache.TryGetProject(projectId__, out joinedProject))
                    {
                        sender.CurrentProject = joinedProject;

                        JoinedProject(joinedProject);

                        APlay.Common.Logging.Logger.LogDesigned(2,
                            "User: " + sender.CurrentUser.Name + " has joined project: " +
                            SelectedProject.ProjectDetail.Name + "[ClientId: " + sender.APlayClientId + "]",
                            "APlayTest.Server.ProjectManager");
                    }
                }
            }
        }
        public override void onCreateProject(Client dataClient, String name__)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "ProjectManager.onCreateProject called", "APlayTest.Server.ProjectManager");

            if (dataClient.CurrentUser != null)
            {
                Services.Project newProject = _projectManagerService.CreateProject(name__, dataClient.CurrentUser.Name);

                var newAplayProject = GetAplayProject(newProject);

                SelectedProject = newAplayProject;

                UpdateStates();
            }
        }

        private Project GetAplayProject(Services.Project srvProject)
        {
            Project loadedProject;
            if (_aplayProjectsCache.TryGetProject(srvProject.Id, out loadedProject))
            {
                return loadedProject;
            }

            var aplayProject = CreateAplayProject(srvProject);

            _aplayProjectsCache.AddProject(aplayProject);

            return aplayProject;
        }

        private void PublishProjectDetailsList(IEnumerable<Project> projects)
        {
            var projectsList = projects as IList<Project> ?? projects.ToList();

            //Update projects which now longer exist.
            var oldProjects = Projects.Except(projectsList);

            foreach (var projectDetail in oldProjects)
            {
                Projects.Remove(projectDetail);
            }

            //Add newly created projects.
            var newProjects = projectsList.Except(Projects);

            foreach (var projectDetail in newProjects)
            {
                Projects.Add(projectDetail);
            }
        }

        public override void onSearchProjects(string searchString__)
        {
            _searchString = searchString__;

            var foundAplayProjects = _projectManagerService.GetProjects(srvProject => Filter(_searchString, srvProject))
                                        .Select(srvProject => GetAplayProject(srvProject))
                                        .ToList();


            PublishProjectDetailsList(foundAplayProjects);

            SelectedProject = foundAplayProjects.FirstOrDefault();

            UpdateStates();
        }

        public override void onSelectProject(int projectId__)
        {
            if (SelectedProject != null && projectId__ == SelectedProject.Id)
            {
                return;
            }

            Project project;
            _aplayProjectsCache.TryGetProject(projectId__, out project);

            SelectedProject = project;

            UpdateStates();
        }



        private Project CreateAplayProject(Services.Project srvProject)
        {
            Project aplayProject = new Project()
            {
                Id = srvProject.Id,
                ProjectDetail = new ProjectDetail(srvProject.ProjectDetail.Name,
                    srvProject.ProjectDetail.CreatedBy, srvProject.ProjectDetail.CreationDate),
                SheetManager = new SheetManager()
            };

            aplayProject.SheetManager.Sheets.Add(new Sheet() { Name = "Sheet 1 " + DateTime.Now.ToLongTimeString() });
            aplayProject.SheetManager.Sheets.Add(new Sheet() { Name = "Sheet 2 " + DateTime.Now.ToLongTimeString() });
            aplayProject.SheetManager.Sheets.Add(new Sheet() { Name = "Sheet 3 " + DateTime.Now.ToLongTimeString() });

            return aplayProject;
        }

        private static bool Filter(string searchString, Services.Project project)
        {
            if (!string.IsNullOrEmpty(searchString))
            {
                return project.ProjectDetail.Name.StartsWith(searchString, StringComparison.CurrentCultureIgnoreCase);
            }

            return true;
        }


        private void UpdateStates()
        {

            if (SelectedProject != null)
            {
                CanJoinProject = true;
                CanCreateProject = false;
                return;
            }

            if (_projectManagerService.IsValidName(_searchString))
            {
                CanJoinProject = false;
                CanCreateProject = true;
                return;
            }
        }



        public void Dispose()
        {
            _cleanUp.Dispose();
        }
    }


}
