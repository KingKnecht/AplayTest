/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Server;
using APlayTest.Services;
using APlayTest.Services.Infracstructure;

namespace APlayTest.Server
{
    public class APlayServer : APlayTest.Server.APlayServerSkeleton
    {
        private readonly int _port;
        private readonly IProjectManagerFactory _projectManagerFactory;
        private readonly IClientIdLookup _clientIdLookup;

        /// <summary>
        /// You should initiate the server here.
        ///  
        /// Note: don't create aplay objects before onCloudReady has been called!
        /// </summary>

        public APlayServer(int port, IProjectManagerFactory projectManagerFactory, IClientIdLookup clientIdLookup)
        {
            _port = port;
            _projectManagerFactory = projectManagerFactory;
            _clientIdLookup = clientIdLookup;
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "APlayServer constructed", "APlayTest.Server.APlayServer");
            /// TODO: add your code here

            this.InitAsSingle();

        }
        /// <summary>
        /// a client connected
        /// </summary>

        /// <param name="client">
        /// the representation of this client
        /// </param>

        public override void onClientConnect(APlayTest.Server.Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "APlayServer.onClientConnect called", "APlayTest.Server.APlayServer");

            client.TryGetIdEventHandler += ClientOnTryGetIdEventHandler;

            client.Id = IdGenerator.GetNextId();

            _clientIdLookup.Lock(client.Id);

            var projectManager = _projectManagerFactory.CreateProjectManager();

            projectManager.DataClient = client;

            client.ProjectManager = projectManager;

        }

        private bool ClientOnTryGetIdEventHandler(int desiredId, APlayTest.Server.Client client)
        {
            if (client.Id == desiredId) return true;

            if (!_clientIdLookup.IsUsed(desiredId))
            {
                _clientIdLookup.Free(client.Id);

                APlay.Common.Logging.Logger.LogDesigned(2, "Client changed id: " + client.Id + " -> " + desiredId, "APlayTest.Server.APlayServer");

                client.Id = desiredId;
            }

            return true;
        }

        /// <summary>
        /// a client disconnected
        /// </summary>

        /// <param name="client">
        /// the representation of this client
        /// </param>

        public override void onClientDisconnect(APlayTest.Server.Client client)
        {
            // Autogenerated log message for call
            APlay.Common.Logging.Logger.LogDesigned(2, "APlayServer.onClientDisconnect called", "APlayTest.Server.APlayServer");

            _clientIdLookup.Free(client.Id);
        }

        public override void onCloudReady()
        {
            base.onCloudReady();

            StartForClients("0.0.0.0:" + _port);
        }
    }


}
