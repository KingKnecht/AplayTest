/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reactive.Disposables;
using System.Runtime.CompilerServices;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Client;
using APlayTest.Client.Annotations;
using DynamicData;
using Reactive.Bindings;

namespace APlayTest.Client
{
    public class ProjectManager : APlayTest.Client.ProjectManagerSkeleton, IDisposable
    {
        private readonly SourceCache<Project, int> _projectsRx;
        private readonly CompositeDisposable _cleanup;
        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>

        public ProjectManager()
        {
            //Todo: Read that shit and think about it.
            //Solange es keine Möglichkeit gibt die Änderungen der AplayList direkt 
            //per Extension-Methode in einen SourceCache umzuwandeln findet die Umwandlung hier statt und nicht im VM.
            _projectsRx = new SourceCache<Project, int>(pd => pd.Id);

            _projectsRx.Edit(e =>
            {
                e.AddOrUpdate(Projects);
            });

            _cleanup = new CompositeDisposable(_projectsRx);

            
        }
        
     
        public IObservableCache<Project, int> ProjectsRx
        {
            get { return _projectsRx.AsObservableCache(); }
        }


        #region List to SourceCache convertion.
        //TODO: Einen allgemeinen Konverter/ExtensionMethod für AplayList -> SourceCache schreiben.

        public override void onProjectsClear()
        {
            base.onProjectsClear();
            _projectsRx.Clear();
        }

        public override void onProjectsAdd(Project element)
        {
            base.onProjectsAdd(element);
            _projectsRx.AddOrUpdate(element);
        }

        public override void onProjectsRemove(Project element)
        {
            base.onProjectsRemove(element);
            _projectsRx.Remove(element);
        }

        public override void onProjectsRemoveAt(int pos, Project element)
        {
            base.onProjectsRemoveAt(pos, element);
            _projectsRx.Remove(element);
        }

        public override void onJoinedProject(Project project__)
        {
            
        }

        public override void onProjectsInsertAt(int pos, Project element)
        {
            base.onProjectsInsertAt(pos, element);
            _projectsRx.AddOrUpdate(element);
        }


        #endregion



        public void Dispose()
        {
            _cleanup.Dispose();
        }
    }

}
