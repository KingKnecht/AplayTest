/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Client;
using APlayTest.Client.Annotations;

namespace APlayTest.Client
{
    public class ProjectManager : APlayTest.Client.ProjectManagerSkeleton, INotifyPropertyChanged
    {
        /// <summary>
        /// Use this constructor to create instances in your code.
        /// Note: leave the APInitOb null. Aplay sets this object if initialized by aplay.
        ///  if you want to determine in the constructor if the object is user created or by aplay - check IsInitializedByAPlay
        /// </summary>

        public ProjectManager()
        {
            /// TODO: add your code here
        }

        public override void onCanJoinProjectChange(bool NewCanJoinProject__)
        {
            base.onCanJoinProjectChange(NewCanJoinProject__);
            OnPropertyChanged("CanJoinProject");
        }

        public override void onCanCreateProjectChange(bool NewCanCreateProject__)
        {
            base.onCanCreateProjectChange(NewCanCreateProject__);
            OnPropertyChanged("CanCreateProject");
        }

        public override void onProjectDetailsClear()
        {
            base.onProjectDetailsClear();
            OnPropertyChanged("ProjectDetails");
        }

        public override void onProjectDetailsAdd(ProjectDetail element)
        {
            base.onProjectDetailsAdd(element);
            OnPropertyChanged("ProjectDetails");
        }

        public override void onSelectedProjectChange(ProjectDetail NewSelectedProject__)
        {
            base.onSelectedProjectChange(NewSelectedProject__);
            OnPropertyChanged("SelectedProject");
        }

        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
