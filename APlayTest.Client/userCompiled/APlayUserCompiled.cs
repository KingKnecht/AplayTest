/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Client;
namespace APlayTest.Client
{
  public interface  IAPlayFactory
  {
  };
}
namespace APlayTest.Client
{
  public interface  IAPlayUserResolveEngine
  {
  };
}
namespace APlayTest.Client
{
  public interface  IClientImpl
  {
    bool IsAdmin {get; }
    String RemoteAddress {get; }
    ulong APlayClientId {get; }
    APlayTest.Client.Project CurrentProject {get; }
    APlayTest.Client.ProjectManager ProjectManager {get; }
    APlayTest.Client.User CurrentUser {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace APlayTest.Client
{
  public interface  IClientEvents
  {
    void onCurrentProjectChange (APlayTest.Client.Project NewCurrentProject__);
    void onProjectManagerChange (APlayTest.Client.ProjectManager NewProjectManager__);
    void onCurrentUserChange (APlayTest.Client.User NewCurrentUser__);
    APlayTest.Client.User onGetCurrentUser ();
  };
}
namespace APlayTest.Client
{
  public interface  IClientSkeleton : APlayTest.Client.IClientImpl, APlay.Generated.Intern.Client.__IClientAPEvents, APlayTest.Client.IClientEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IClientFactory
  {
    APlayTest.Client.Client CreateClient ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectImpl
  {
    int Id {get; }
    APlayTest.Client.ProjectDetail ProjectDetail {get; }
    APlayTest.Client.SheetManager SheetManager {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectEvents
  {
    void onIdChange (int NewId__);
    void onProjectDetailChange (APlayTest.Client.ProjectDetail NewProjectDetail__);
    void onSheetManagerChange (APlayTest.Client.SheetManager NewSheetManager__);
  };
}
namespace APlayTest.Client
{
  public interface  IProjectSkeleton : APlayTest.Client.IProjectImpl, APlay.Generated.Intern.Client.__IProjectAPEvents, APlayTest.Client.IProjectEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IProjectFactory
  {
    APlayTest.Client.Project CreateProject ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerImpl
  {
    bool CanJoinProject {get; }
    bool CanCreateProject {get; }
    APlayTest.Client.ProjectList Projects {get; }
    APlayTest.Client.Project SelectedProject {get; }
    APlayTest.Client.Client DataClient {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void JoinProject (APlayTest.Client.Client sender__, int projectId__);
    void CreateProject (APlayTest.Client.Client sender__, String name__);
    void SearchProjects (String searchString__);
    void SelectProject (int projectId__);
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerEvents
  {
    void onCanJoinProjectChange (bool NewCanJoinProject__);
    void onCanCreateProjectChange (bool NewCanCreateProject__);
    void onProjectsReplace (APlayTest.Client.ProjectList Projects__);
    void onProjectsAdd (APlayTest.Client.Project element);
    void onProjectsRemove (APlayTest.Client.Project element);
    void onProjectsClear ();
    void onProjectsInsertAt (int pos, APlayTest.Client.Project element);
    void onProjectsSetAt (int pos, APlayTest.Client.Project element);
    void onProjectsRemoveAt (int pos, APlayTest.Client.Project element);
    void onSelectedProjectChange (APlayTest.Client.Project NewSelectedProject__);
    void onDataClientChange (APlayTest.Client.Client NewDataClient__);
    void onJoinedProject (APlayTest.Client.Project project__);
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerSkeleton : APlayTest.Client.IProjectManagerImpl, APlay.Generated.Intern.Client.__IProjectManagerAPEvents, APlayTest.Client.IProjectManagerEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerFactory
  {
    APlayTest.Client.ProjectManager CreateProjectManager ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetImpl
  {
    int Id {get; set; }
    String Name {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  ISheetSkeleton : APlayTest.Client.ISheetImpl, APlay.Generated.Intern.Client.__ISheetAPEvents, APlayTest.Client.ISheetEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  ISheetFactory
  {
    APlayTest.Client.Sheet CreateSheet ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerImpl
  {
    APlayTest.Client.SheetList Sheets {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerEvents
  {
    void onSheetsReplace (APlayTest.Client.SheetList Sheets__);
    void onSheetsAdd (APlayTest.Client.Sheet element);
    void onSheetsRemove (APlayTest.Client.Sheet element);
    void onSheetsClear ();
    void onSheetsInsertAt (int pos, APlayTest.Client.Sheet element);
    void onSheetsSetAt (int pos, APlayTest.Client.Sheet element);
    void onSheetsRemoveAt (int pos, APlayTest.Client.Sheet element);
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerSkeleton : APlayTest.Client.ISheetManagerImpl, APlay.Generated.Intern.Client.__ISheetManagerAPEvents, APlayTest.Client.ISheetManagerEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerFactory
  {
    APlayTest.Client.SheetManager CreateSheetManager ();
  };
}
namespace APlayTest.Client
{
  public interface  IUserImpl
  {
    String Name {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace APlayTest.Client
{
  public interface  IUserEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IUserSkeleton : APlayTest.Client.IUserImpl, APlay.Generated.Intern.Client.__IUserAPEvents, APlayTest.Client.IUserEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IUserFactory
  {
    APlayTest.Client.User CreateUser ();
  };
}
namespace APlayTest.Client
{
  public interface  IAPlayClientEvents
  {
    void onConnect (APlayTest.Client.Client clientObject);
    void onConnectionSwitch (APlayTest.Client.Client clientObject);
    void onDisconnect ();
    void onConnectionFailed ();
    void onConnectionRejected (String reason);
  };
}
namespace APlayTest.Client
{
  public interface  IAPlayClientImpl
  {
    String GetVersionString ();
    void Start (String address);
    void StartBalanced (String address);
    void SwitchCloud (String address);
    void SwitchBalancedCloud (String address);
    void EnableEventQueue (bool enable);
    void Stop ();
    bool FireEvent ();
    DateTime GetSyncedTime ();
    void SetExternLogger (APlay.Common.Logging.IExternLogger logger);
  };
}
namespace APlayTest.Client
{
  public interface  IUserObjectFactory : APlayTest.Client.IClientUserFactory, APlayTest.Client.IProjectUserFactory, APlayTest.Client.IProjectManagerUserFactory, APlayTest.Client.ISheetUserFactory, APlayTest.Client.ISheetManagerUserFactory, APlayTest.Client.IUserUserFactory
  {
  };
}
namespace APlayTest.Client
{
  public interface  IClientUserFactory
  {
    APlayTest.Client.IClientImpl CreateClient ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectUserFactory
  {
    APlayTest.Client.IProjectImpl CreateProject ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerUserFactory
  {
    APlayTest.Client.IProjectManagerImpl CreateProjectManager ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetUserFactory
  {
    APlayTest.Client.ISheetImpl CreateSheet ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerUserFactory
  {
    APlayTest.Client.ISheetManagerImpl CreateSheetManager ();
  };
}
namespace APlayTest.Client
{
  public interface  IUserUserFactory
  {
    APlayTest.Client.IUserImpl CreateUser ();
  };
}
namespace APlayTest.Client
{
  public partial class APlayFactory
  {
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class ClientSkeleton : APlayTest.Client.IClientSkeleton, APlay.Generated.Intern.Client.__IClientAPEvents
  {
    public ClientSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setClientObject(((APlay.Generated.Intern.Client.__IClientAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setClientObject(APlayObjectFactory.CreateClientImpl());
      }
      ((APlay.Generated.Intern.Client.__Client) (this.getClientObject())).ClientHandler = ((APlay.Generated.Intern.Client.__IClientAPEvents) (((APlayTest.Client.ClientSkeleton) (this))));
    }
    public virtual bool IsAdmin
    {
      get
      {
        {
          return (implClient.IsAdmin);
        }
      }
    }
    public virtual String RemoteAddress
    {
      get
      {
        {
          return (implClient.RemoteAddress);
        }
      }
    }
    public virtual ulong APlayClientId
    {
      get
      {
        {
          return (implClient.APlayClientId);
        }
      }
    }
    public virtual APlayTest.Client.Project CurrentProject
    {
      get
      {
        {
          return (((APlayTest.Client.Project) (implClient.CurrentProject)));
        }
      }
    }
    public virtual APlayTest.Client.ProjectManager ProjectManager
    {
      get
      {
        {
          return (((APlayTest.Client.ProjectManager) (implClient.ProjectManager)));
        }
      }
    }
    public virtual APlayTest.Client.User CurrentUser
    {
      get
      {
        {
          return (((APlayTest.Client.User) (implClient.CurrentUser)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implClient.APlayEntityId);
        }
      }
    }
    public virtual void onCurrentProjectChange(APlayTest.Client.Project NewCurrentProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCurrentProjectChange received","Client.Designed");
    }
    public void onInternCurrentProjectChange(APlay.Generated.Intern.Client.__IProjectAPEvents NewCurrentProject__)
    {
      if(CurrentProjectChangeEventHandler!=null)
      {
        CurrentProjectChangeEventHandler(((APlayTest.Client.Project) (NewCurrentProject__)));
      }
      else
      {
        if(APlayTest.Client.ClientSkeleton.StaticCurrentProjectChangeEventHandler!=null)
        {
          APlayTest.Client.ClientSkeleton.StaticCurrentProjectChangeEventHandler(((APlayTest.Client.Project) (NewCurrentProject__)), ((APlayTest.Client.Client) (this)));
        }
        else
        {
          this.onCurrentProjectChange(((APlayTest.Client.Project) (NewCurrentProject__)));
        }
      }
    }
    public virtual void onProjectManagerChange(APlayTest.Client.ProjectManager NewProjectManager__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectManagerChange received","Client.Designed");
    }
    public void onInternProjectManagerChange(APlay.Generated.Intern.Client.__IProjectManagerAPEvents NewProjectManager__)
    {
      if(ProjectManagerChangeEventHandler!=null)
      {
        ProjectManagerChangeEventHandler(((APlayTest.Client.ProjectManager) (NewProjectManager__)));
      }
      else
      {
        if(APlayTest.Client.ClientSkeleton.StaticProjectManagerChangeEventHandler!=null)
        {
          APlayTest.Client.ClientSkeleton.StaticProjectManagerChangeEventHandler(((APlayTest.Client.ProjectManager) (NewProjectManager__)), ((APlayTest.Client.Client) (this)));
        }
        else
        {
          this.onProjectManagerChange(((APlayTest.Client.ProjectManager) (NewProjectManager__)));
        }
      }
    }
    public virtual void onCurrentUserChange(APlayTest.Client.User NewCurrentUser__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCurrentUserChange received","Client.Designed");
    }
    public void onInternCurrentUserChange(APlay.Generated.Intern.Client.__IUserAPEvents NewCurrentUser__)
    {
      if(CurrentUserChangeEventHandler!=null)
      {
        CurrentUserChangeEventHandler(((APlayTest.Client.User) (NewCurrentUser__)));
      }
      else
      {
        if(APlayTest.Client.ClientSkeleton.StaticCurrentUserChangeEventHandler!=null)
        {
          APlayTest.Client.ClientSkeleton.StaticCurrentUserChangeEventHandler(((APlayTest.Client.User) (NewCurrentUser__)), ((APlayTest.Client.Client) (this)));
        }
        else
        {
          this.onCurrentUserChange(((APlayTest.Client.User) (NewCurrentUser__)));
        }
      }
    }
    public abstract APlayTest.Client.User onGetCurrentUser();
    public APlay.Generated.Intern.Client.__IUserAPEvents onInternGetCurrentUser()
    {
      if(GetCurrentUserEventHandler!=null)
      {
        APlayTest.Client.User retu = GetCurrentUserEventHandler();
        return (((APlay.Generated.Intern.Client.__IUserAPEvents) (retu)));
      }
      else
      {
        if(APlayTest.Client.ClientSkeleton.StaticGetCurrentUserEventHandler!=null)
        {
          APlayTest.Client.User retu = APlayTest.Client.ClientSkeleton.StaticGetCurrentUserEventHandler(((APlayTest.Client.Client) (this)));
          return (((APlay.Generated.Intern.Client.__IUserAPEvents) (retu)));
        }
        else
        {
          APlayTest.Client.User retu = this.onGetCurrentUser();
          return (((APlay.Generated.Intern.Client.__IUserAPEvents) (retu)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implClient.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__IClientAPImpl getClientObject()
    {
      return (implClient);
    }
    public void setClientObject(APlay.Generated.Intern.Client.__IClientAPImpl impl)
    {
      implClient = impl;
    }
    public event APlayTest.Client.Delegates.void_Project CurrentProjectChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_Client StaticCurrentProjectChangeEventHandler;
    public event APlayTest.Client.Delegates.void_ProjectManager ProjectManagerChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_ProjectManager_Client StaticProjectManagerChangeEventHandler;
    public event APlayTest.Client.Delegates.void_User CurrentUserChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_User_Client StaticCurrentUserChangeEventHandler;
    public event APlayTest.Client.Delegates.User_ GetCurrentUserEventHandler;
    static public event APlayTest.Client.Delegates.User_Client StaticGetCurrentUserEventHandler;
    private APlay.Generated.Intern.Client.__IClientAPImpl implClient;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class ProjectSkeleton : APlayTest.Client.IProjectSkeleton, APlay.Generated.Intern.Client.__IProjectAPEvents
  {
    public ProjectSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setProjectObject(((APlay.Generated.Intern.Client.__IProjectAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setProjectObject(APlayObjectFactory.CreateProjectImpl());
      }
      ((APlay.Generated.Intern.Client.__Project) (this.getProjectObject())).ProjectHandler = ((APlay.Generated.Intern.Client.__IProjectAPEvents) (((APlayTest.Client.ProjectSkeleton) (this))));
    }
    public virtual int Id
    {
      get
      {
        {
          return (implProject.Id);
        }
      }
    }
    public virtual APlayTest.Client.ProjectDetail ProjectDetail
    {
      get
      {
        {
          return (new APlayTest.Client.ProjectDetail(((String) (implProject.ProjectDetail.Name)), ((String) (implProject.ProjectDetail.CreatedBy)), ((DateTime) (implProject.ProjectDetail.CreationDate))));
        }
      }
    }
    public virtual APlayTest.Client.SheetManager SheetManager
    {
      get
      {
        {
          return (((APlayTest.Client.SheetManager) (implProject.SheetManager)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implProject.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Client.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Client.ProjectSkeleton.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectSkeleton.StaticIdChangeEventHandler(NewId__, ((APlayTest.Client.Project) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public virtual void onProjectDetailChange(APlayTest.Client.ProjectDetail NewProjectDetail__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectDetailChange received","Client.Designed");
    }
    public void onInternProjectDetailChange(APlay.Generated.Intern.Client.__ProjectDetail NewProjectDetail__)
    {
      if(ProjectDetailChangeEventHandler!=null)
      {
        ProjectDetailChangeEventHandler(new APlayTest.Client.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))));
      }
      else
      {
        if(APlayTest.Client.ProjectSkeleton.StaticProjectDetailChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectSkeleton.StaticProjectDetailChangeEventHandler(new APlayTest.Client.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))), ((APlayTest.Client.Project) (this)));
        }
        else
        {
          this.onProjectDetailChange(new APlayTest.Client.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))));
        }
      }
    }
    public virtual void onSheetManagerChange(APlayTest.Client.SheetManager NewSheetManager__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSheetManagerChange received","Client.Designed");
    }
    public void onInternSheetManagerChange(APlay.Generated.Intern.Client.__ISheetManagerAPEvents NewSheetManager__)
    {
      if(SheetManagerChangeEventHandler!=null)
      {
        SheetManagerChangeEventHandler(((APlayTest.Client.SheetManager) (NewSheetManager__)));
      }
      else
      {
        if(APlayTest.Client.ProjectSkeleton.StaticSheetManagerChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectSkeleton.StaticSheetManagerChangeEventHandler(((APlayTest.Client.SheetManager) (NewSheetManager__)), ((APlayTest.Client.Project) (this)));
        }
        else
        {
          this.onSheetManagerChange(((APlayTest.Client.SheetManager) (NewSheetManager__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implProject.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__IProjectAPImpl getProjectObject()
    {
      return (implProject);
    }
    public void setProjectObject(APlay.Generated.Intern.Client.__IProjectAPImpl impl)
    {
      implProject = impl;
    }
    public event APlayTest.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Project StaticIdChangeEventHandler;
    public event APlayTest.Client.Delegates.void_ProjectDetail ProjectDetailChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_ProjectDetail_Project StaticProjectDetailChangeEventHandler;
    public event APlayTest.Client.Delegates.void_SheetManager SheetManagerChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_SheetManager_Project StaticSheetManagerChangeEventHandler;
    private APlay.Generated.Intern.Client.__IProjectAPImpl implProject;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class ProjectManagerSkeleton : APlayTest.Client.IProjectManagerSkeleton, APlay.Generated.Intern.Client.__IProjectManagerAPEvents
  {
    public ProjectManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setProjectManagerObject(((APlay.Generated.Intern.Client.__IProjectManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setProjectManagerObject(APlayObjectFactory.CreateProjectManagerImpl());
      }
      ((APlay.Generated.Intern.Client.__ProjectManager) (this.getProjectManagerObject())).ProjectManagerHandler = ((APlay.Generated.Intern.Client.__IProjectManagerAPEvents) (((APlayTest.Client.ProjectManagerSkeleton) (this))));
    }
    public virtual bool CanJoinProject
    {
      get
      {
        {
          return (implProjectManager.CanJoinProject);
        }
      }
    }
    public virtual bool CanCreateProject
    {
      get
      {
        {
          return (implProjectManager.CanCreateProject);
        }
      }
    }
    public virtual APlayTest.Client.ProjectList Projects
    {
      get
      {
        {
          return (((APlayTest.Client.ProjectList) (implProjectManager.Projects)));
        }
      }
    }
    public virtual APlayTest.Client.Project SelectedProject
    {
      get
      {
        {
          return (((APlayTest.Client.Project) (implProjectManager.SelectedProject)));
        }
      }
    }
    public virtual APlayTest.Client.Client DataClient
    {
      get
      {
        {
          return (((APlayTest.Client.Client) (implProjectManager.DataClient)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implProjectManager.APlayEntityId);
        }
      }
    }
    public virtual void onCanJoinProjectChange(bool NewCanJoinProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanJoinProjectChange received","Client.Designed");
    }
    public void onInternCanJoinProjectChange(bool NewCanJoinProject__)
    {
      if(CanJoinProjectChangeEventHandler!=null)
      {
        CanJoinProjectChangeEventHandler(NewCanJoinProject__);
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticCanJoinProjectChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticCanJoinProjectChangeEventHandler(NewCanJoinProject__, ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onCanJoinProjectChange(NewCanJoinProject__);
        }
      }
    }
    public virtual void onCanCreateProjectChange(bool NewCanCreateProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanCreateProjectChange received","Client.Designed");
    }
    public void onInternCanCreateProjectChange(bool NewCanCreateProject__)
    {
      if(CanCreateProjectChangeEventHandler!=null)
      {
        CanCreateProjectChangeEventHandler(NewCanCreateProject__);
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticCanCreateProjectChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticCanCreateProjectChangeEventHandler(NewCanCreateProject__, ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onCanCreateProjectChange(NewCanCreateProject__);
        }
      }
    }
    public virtual void onProjectsReplace(APlayTest.Client.ProjectList Projects__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsReplace received","Client.Designed");
    }
    public void onInternProjectsReplace(APlay.Generated.Intern.Client.IProjectListEvents Projects__)
    {
      if(ProjectsReplaceEventHandler!=null)
      {
        ProjectsReplaceEventHandler(((APlayTest.Client.ProjectList) (Projects__)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsReplaceEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsReplaceEventHandler(((APlayTest.Client.ProjectList) (Projects__)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsReplace(((APlayTest.Client.ProjectList) (Projects__)));
        }
      }
    }
    public virtual void onProjectsAdd(APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsAdd received","Client.Designed");
    }
    public void onInternProjectsAdd(APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsAddEventHandler!=null)
      {
        ProjectsAddEventHandler(((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsAddEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsAddEventHandler(((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsAdd(((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsRemove(APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsRemove received","Client.Designed");
    }
    public void onInternProjectsRemove(APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsRemoveEventHandler!=null)
      {
        ProjectsRemoveEventHandler(((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsRemoveEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsRemoveEventHandler(((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsRemove(((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsClear received","Client.Designed");
    }
    public void onInternProjectsClear()
    {
      if(ProjectsClearEventHandler!=null)
      {
        ProjectsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsClearEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsClearEventHandler(((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsClear();
        }
      }
    }
    public virtual void onProjectsInsertAt(int pos, APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsInsertAt received","Client.Designed");
    }
    public void onInternProjectsInsertAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsInsertAtEventHandler!=null)
      {
        ProjectsInsertAtEventHandler(pos, ((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsInsertAtEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsInsertAtEventHandler(pos, ((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsInsertAt(pos, ((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsSetAt(int pos, APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsSetAt received","Client.Designed");
    }
    public void onInternProjectsSetAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsSetAtEventHandler!=null)
      {
        ProjectsSetAtEventHandler(pos, ((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsSetAtEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsSetAtEventHandler(pos, ((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsSetAt(pos, ((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsRemoveAt(int pos, APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsRemoveAt received","Client.Designed");
    }
    public void onInternProjectsRemoveAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsRemoveAtEventHandler!=null)
      {
        ProjectsRemoveAtEventHandler(pos, ((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsRemoveAtEventHandler(pos, ((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsRemoveAt(pos, ((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onSelectedProjectChange(APlayTest.Client.Project NewSelectedProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSelectedProjectChange received","Client.Designed");
    }
    public void onInternSelectedProjectChange(APlay.Generated.Intern.Client.__IProjectAPEvents NewSelectedProject__)
    {
      if(SelectedProjectChangeEventHandler!=null)
      {
        SelectedProjectChangeEventHandler(((APlayTest.Client.Project) (NewSelectedProject__)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticSelectedProjectChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticSelectedProjectChangeEventHandler(((APlayTest.Client.Project) (NewSelectedProject__)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onSelectedProjectChange(((APlayTest.Client.Project) (NewSelectedProject__)));
        }
      }
    }
    public virtual void onDataClientChange(APlayTest.Client.Client NewDataClient__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onDataClientChange received","Client.Designed");
    }
    public void onInternDataClientChange(APlay.Generated.Intern.Client.__IClientAPEvents NewDataClient__)
    {
      if(DataClientChangeEventHandler!=null)
      {
        DataClientChangeEventHandler(((APlayTest.Client.Client) (NewDataClient__)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticDataClientChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticDataClientChangeEventHandler(((APlayTest.Client.Client) (NewDataClient__)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onDataClientChange(((APlayTest.Client.Client) (NewDataClient__)));
        }
      }
    }
    public abstract void onJoinedProject(APlayTest.Client.Project project__);
    public void onInternJoinedProject(APlay.Generated.Intern.Client.__IProjectAPEvents project__)
    {
      if(JoinedProjectEventHandler!=null)
      {
        JoinedProjectEventHandler(((APlayTest.Client.Project) (project__)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticJoinedProjectEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticJoinedProjectEventHandler(((APlayTest.Client.Project) (project__)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onJoinedProject(((APlayTest.Client.Project) (project__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implProjectManager.RequiresInit();
      return (((bool) (retu)));
    }
    public void JoinProject(APlayTest.Client.Client sender__, int projectId__)
    {
      implProjectManager.JoinProject(((APlay.Generated.Intern.Client.__IClientAPEvents) (sender__)), projectId__);
    }
    public void CreateProject(APlayTest.Client.Client sender__, String name__)
    {
      implProjectManager.CreateProject(((APlay.Generated.Intern.Client.__IClientAPEvents) (sender__)), name__);
    }
    public void SearchProjects(String searchString__)
    {
      implProjectManager.SearchProjects(searchString__);
    }
    public void SelectProject(int projectId__)
    {
      implProjectManager.SelectProject(projectId__);
    }
    public APlay.Generated.Intern.Client.__IProjectManagerAPImpl getProjectManagerObject()
    {
      return (implProjectManager);
    }
    public void setProjectManagerObject(APlay.Generated.Intern.Client.__IProjectManagerAPImpl impl)
    {
      implProjectManager = impl;
    }
    public event APlayTest.Client.Delegates.void_boolean CanJoinProjectChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_boolean_ProjectManager StaticCanJoinProjectChangeEventHandler;
    public event APlayTest.Client.Delegates.void_boolean CanCreateProjectChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_boolean_ProjectManager StaticCanCreateProjectChangeEventHandler;
    public event APlayTest.Client.Delegates.void_ProjectList ProjectsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_ProjectList_ProjectManager StaticProjectsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_Project ProjectsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_ProjectManager StaticProjectsAddEventHandler;
    public event APlayTest.Client.Delegates.void_Project ProjectsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_ProjectManager StaticProjectsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ ProjectsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_ProjectManager StaticProjectsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Project ProjectsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Project_ProjectManager StaticProjectsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Project ProjectsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Project_ProjectManager StaticProjectsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Project ProjectsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Project_ProjectManager StaticProjectsRemoveAtEventHandler;
    public event APlayTest.Client.Delegates.void_Project SelectedProjectChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_ProjectManager StaticSelectedProjectChangeEventHandler;
    public event APlayTest.Client.Delegates.void_Client DataClientChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Client_ProjectManager StaticDataClientChangeEventHandler;
    public event APlayTest.Client.Delegates.void_Project JoinedProjectEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_ProjectManager StaticJoinedProjectEventHandler;
    private APlay.Generated.Intern.Client.__IProjectManagerAPImpl implProjectManager;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class SheetSkeleton : APlayTest.Client.ISheetSkeleton, APlay.Generated.Intern.Client.__ISheetAPEvents
  {
    public SheetSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setSheetObject(((APlay.Generated.Intern.Client.__ISheetAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setSheetObject(APlayObjectFactory.CreateSheetImpl());
      }
      ((APlay.Generated.Intern.Client.__Sheet) (this.getSheetObject())).SheetHandler = ((APlay.Generated.Intern.Client.__ISheetAPEvents) (((APlayTest.Client.SheetSkeleton) (this))));
    }
    public virtual int Id
    {
      set
      {
        {
          //int32
          implSheet.Id = value;
        }
      }
      get
      {
        {
          return (implSheet.Id);
        }
      }
    }
    public virtual String Name
    {
      set
      {
        {
          //WString
          implSheet.Name = value;
        }
      }
      get
      {
        {
          return (implSheet.Name);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implSheet.APlayEntityId);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implSheet.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__ISheetAPImpl getSheetObject()
    {
      return (implSheet);
    }
    public void setSheetObject(APlay.Generated.Intern.Client.__ISheetAPImpl impl)
    {
      implSheet = impl;
    }
    private APlay.Generated.Intern.Client.__ISheetAPImpl implSheet;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class SheetManagerSkeleton : APlayTest.Client.ISheetManagerSkeleton, APlay.Generated.Intern.Client.__ISheetManagerAPEvents
  {
    public SheetManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setSheetManagerObject(((APlay.Generated.Intern.Client.__ISheetManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setSheetManagerObject(APlayObjectFactory.CreateSheetManagerImpl());
      }
      ((APlay.Generated.Intern.Client.__SheetManager) (this.getSheetManagerObject())).SheetManagerHandler = ((APlay.Generated.Intern.Client.__ISheetManagerAPEvents) (((APlayTest.Client.SheetManagerSkeleton) (this))));
    }
    public virtual APlayTest.Client.SheetList Sheets
    {
      get
      {
        {
          return (((APlayTest.Client.SheetList) (implSheetManager.Sheets)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implSheetManager.APlayEntityId);
        }
      }
    }
    public virtual void onSheetsReplace(APlayTest.Client.SheetList Sheets__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSheetsReplace received","Client.Designed");
    }
    public void onInternSheetsReplace(APlay.Generated.Intern.Client.ISheetListEvents Sheets__)
    {
      if(SheetsReplaceEventHandler!=null)
      {
        SheetsReplaceEventHandler(((APlayTest.Client.SheetList) (Sheets__)));
      }
      else
      {
        if(APlayTest.Client.SheetManagerSkeleton.StaticSheetsReplaceEventHandler!=null)
        {
          APlayTest.Client.SheetManagerSkeleton.StaticSheetsReplaceEventHandler(((APlayTest.Client.SheetList) (Sheets__)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          this.onSheetsReplace(((APlayTest.Client.SheetList) (Sheets__)));
        }
      }
    }
    public virtual void onSheetsAdd(APlayTest.Client.Sheet element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSheetsAdd received","Client.Designed");
    }
    public void onInternSheetsAdd(APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsAddEventHandler!=null)
      {
        SheetsAddEventHandler(((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManagerSkeleton.StaticSheetsAddEventHandler!=null)
        {
          APlayTest.Client.SheetManagerSkeleton.StaticSheetsAddEventHandler(((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          this.onSheetsAdd(((APlayTest.Client.Sheet) (element)));
        }
      }
    }
    public virtual void onSheetsRemove(APlayTest.Client.Sheet element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSheetsRemove received","Client.Designed");
    }
    public void onInternSheetsRemove(APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsRemoveEventHandler!=null)
      {
        SheetsRemoveEventHandler(((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManagerSkeleton.StaticSheetsRemoveEventHandler!=null)
        {
          APlayTest.Client.SheetManagerSkeleton.StaticSheetsRemoveEventHandler(((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          this.onSheetsRemove(((APlayTest.Client.Sheet) (element)));
        }
      }
    }
    public virtual void onSheetsClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSheetsClear received","Client.Designed");
    }
    public void onInternSheetsClear()
    {
      if(SheetsClearEventHandler!=null)
      {
        SheetsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.SheetManagerSkeleton.StaticSheetsClearEventHandler!=null)
        {
          APlayTest.Client.SheetManagerSkeleton.StaticSheetsClearEventHandler(((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          this.onSheetsClear();
        }
      }
    }
    public virtual void onSheetsInsertAt(int pos, APlayTest.Client.Sheet element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSheetsInsertAt received","Client.Designed");
    }
    public void onInternSheetsInsertAt(int pos, APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsInsertAtEventHandler!=null)
      {
        SheetsInsertAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManagerSkeleton.StaticSheetsInsertAtEventHandler!=null)
        {
          APlayTest.Client.SheetManagerSkeleton.StaticSheetsInsertAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          this.onSheetsInsertAt(pos, ((APlayTest.Client.Sheet) (element)));
        }
      }
    }
    public virtual void onSheetsSetAt(int pos, APlayTest.Client.Sheet element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSheetsSetAt received","Client.Designed");
    }
    public void onInternSheetsSetAt(int pos, APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsSetAtEventHandler!=null)
      {
        SheetsSetAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManagerSkeleton.StaticSheetsSetAtEventHandler!=null)
        {
          APlayTest.Client.SheetManagerSkeleton.StaticSheetsSetAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          this.onSheetsSetAt(pos, ((APlayTest.Client.Sheet) (element)));
        }
      }
    }
    public virtual void onSheetsRemoveAt(int pos, APlayTest.Client.Sheet element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSheetsRemoveAt received","Client.Designed");
    }
    public void onInternSheetsRemoveAt(int pos, APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsRemoveAtEventHandler!=null)
      {
        SheetsRemoveAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManagerSkeleton.StaticSheetsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.SheetManagerSkeleton.StaticSheetsRemoveAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          this.onSheetsRemoveAt(pos, ((APlayTest.Client.Sheet) (element)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implSheetManager.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__ISheetManagerAPImpl getSheetManagerObject()
    {
      return (implSheetManager);
    }
    public void setSheetManagerObject(APlay.Generated.Intern.Client.__ISheetManagerAPImpl impl)
    {
      implSheetManager = impl;
    }
    public event APlayTest.Client.Delegates.void_SheetList SheetsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_SheetList_SheetManager StaticSheetsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_Sheet SheetsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_Sheet_SheetManager StaticSheetsAddEventHandler;
    public event APlayTest.Client.Delegates.void_Sheet SheetsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_Sheet_SheetManager StaticSheetsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ SheetsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_SheetManager StaticSheetsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Sheet SheetsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Sheet_SheetManager StaticSheetsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Sheet SheetsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Sheet_SheetManager StaticSheetsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Sheet SheetsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Sheet_SheetManager StaticSheetsRemoveAtEventHandler;
    private APlay.Generated.Intern.Client.__ISheetManagerAPImpl implSheetManager;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class UserSkeleton : APlayTest.Client.IUserSkeleton, APlay.Generated.Intern.Client.__IUserAPEvents
  {
    public UserSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setUserObject(((APlay.Generated.Intern.Client.__IUserAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setUserObject(APlayObjectFactory.CreateUserImpl());
      }
      ((APlay.Generated.Intern.Client.__User) (this.getUserObject())).UserHandler = ((APlay.Generated.Intern.Client.__IUserAPEvents) (((APlayTest.Client.UserSkeleton) (this))));
    }
    public virtual String Name
    {
      set
      {
        {
          //WString
          implUser.Name = value;
        }
      }
      get
      {
        {
          return (implUser.Name);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implUser.APlayEntityId);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implUser.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__IUserAPImpl getUserObject()
    {
      return (implUser);
    }
    public void setUserObject(APlay.Generated.Intern.Client.__IUserAPImpl impl)
    {
      implUser = impl;
    }
    private APlay.Generated.Intern.Client.__IUserAPImpl implUser;
  }
  
}
namespace APlayTest.Client
{
  public partial struct ProjectDetail
  {
    public ProjectDetail(String Name__, String CreatedBy__, DateTime CreationDate__)
    {
      Name = Name__;
      CreatedBy = CreatedBy__;
      CreationDate = CreationDate__;
    }
    public String Name;
    public String CreatedBy;
    public DateTime CreationDate;
    public static bool operator ==(ProjectDetail a, ProjectDetail b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Name==b.Name)&& (a.CreatedBy==b.CreatedBy)&& (a.CreationDate==b.CreationDate);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(ProjectDetail))
      {
        return false;
      }
      ProjectDetail a = this;
      ProjectDetail b = (ProjectDetail)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Name==b.Name)&&(a.CreatedBy==b.CreatedBy)&&(a.CreationDate==b.CreationDate);
    }
    public override int GetHashCode()
    {
      return Name.GetHashCode() + CreatedBy.GetHashCode() + CreationDate.GetHashCode();
    }
    public static bool operator !=(ProjectDetail a, ProjectDetail b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Name.ToString()+"]" + "["+CreatedBy.ToString()+"]" + "["+CreationDate.ToString()+"]";
    }
  }
}
namespace APlayTest.Client
{
  public partial class ProjectList : IList<APlayTest.Client.Project>, APlay.Generated.Intern.Client.IProjectListEvents
  {
    public ProjectList()
    {
      APlay.Generated.Intern.Client.IProjectListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ProjectList();
      }
    }
    public ProjectList(APlay.Generated.Intern.Client.IProjectListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ProjectList();
      }
    }
    public static APlayTest.Client.ProjectList CreateForAPlay(APlay.Generated.Intern.Client.IProjectListImpl impl)
    {
      APlayTest.Client.ProjectList ob = new APlayTest.Client.ProjectList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.IProjectListImpl getProjectObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.IProjectListImpl impl;
    
public int IndexOf(APlayTest.Client.Project item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Client.Project item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Client.Project this[int index]
{
    get
    {
         
        return (APlayTest.Client.Project)impl.get((int)index);
    }
    set
    {
        APlayTest.Client.Project item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Client.Project item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Client.Project item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Client.Project[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Client.Project item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Client.Project item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Client.Project> GetEnumerator()
    {
        return new ProjectListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Client
{
  public partial class ProjectListEnumerator : IEnumerator<APlayTest.Client.Project>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__Project> intern;
        public ProjectListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__Project> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Client.Project Current
        {
            get { APlay.Generated.Intern.Client.__Project item = (APlay.Generated.Intern.Client.__Project)intern.Current; return ((APlayTest.Client.Project) ((item==null)?null:item.__GetExternProject()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Client
{
  public partial class SheetList : IList<APlayTest.Client.Sheet>, APlay.Generated.Intern.Client.ISheetListEvents
  {
    public SheetList()
    {
      APlay.Generated.Intern.Client.ISheetListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.SheetList();
      }
    }
    public SheetList(APlay.Generated.Intern.Client.ISheetListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.SheetList();
      }
    }
    public static APlayTest.Client.SheetList CreateForAPlay(APlay.Generated.Intern.Client.ISheetListImpl impl)
    {
      APlayTest.Client.SheetList ob = new APlayTest.Client.SheetList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.ISheetListImpl getSheetObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.ISheetListImpl impl;
    
public int IndexOf(APlayTest.Client.Sheet item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Client.Sheet item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Client.Sheet this[int index]
{
    get
    {
         
        return (APlayTest.Client.Sheet)impl.get((int)index);
    }
    set
    {
        APlayTest.Client.Sheet item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Client.Sheet item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Client.Sheet item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Client.Sheet[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Client.Sheet item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Client.Sheet item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Client.Sheet> GetEnumerator()
    {
        return new SheetListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Client
{
  public partial class SheetListEnumerator : IEnumerator<APlayTest.Client.Sheet>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__Sheet> intern;
        public SheetListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__Sheet> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Client.Sheet Current
        {
            get { APlay.Generated.Intern.Client.__Sheet item = (APlay.Generated.Intern.Client.__Sheet)intern.Current; return ((APlayTest.Client.Sheet) ((item==null)?null:item.__GetExternSheet()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Client
{
  public abstract partial class APlayClientSkeleton : APlayTest.Client.IAPlayClientEvents, APlay.Generated.Intern.Client.IDesignedClient
  {
    public APlayClientSkeleton()
    {
      APlay.Generated.Intern.Client.DesignedClient client = new APlay.Generated.Intern.Client.DesignedClient(this);
      client.Factory = ((APlay.Generated.Intern.Client.IUserClassFactory) (new APlayTest.Client.UserClassFactory()));
      impl = client;
    }
    public abstract void onConnect(APlayTest.Client.Client clientObject);
    public void onInternConnect(APlay.Generated.Intern.Client.__IClientAPEvents clientObject)
    {
      if(ConnectEventHandler!=null)
      {
        ConnectEventHandler(((APlayTest.Client.Client) (clientObject)));
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticConnectEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticConnectEventHandler(((APlayTest.Client.Client) (clientObject)), ((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnect(((APlayTest.Client.Client) (clientObject)));
        }
      }
    }
    public virtual void onConnectionSwitch(APlayTest.Client.Client clientObject)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionSwitch received","Client.Designed");
    }
    public void onInternConnectionSwitch(APlay.Generated.Intern.Client.__IClientAPEvents clientObject)
    {
      if(ConnectionSwitchEventHandler!=null)
      {
        ConnectionSwitchEventHandler(((APlayTest.Client.Client) (clientObject)));
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticConnectionSwitchEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticConnectionSwitchEventHandler(((APlayTest.Client.Client) (clientObject)), ((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionSwitch(((APlayTest.Client.Client) (clientObject)));
        }
      }
    }
    public abstract void onDisconnect();
    public void onInternDisconnect()
    {
      if(DisconnectEventHandler!=null)
      {
        DisconnectEventHandler();
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticDisconnectEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticDisconnectEventHandler(((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onDisconnect();
        }
      }
    }
    public abstract void onConnectionFailed();
    public void onInternConnectionFailed()
    {
      if(ConnectionFailedEventHandler!=null)
      {
        ConnectionFailedEventHandler();
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticConnectionFailedEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticConnectionFailedEventHandler(((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionFailed();
        }
      }
    }
    public virtual void onConnectionRejected(String reason)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionRejected received","Client.Designed");
    }
    public void onInternConnectionRejected(String reason)
    {
      if(ConnectionRejectedEventHandler!=null)
      {
        ConnectionRejectedEventHandler(reason);
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticConnectionRejectedEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticConnectionRejectedEventHandler(reason, ((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionRejected(reason);
        }
      }
    }
    public String GetVersionString()
    {
      String retu = impl.GetVersionString();
      return (((String) (retu)));
    }
    public void Start(String address)
    {
      impl.Start(address);
    }
    public void StartBalanced(String address)
    {
      impl.StartBalanced(address);
    }
    public void SwitchCloud(String address)
    {
      impl.SwitchCloud(address);
    }
    public void SwitchBalancedCloud(String address)
    {
      impl.SwitchBalancedCloud(address);
    }
    public void EnableEventQueue(bool enable)
    {
      impl.EnableEventQueue(enable);
    }
    public void Stop()
    {
      impl.Stop();
    }
    public bool FireEvent()
    {
      bool retu = impl.FireEvent();
      return (((bool) (retu)));
    }
    public DateTime GetSyncedTime()
    {
      DateTime retu = impl.GetSyncedTime();
      return (((DateTime) (retu)));
    }
    public void SetExternLogger(APlay.Common.Logging.IExternLogger logger)
    {
      impl.SetExternLogger(((APlay.Common.Logging.IExternLogger) (logger)));
    }
    public event APlayTest.Client.Delegates.void_Client ConnectEventHandler;
    static public event APlayTest.Client.Delegates.void_Client_APlayClientSkeleton StaticConnectEventHandler;
    public event APlayTest.Client.Delegates.void_Client ConnectionSwitchEventHandler;
    static public event APlayTest.Client.Delegates.void_Client_APlayClientSkeleton StaticConnectionSwitchEventHandler;
    public event APlayTest.Client.Delegates.void_ DisconnectEventHandler;
    static public event APlayTest.Client.Delegates.void_APlayClientSkeleton StaticDisconnectEventHandler;
    public event APlayTest.Client.Delegates.void_ ConnectionFailedEventHandler;
    static public event APlayTest.Client.Delegates.void_APlayClientSkeleton StaticConnectionFailedEventHandler;
    public event APlayTest.Client.Delegates.void_String ConnectionRejectedEventHandler;
    static public event APlayTest.Client.Delegates.void_String_APlayClientSkeleton StaticConnectionRejectedEventHandler;
    private APlay.Generated.Intern.Client.IDesignedClientImpl impl;
  }
  
}
namespace APlayTest.Client
{
  public partial class APlayObjectFactory
  {
    public static void SetUserFactory(APlayTest.Client.IUserObjectFactory factory)
    {
      Client_ = factory;
      Project_ = factory;
      ProjectManager_ = factory;
      Sheet_ = factory;
      SheetManager_ = factory;
      User_ = factory;
    }
    public static void SetAPlayDefaultFactory()
    {
      Client_ = null;
      Project_ = null;
      ProjectManager_ = null;
      Sheet_ = null;
      SheetManager_ = null;
      User_ = null;
    }
    public static void SetClientUserFactory(APlayTest.Client.IClientUserFactory factory)
    {
      Client_ = factory;
    }
    public static void SetClientAPlayDefaultFactory()
    {
      Client_ = null;
    }
    public static APlay.Generated.Intern.Client.__IClientAPImpl CreateClientImpl()
    {
      if(Client_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateClient());
      }
    }
    public static void SetProjectUserFactory(APlayTest.Client.IProjectUserFactory factory)
    {
      Project_ = factory;
    }
    public static void SetProjectAPlayDefaultFactory()
    {
      Project_ = null;
    }
    public static APlay.Generated.Intern.Client.__IProjectAPImpl CreateProjectImpl()
    {
      if(Project_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateProject());
      }
    }
    public static void SetProjectManagerUserFactory(APlayTest.Client.IProjectManagerUserFactory factory)
    {
      ProjectManager_ = factory;
    }
    public static void SetProjectManagerAPlayDefaultFactory()
    {
      ProjectManager_ = null;
    }
    public static APlay.Generated.Intern.Client.__IProjectManagerAPImpl CreateProjectManagerImpl()
    {
      if(ProjectManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateProjectManager());
      }
    }
    public static void SetSheetUserFactory(APlayTest.Client.ISheetUserFactory factory)
    {
      Sheet_ = factory;
    }
    public static void SetSheetAPlayDefaultFactory()
    {
      Sheet_ = null;
    }
    public static APlay.Generated.Intern.Client.__ISheetAPImpl CreateSheetImpl()
    {
      if(Sheet_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateSheet());
      }
    }
    public static void SetSheetManagerUserFactory(APlayTest.Client.ISheetManagerUserFactory factory)
    {
      SheetManager_ = factory;
    }
    public static void SetSheetManagerAPlayDefaultFactory()
    {
      SheetManager_ = null;
    }
    public static APlay.Generated.Intern.Client.__ISheetManagerAPImpl CreateSheetManagerImpl()
    {
      if(SheetManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateSheetManager());
      }
    }
    public static void SetUserUserFactory(APlayTest.Client.IUserUserFactory factory)
    {
      User_ = factory;
    }
    public static void SetUserAPlayDefaultFactory()
    {
      User_ = null;
    }
    public static APlay.Generated.Intern.Client.__IUserAPImpl CreateUserImpl()
    {
      if(User_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateUser());
      }
    }
    static private APlayTest.Client.IClientUserFactory Client_;
    static private APlayTest.Client.IProjectUserFactory Project_;
    static private APlayTest.Client.IProjectManagerUserFactory ProjectManager_;
    static private APlayTest.Client.ISheetUserFactory Sheet_;
    static private APlayTest.Client.ISheetManagerUserFactory SheetManager_;
    static private APlayTest.Client.IUserUserFactory User_;
  }
  
}
namespace APlayTest.Client
{
  public partial class UserClassFactory : APlay.Generated.Intern.Client.IUserClassFactory
  {
    public APlay.Generated.Intern.Client.__IClientAPEvents CreateClientEvents(APlay.Generated.Intern.Client.__IClientAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IClientAPEvents retu__ = ((APlay.Generated.Intern.Client.__IClientAPEvents) (new APlayTest.Client.Client()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IProjectAPEvents CreateProjectEvents(APlay.Generated.Intern.Client.__IProjectAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IProjectAPEvents retu__ = ((APlay.Generated.Intern.Client.__IProjectAPEvents) (new APlayTest.Client.Project()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IProjectManagerAPEvents CreateProjectManagerEvents(APlay.Generated.Intern.Client.__IProjectManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IProjectManagerAPEvents retu__ = ((APlay.Generated.Intern.Client.__IProjectManagerAPEvents) (new APlayTest.Client.ProjectManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__ISheetAPEvents CreateSheetEvents(APlay.Generated.Intern.Client.__ISheetAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__ISheetAPEvents retu__ = ((APlay.Generated.Intern.Client.__ISheetAPEvents) (new APlayTest.Client.Sheet()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__ISheetManagerAPEvents CreateSheetManagerEvents(APlay.Generated.Intern.Client.__ISheetManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__ISheetManagerAPEvents retu__ = ((APlay.Generated.Intern.Client.__ISheetManagerAPEvents) (new APlayTest.Client.SheetManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IUserAPEvents CreateUserEvents(APlay.Generated.Intern.Client.__IUserAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IUserAPEvents retu__ = ((APlay.Generated.Intern.Client.__IUserAPEvents) (new APlayTest.Client.User()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.IProjectListEvents CreateProjectListEvents(APlay.Generated.Intern.Client.IProjectListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.IProjectListEvents) (APlayTest.Client.ProjectList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Client.ISheetListEvents CreateSheetListEvents(APlay.Generated.Intern.Client.ISheetListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.ISheetListEvents) (APlayTest.Client.SheetList.CreateForAPlay(impl))));
    }
  }
  
}
namespace APlayTest.Client
{
  public partial class APlayUserResolveEngine : APlay.Generated.Intern.Client.IAPlayResolve
  {
    public static void SetResolveEngine(APlayTest.Client.IAPlayUserResolveEngine inter)
    {
      inter_ = inter;
      APlay.Generated.Intern.Client.APlayInternUserResolver.SetResolveEngine(new APlayTest.Client.APlayUserResolveEngine());
    }
    static private APlayTest.Client.IAPlayUserResolveEngine inter_;
  }
  
}
namespace APlayTest.Client
{
  public partial class Delegates
  {
    public delegate void void_Project(APlayTest.Client.Project NewCurrentProject__);
    public delegate void void_Project_Client(APlayTest.Client.Project NewCurrentProject__, APlayTest.Client.Client this_);
    public delegate void void_ProjectManager(APlayTest.Client.ProjectManager NewProjectManager__);
    public delegate void void_ProjectManager_Client(APlayTest.Client.ProjectManager NewProjectManager__, APlayTest.Client.Client this_);
    public delegate void void_User(APlayTest.Client.User NewCurrentUser__);
    public delegate void void_User_Client(APlayTest.Client.User NewCurrentUser__, APlayTest.Client.Client this_);
    public delegate APlayTest.Client.User User_();
    public delegate APlayTest.Client.User User_Client(APlayTest.Client.Client this_);
    public delegate void void_int32(int NewId__);
    public delegate void void_int32_Project(int NewId__, APlayTest.Client.Project this_);
    public delegate void void_ProjectDetail(APlayTest.Client.ProjectDetail NewProjectDetail__);
    public delegate void void_ProjectDetail_Project(APlayTest.Client.ProjectDetail NewProjectDetail__, APlayTest.Client.Project this_);
    public delegate void void_SheetManager(APlayTest.Client.SheetManager NewSheetManager__);
    public delegate void void_SheetManager_Project(APlayTest.Client.SheetManager NewSheetManager__, APlayTest.Client.Project this_);
    public delegate void void_boolean(bool NewCanJoinProject__);
    public delegate void void_boolean_ProjectManager(bool NewCanJoinProject__, APlayTest.Client.ProjectManager this_);
    public delegate void void_ProjectList(APlayTest.Client.ProjectList Projects__);
    public delegate void void_ProjectList_ProjectManager(APlayTest.Client.ProjectList Projects__, APlayTest.Client.ProjectManager this_);
    public delegate void void_Project_ProjectManager(APlayTest.Client.Project element, APlayTest.Client.ProjectManager this_);
    public delegate void void_();
    public delegate void void_int32_Project_ProjectManager(int pos, APlayTest.Client.Project element, APlayTest.Client.ProjectManager this_);
    public delegate void void_Client(APlayTest.Client.Client NewDataClient__);
    public delegate void void_Client_ProjectManager(APlayTest.Client.Client NewDataClient__, APlayTest.Client.ProjectManager this_);
    public delegate void void_SheetList(APlayTest.Client.SheetList Sheets__);
    public delegate void void_SheetList_SheetManager(APlayTest.Client.SheetList Sheets__, APlayTest.Client.SheetManager this_);
    public delegate void void_Sheet(APlayTest.Client.Sheet element);
    public delegate void void_Sheet_SheetManager(APlayTest.Client.Sheet element, APlayTest.Client.SheetManager this_);
    public delegate void void_int32_Sheet(int pos, APlayTest.Client.Sheet element);
    public delegate void void_int32_Sheet_SheetManager(int pos, APlayTest.Client.Sheet element, APlayTest.Client.SheetManager this_);
    public delegate void void_Client_APlayClientSkeleton(APlayTest.Client.Client clientObject, APlayTest.Client.APlayClientSkeleton this_);
    public delegate void void_APlayClientSkeleton(APlayTest.Client.APlayClientSkeleton this_);
    public delegate void void_String(String reason);
    public delegate void void_String_APlayClientSkeleton(String reason, APlayTest.Client.APlayClientSkeleton this_);
  }
}
