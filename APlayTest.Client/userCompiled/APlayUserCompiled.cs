/**
* automatically generated by APlay 2.0.2.1
* www.aplaypowered.com
*/

using System;
using System.Collections.Generic;
using APlay.Common;
using APlay.Common.Utils;
using APlay.Common.DataTypes;
using APlayTest.Client;
namespace APlayTest.Client
{
  public interface  IAPlayFactory
  {
  };
}
namespace APlayTest.Client
{
  public interface  IAPlayUserResolveEngine
  {
  };
}
namespace APlayTest.Client
{
  public interface  IBlockSymbolImpl
  {
    int Id {get; }
    APlayTest.Client.ConnectorList Connectors {get; }
    double PositionX {get; set; }
    double PositionY {get; set; }
    APlayTest.Client.AplaySize Size {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void SetPosition (APlayTest.Client.AplayPoint position__, APlayTest.Client.Client client__);
    APlayTest.Client.ConnectionList GetAttachedConnections ();
    void GetAttachedConnections (APlayTest.Client.Delegates.void_ConnectionList returnDelegate);
  };
}
namespace APlayTest.Client
{
  public interface  IBlockSymbolEvents
  {
    void onIdChange (int NewId__);
    void onConnectorsReplace (APlayTest.Client.ConnectorList Connectors__);
    void onConnectorsAdd (APlayTest.Client.Connector element);
    void onConnectorsRemove (APlayTest.Client.Connector element);
    void onConnectorsClear ();
    void onConnectorsInsertAt (int pos, APlayTest.Client.Connector element);
    void onConnectorsSetAt (int pos, APlayTest.Client.Connector element);
    void onConnectorsRemoveAt (int pos, APlayTest.Client.Connector element);
    void onPositionXChange (double NewPositionX__);
    void onPositionYChange (double NewPositionY__);
    void onSizeChange (APlayTest.Client.AplaySize NewSize__);
  };
}
namespace APlayTest.Client
{
  public interface  IBlockSymbolSkeleton : APlayTest.Client.IBlockSymbolImpl, APlay.Generated.Intern.Client.__IBlockSymbolAPEvents, APlayTest.Client.IBlockSymbolEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IBlockSymbolFactory
  {
    APlayTest.Client.BlockSymbol CreateBlockSymbol ();
  };
}
namespace APlayTest.Client
{
  public interface  IClientImpl
  {
    bool IsAdmin {get; }
    String RemoteAddress {get; }
    ulong APlayClientId {get; }
    int Id {get; }
    APlayTest.Client.Project CurrentProject {get; }
    APlayTest.Client.ProjectManager ProjectManager {get; }
    APlayTest.Client.UndoManager UndoManager {get; }
    APlayTest.Client.User CurrentUser {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    bool TryGetId (int id__, APlayTest.Client.Client client__);
    void TryGetId (int id__, APlayTest.Client.Client client__, APlayTest.Client.Delegates.void_boolean returnDelegate);
  };
}
namespace APlayTest.Client
{
  public interface  IClientEvents
  {
    void onIdChange (int NewId__);
    void onCurrentProjectChange (APlayTest.Client.Project NewCurrentProject__);
    void onProjectManagerChange (APlayTest.Client.ProjectManager NewProjectManager__);
    void onUndoManagerChange (APlayTest.Client.UndoManager NewUndoManager__);
  };
}
namespace APlayTest.Client
{
  public interface  IClientSkeleton : APlayTest.Client.IClientImpl, APlay.Generated.Intern.Client.__IClientAPEvents, APlayTest.Client.IClientEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IClientFactory
  {
    APlayTest.Client.Client CreateClient ();
  };
}
namespace APlayTest.Client
{
  public interface  IConnectionImpl
  {
    int Id {get; }
    uint Color {get; set; }
    APlayTest.Client.Connector From {get; set; }
    APlayTest.Client.Connector To {get; set; }
    APlayTest.Client.AplayPoint FromPosition {get; set; }
    APlayTest.Client.AplayPoint ToPosition {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void SetFromPosition (APlayTest.Client.AplayPoint position__, APlayTest.Client.Client client__);
    void SetToPosition (APlayTest.Client.AplayPoint position__, APlayTest.Client.Client client__);
    void SetTo (APlayTest.Client.Connector connector__, APlayTest.Client.Client client__);
    void SetFrom (APlayTest.Client.Connector connector__, APlayTest.Client.Client client__);
    void SetColor (uint Color__, APlayTest.Client.Client client__);
  };
}
namespace APlayTest.Client
{
  public interface  IConnectionEvents
  {
    void onIdChange (int NewId__);
    void onColorChange (uint NewColor__);
    void onFromChange (APlayTest.Client.Connector NewFrom__);
    void onToChange (APlayTest.Client.Connector NewTo__);
    void onFromPositionChange (APlayTest.Client.AplayPoint NewFromPosition__);
    void onToPositionChange (APlayTest.Client.AplayPoint NewToPosition__);
  };
}
namespace APlayTest.Client
{
  public interface  IConnectionSkeleton : APlayTest.Client.IConnectionImpl, APlay.Generated.Intern.Client.__IConnectionAPEvents, APlayTest.Client.IConnectionEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IConnectionFactory
  {
    APlayTest.Client.Connection CreateConnection ();
  };
}
namespace APlayTest.Client
{
  public interface  IConnectorImpl
  {
    int Id {get; }
    APlayTest.Client.ConnectionList Connections {get; set; }
    double PositionX {get; set; }
    double PositionY {get; set; }
    APlayTest.Client.AplaySize Size {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void SetPosition (APlayTest.Client.AplayPoint position__, APlayTest.Client.Client client__);
  };
}
namespace APlayTest.Client
{
  public interface  IConnectorEvents
  {
    void onIdChange (int NewId__);
    void onConnectionsReplace (APlayTest.Client.ConnectionList Connections__);
    void onConnectionsAdd (APlayTest.Client.Connection element);
    void onConnectionsRemove (APlayTest.Client.Connection element);
    void onConnectionsClear ();
    void onConnectionsInsertAt (int pos, APlayTest.Client.Connection element);
    void onConnectionsSetAt (int pos, APlayTest.Client.Connection element);
    void onConnectionsRemoveAt (int pos, APlayTest.Client.Connection element);
    void onPositionXChange (double NewPositionX__);
    void onPositionYChange (double NewPositionY__);
    void onSizeChange (APlayTest.Client.AplaySize NewSize__);
  };
}
namespace APlayTest.Client
{
  public interface  IConnectorSkeleton : APlayTest.Client.IConnectorImpl, APlay.Generated.Intern.Client.__IConnectorAPEvents, APlayTest.Client.IConnectorEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IConnectorFactory
  {
    APlayTest.Client.Connector CreateConnector ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectImpl
  {
    int Id {get; }
    APlayTest.Client.ProjectDetail ProjectDetail {get; }
    APlayTest.Client.SheetManager SheetManager {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectEvents
  {
    void onIdChange (int NewId__);
    void onProjectDetailChange (APlayTest.Client.ProjectDetail NewProjectDetail__);
    void onSheetManagerChange (APlayTest.Client.SheetManager NewSheetManager__);
  };
}
namespace APlayTest.Client
{
  public interface  IProjectSkeleton : APlayTest.Client.IProjectImpl, APlay.Generated.Intern.Client.__IProjectAPEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerImpl
  {
    bool CanJoinProject {get; }
    bool CanCreateProject {get; }
    APlayTest.Client.ProjectList Projects {get; }
    APlayTest.Client.Project SelectedProject {get; }
    APlayTest.Client.Client DataClient {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void JoinProject (APlayTest.Client.Client sender__, int projectId__);
    void CreateProject (APlayTest.Client.Client sender__, String name__);
    void SearchProjects (String searchString__);
    void SelectProject (int projectId__);
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerEvents
  {
    void onCanJoinProjectChange (bool NewCanJoinProject__);
    void onCanCreateProjectChange (bool NewCanCreateProject__);
    void onProjectsReplace (APlayTest.Client.ProjectList Projects__);
    void onProjectsAdd (APlayTest.Client.Project element);
    void onProjectsRemove (APlayTest.Client.Project element);
    void onProjectsClear ();
    void onProjectsInsertAt (int pos, APlayTest.Client.Project element);
    void onProjectsSetAt (int pos, APlayTest.Client.Project element);
    void onProjectsRemoveAt (int pos, APlayTest.Client.Project element);
    void onSelectedProjectChange (APlayTest.Client.Project NewSelectedProject__);
    void onDataClientChange (APlayTest.Client.Client NewDataClient__);
    void onJoinedProject (APlayTest.Client.Project project__);
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerSkeleton : APlayTest.Client.IProjectManagerImpl, APlay.Generated.Intern.Client.__IProjectManagerAPEvents, APlayTest.Client.IProjectManagerEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerFactory
  {
    APlayTest.Client.ProjectManager CreateProjectManager ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetImpl
  {
    String Name {get; }
    APlayTest.Client.BlockSymbolList BlockSymbols {get; }
    APlayTest.Client.ConnectionList Connections {get; }
    APlayTest.Client.ConnectorList Connectors {get; }
    int Id {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void SetName (String name__, APlayTest.Client.Client client__);
    APlayTest.Client.BlockSymbol CreateBlockSymbol ();
    void CreateBlockSymbol (APlayTest.Client.Delegates.void_BlockSymbol returnDelegate);
    void Add (APlayTest.Client.BlockSymbol blockSymbol__, APlayTest.Client.Client client__);
    void Remove (APlayTest.Client.BlockSymbol blockSymbol__, APlayTest.Client.Client client__);
    APlayTest.Client.Connection CreateConnection ();
    void CreateConnection (APlayTest.Client.Delegates.void_Connection returnDelegate);
    void AddConnection (APlayTest.Client.Connection connection__, APlayTest.Client.Client client__);
    void RemoveConnection (APlayTest.Client.Connection connection__, APlayTest.Client.Client client__);
    APlayTest.Client.Connector CreateConnector ();
    void CreateConnector (APlayTest.Client.Delegates.void_Connector returnDelegate);
    void AddConnector (APlayTest.Client.Connector connection__, APlayTest.Client.Client client__);
    void RemoveConnector (APlayTest.Client.Connector connection__, APlayTest.Client.Client client__);
  };
}
namespace APlayTest.Client
{
  public interface  ISheetEvents
  {
    void onNameChange (String NewName__);
    void onBlockSymbolsReplace (APlayTest.Client.BlockSymbolList BlockSymbols__);
    void onBlockSymbolsAdd (APlayTest.Client.BlockSymbol element);
    void onBlockSymbolsRemove (APlayTest.Client.BlockSymbol element);
    void onBlockSymbolsClear ();
    void onBlockSymbolsInsertAt (int pos, APlayTest.Client.BlockSymbol element);
    void onBlockSymbolsSetAt (int pos, APlayTest.Client.BlockSymbol element);
    void onBlockSymbolsRemoveAt (int pos, APlayTest.Client.BlockSymbol element);
    void onConnectionsReplace (APlayTest.Client.ConnectionList Connections__);
    void onConnectionsAdd (APlayTest.Client.Connection element);
    void onConnectionsRemove (APlayTest.Client.Connection element);
    void onConnectionsClear ();
    void onConnectionsInsertAt (int pos, APlayTest.Client.Connection element);
    void onConnectionsSetAt (int pos, APlayTest.Client.Connection element);
    void onConnectionsRemoveAt (int pos, APlayTest.Client.Connection element);
    void onConnectorsReplace (APlayTest.Client.ConnectorList Connectors__);
    void onConnectorsAdd (APlayTest.Client.Connector element);
    void onConnectorsRemove (APlayTest.Client.Connector element);
    void onConnectorsClear ();
    void onConnectorsInsertAt (int pos, APlayTest.Client.Connector element);
    void onConnectorsSetAt (int pos, APlayTest.Client.Connector element);
    void onConnectorsRemoveAt (int pos, APlayTest.Client.Connector element);
    void onIdChange (int NewId__);
  };
}
namespace APlayTest.Client
{
  public interface  ISheetSkeleton : APlayTest.Client.ISheetImpl, APlay.Generated.Intern.Client.__ISheetAPEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerImpl
  {
    APlayTest.Client.SheetList Sheets {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    APlayTest.Client.Sheet CreateSheet ();
    void CreateSheet (APlayTest.Client.Delegates.void_Sheet returnDelegate);
    void AddSheet (APlayTest.Client.Sheet sheet__);
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerEvents
  {
    void onSheetsReplace (APlayTest.Client.SheetList Sheets__);
    void onSheetsAdd (APlayTest.Client.Sheet element);
    void onSheetsRemove (APlayTest.Client.Sheet element);
    void onSheetsClear ();
    void onSheetsInsertAt (int pos, APlayTest.Client.Sheet element);
    void onSheetsSetAt (int pos, APlayTest.Client.Sheet element);
    void onSheetsRemoveAt (int pos, APlayTest.Client.Sheet element);
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerSkeleton : APlayTest.Client.ISheetManagerImpl, APlay.Generated.Intern.Client.__ISheetManagerAPEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IUndoManagerImpl
  {
    APlayTest.Client.Client DataClient {get; }
    bool CanUndo {get; }
    bool CanRedo {get; }
    APlayTest.Client.HistoryEntryList History {get; }
    int ActiveHistoryEntryId {get; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
    void StartTransaction (String description__);
    void EndTransaction ();
    void CancelTransaction ();
    void ExecuteUndo ();
    void ExecuteRedo ();
    void UndoRedoTo (APlayTest.Client.HistoryEntry destinationEntry__);
  };
}
namespace APlayTest.Client
{
  public interface  IUndoManagerEvents
  {
    void onDataClientChange (APlayTest.Client.Client NewDataClient__);
    void onCanUndoChange (bool NewCanUndo__);
    void onCanRedoChange (bool NewCanRedo__);
    void onHistoryReplace (APlayTest.Client.HistoryEntryList History__);
    void onHistoryAdd (APlayTest.Client.HistoryEntry element);
    void onHistoryRemove (APlayTest.Client.HistoryEntry element);
    void onHistoryClear ();
    void onHistoryInsertAt (int pos, APlayTest.Client.HistoryEntry element);
    void onHistorySetAt (int pos, APlayTest.Client.HistoryEntry element);
    void onHistoryRemoveAt (int pos, APlayTest.Client.HistoryEntry element);
    void onActiveHistoryEntryIdChange (int NewActiveHistoryEntryId__);
  };
}
namespace APlayTest.Client
{
  public interface  IUndoManagerSkeleton : APlayTest.Client.IUndoManagerImpl, APlay.Generated.Intern.Client.__IUndoManagerAPEvents, APlayTest.Client.IUndoManagerEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IUndoManagerFactory
  {
    APlayTest.Client.UndoManager CreateUndoManager ();
  };
}
namespace APlayTest.Client
{
  public interface  IUserImpl
  {
    String Name {get; set; }
    ulong APlayEntityId {get; }
    bool RequiresInit ();
  };
}
namespace APlayTest.Client
{
  public interface  IUserEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IUserSkeleton : APlayTest.Client.IUserImpl, APlay.Generated.Intern.Client.__IUserAPEvents, APlayTest.Client.IUserEvents
  {
  };
}
namespace APlayTest.Client
{
  public interface  IUserFactory
  {
    APlayTest.Client.User CreateUser ();
  };
}
namespace APlayTest.Client
{
  public interface  IAPlayClientEvents
  {
    void onConnect (APlayTest.Client.Client clientObject);
    void onConnectionSwitch (APlayTest.Client.Client clientObject);
    void onDisconnect ();
    void onConnectionFailed ();
    void onConnectionRejected (String reason);
  };
}
namespace APlayTest.Client
{
  public interface  IAPlayClientImpl
  {
    String GetVersionString ();
    void Start (String address);
    void StartBalanced (String address);
    void SwitchCloud (String address);
    void SwitchBalancedCloud (String address);
    void EnableEventQueue (bool enable);
    void Stop ();
    bool FireEvent ();
    DateTime GetSyncedTime ();
    void SetExternLogger (APlay.Common.Logging.IExternLogger logger);
  };
}
namespace APlayTest.Client
{
  public interface  IUserObjectFactory : APlayTest.Client.IBlockSymbolUserFactory, APlayTest.Client.IClientUserFactory, APlayTest.Client.IConnectionUserFactory, APlayTest.Client.IConnectorUserFactory, APlayTest.Client.IProjectUserFactory, APlayTest.Client.IProjectManagerUserFactory, APlayTest.Client.ISheetUserFactory, APlayTest.Client.ISheetManagerUserFactory, APlayTest.Client.IUndoManagerUserFactory, APlayTest.Client.IUserUserFactory
  {
  };
}
namespace APlayTest.Client
{
  public interface  IBlockSymbolUserFactory
  {
    APlayTest.Client.IBlockSymbolImpl CreateBlockSymbol ();
  };
}
namespace APlayTest.Client
{
  public interface  IClientUserFactory
  {
    APlayTest.Client.IClientImpl CreateClient ();
  };
}
namespace APlayTest.Client
{
  public interface  IConnectionUserFactory
  {
    APlayTest.Client.IConnectionImpl CreateConnection ();
  };
}
namespace APlayTest.Client
{
  public interface  IConnectorUserFactory
  {
    APlayTest.Client.IConnectorImpl CreateConnector ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectUserFactory
  {
    APlayTest.Client.IProjectImpl CreateProject ();
  };
}
namespace APlayTest.Client
{
  public interface  IProjectManagerUserFactory
  {
    APlayTest.Client.IProjectManagerImpl CreateProjectManager ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetUserFactory
  {
    APlayTest.Client.ISheetImpl CreateSheet ();
  };
}
namespace APlayTest.Client
{
  public interface  ISheetManagerUserFactory
  {
    APlayTest.Client.ISheetManagerImpl CreateSheetManager ();
  };
}
namespace APlayTest.Client
{
  public interface  IUndoManagerUserFactory
  {
    APlayTest.Client.IUndoManagerImpl CreateUndoManager ();
  };
}
namespace APlayTest.Client
{
  public interface  IUserUserFactory
  {
    APlayTest.Client.IUserImpl CreateUser ();
  };
}
namespace APlayTest.Client
{
  public partial class APlayFactory
  {
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class BlockSymbolSkeleton : APlayTest.Client.IBlockSymbolSkeleton, APlay.Generated.Intern.Client.__IBlockSymbolAPEvents
  {
    public BlockSymbolSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setBlockSymbolObject(((APlay.Generated.Intern.Client.__IBlockSymbolAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setBlockSymbolObject(APlayObjectFactory.CreateBlockSymbolImpl());
      }
      ((APlay.Generated.Intern.Client.__BlockSymbol) (this.getBlockSymbolObject())).BlockSymbolHandler = ((APlay.Generated.Intern.Client.__IBlockSymbolAPEvents) (((APlayTest.Client.BlockSymbolSkeleton) (this))));
    }
    public virtual int Id
    {
      get
      {
        {
          return (implBlockSymbol.Id);
        }
      }
    }
    public virtual APlayTest.Client.ConnectorList Connectors
    {
      get
      {
        {
          return (((APlayTest.Client.ConnectorList) (implBlockSymbol.Connectors)));
        }
      }
    }
    public virtual double PositionX
    {
      set
      {
        {
          //float64
          implBlockSymbol.PositionX = value;
        }
      }
      get
      {
        {
          return (implBlockSymbol.PositionX);
        }
      }
    }
    public virtual double PositionY
    {
      set
      {
        {
          //float64
          implBlockSymbol.PositionY = value;
        }
      }
      get
      {
        {
          return (implBlockSymbol.PositionY);
        }
      }
    }
    public virtual APlayTest.Client.AplaySize Size
    {
      set
      {
        {
          //AplaySize
          implBlockSymbol.Size = new APlay.Generated.Intern.Client.__AplaySize(value.Width, value.Height);
        }
      }
      get
      {
        {
          return (new APlayTest.Client.AplaySize(((float) (implBlockSymbol.Size.Width)), ((float) (implBlockSymbol.Size.Height))));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implBlockSymbol.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Client.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticIdChangeEventHandler(NewId__, ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public virtual void onConnectorsReplace(APlayTest.Client.ConnectorList Connectors__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectorsReplace received","Client.Designed");
    }
    public void onInternConnectorsReplace(APlay.Generated.Intern.Client.IConnectorListEvents Connectors__)
    {
      if(ConnectorsReplaceEventHandler!=null)
      {
        ConnectorsReplaceEventHandler(((APlayTest.Client.ConnectorList) (Connectors__)));
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsReplaceEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsReplaceEventHandler(((APlayTest.Client.ConnectorList) (Connectors__)), ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onConnectorsReplace(((APlayTest.Client.ConnectorList) (Connectors__)));
        }
      }
    }
    public virtual void onConnectorsAdd(APlayTest.Client.Connector element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectorsAdd received","Client.Designed");
    }
    public void onInternConnectorsAdd(APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsAddEventHandler!=null)
      {
        ConnectorsAddEventHandler(((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsAddEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsAddEventHandler(((APlayTest.Client.Connector) (element)), ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onConnectorsAdd(((APlayTest.Client.Connector) (element)));
        }
      }
    }
    public virtual void onConnectorsRemove(APlayTest.Client.Connector element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectorsRemove received","Client.Designed");
    }
    public void onInternConnectorsRemove(APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsRemoveEventHandler!=null)
      {
        ConnectorsRemoveEventHandler(((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsRemoveEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsRemoveEventHandler(((APlayTest.Client.Connector) (element)), ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onConnectorsRemove(((APlayTest.Client.Connector) (element)));
        }
      }
    }
    public virtual void onConnectorsClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectorsClear received","Client.Designed");
    }
    public void onInternConnectorsClear()
    {
      if(ConnectorsClearEventHandler!=null)
      {
        ConnectorsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsClearEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsClearEventHandler(((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onConnectorsClear();
        }
      }
    }
    public virtual void onConnectorsInsertAt(int pos, APlayTest.Client.Connector element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectorsInsertAt received","Client.Designed");
    }
    public void onInternConnectorsInsertAt(int pos, APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsInsertAtEventHandler!=null)
      {
        ConnectorsInsertAtEventHandler(pos, ((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsInsertAtEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsInsertAtEventHandler(pos, ((APlayTest.Client.Connector) (element)), ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onConnectorsInsertAt(pos, ((APlayTest.Client.Connector) (element)));
        }
      }
    }
    public virtual void onConnectorsSetAt(int pos, APlayTest.Client.Connector element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectorsSetAt received","Client.Designed");
    }
    public void onInternConnectorsSetAt(int pos, APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsSetAtEventHandler!=null)
      {
        ConnectorsSetAtEventHandler(pos, ((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsSetAtEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsSetAtEventHandler(pos, ((APlayTest.Client.Connector) (element)), ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onConnectorsSetAt(pos, ((APlayTest.Client.Connector) (element)));
        }
      }
    }
    public virtual void onConnectorsRemoveAt(int pos, APlayTest.Client.Connector element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectorsRemoveAt received","Client.Designed");
    }
    public void onInternConnectorsRemoveAt(int pos, APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsRemoveAtEventHandler!=null)
      {
        ConnectorsRemoveAtEventHandler(pos, ((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticConnectorsRemoveAtEventHandler(pos, ((APlayTest.Client.Connector) (element)), ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onConnectorsRemoveAt(pos, ((APlayTest.Client.Connector) (element)));
        }
      }
    }
    public virtual void onPositionXChange(double NewPositionX__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onPositionXChange received","Client.Designed");
    }
    public void onInternPositionXChange(double NewPositionX__)
    {
      if(PositionXChangeEventHandler!=null)
      {
        PositionXChangeEventHandler(NewPositionX__);
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticPositionXChangeEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticPositionXChangeEventHandler(NewPositionX__, ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onPositionXChange(NewPositionX__);
        }
      }
    }
    public virtual void onPositionYChange(double NewPositionY__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onPositionYChange received","Client.Designed");
    }
    public void onInternPositionYChange(double NewPositionY__)
    {
      if(PositionYChangeEventHandler!=null)
      {
        PositionYChangeEventHandler(NewPositionY__);
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticPositionYChangeEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticPositionYChangeEventHandler(NewPositionY__, ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onPositionYChange(NewPositionY__);
        }
      }
    }
    public virtual void onSizeChange(APlayTest.Client.AplaySize NewSize__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSizeChange received","Client.Designed");
    }
    public void onInternSizeChange(APlay.Generated.Intern.Client.__AplaySize NewSize__)
    {
      if(SizeChangeEventHandler!=null)
      {
        SizeChangeEventHandler(new APlayTest.Client.AplaySize(((float) (NewSize__.Width)), ((float) (NewSize__.Height))));
      }
      else
      {
        if(APlayTest.Client.BlockSymbolSkeleton.StaticSizeChangeEventHandler!=null)
        {
          APlayTest.Client.BlockSymbolSkeleton.StaticSizeChangeEventHandler(new APlayTest.Client.AplaySize(((float) (NewSize__.Width)), ((float) (NewSize__.Height))), ((APlayTest.Client.BlockSymbol) (this)));
        }
        else
        {
          this.onSizeChange(new APlayTest.Client.AplaySize(((float) (NewSize__.Width)), ((float) (NewSize__.Height))));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implBlockSymbol.RequiresInit();
      return (((bool) (retu)));
    }
    public void SetPosition(APlayTest.Client.AplayPoint position__, APlayTest.Client.Client client__)
    {
      implBlockSymbol.SetPosition(new APlay.Generated.Intern.Client.__AplayPoint(position__.X, position__.Y), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlayTest.Client.ConnectionList GetAttachedConnections()
    {
      APlay.Generated.Intern.Client.IConnectionListEvents retu = implBlockSymbol.GetAttachedConnections();
      return (((APlayTest.Client.ConnectionList) (retu)));
    }
    public void GetAttachedConnections(APlayTest.Client.Delegates.void_ConnectionList returnDelegate)
    {
      implBlockSymbol.GetAttachedConnections(delegate(APlay.Common.Protocol.MessageReader reader_){
  APlay.Generated.Intern.Client.ConnectionList __retu__ = new APlay.Generated.Intern.Client.ConnectionList();
  __retu__.readFromStream(reader_);
  returnDelegate(((APlayTest.Client.ConnectionList) ((__retu__==null)?null:__retu__.__GetExternConnection())));
}
);
    }
    public APlay.Generated.Intern.Client.__IBlockSymbolAPImpl getBlockSymbolObject()
    {
      return (implBlockSymbol);
    }
    public void setBlockSymbolObject(APlay.Generated.Intern.Client.__IBlockSymbolAPImpl impl)
    {
      implBlockSymbol = impl;
    }
    public event APlayTest.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_BlockSymbol StaticIdChangeEventHandler;
    public event APlayTest.Client.Delegates.void_ConnectorList ConnectorsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_ConnectorList_BlockSymbol StaticConnectorsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_Connector ConnectorsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_Connector_BlockSymbol StaticConnectorsAddEventHandler;
    public event APlayTest.Client.Delegates.void_Connector ConnectorsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_Connector_BlockSymbol StaticConnectorsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ ConnectorsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_BlockSymbol StaticConnectorsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connector ConnectorsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connector_BlockSymbol StaticConnectorsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connector ConnectorsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connector_BlockSymbol StaticConnectorsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connector ConnectorsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connector_BlockSymbol StaticConnectorsRemoveAtEventHandler;
    public event APlayTest.Client.Delegates.void_float64 PositionXChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_float64_BlockSymbol StaticPositionXChangeEventHandler;
    public event APlayTest.Client.Delegates.void_float64 PositionYChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_float64_BlockSymbol StaticPositionYChangeEventHandler;
    public event APlayTest.Client.Delegates.void_AplaySize SizeChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_AplaySize_BlockSymbol StaticSizeChangeEventHandler;
    private APlay.Generated.Intern.Client.__IBlockSymbolAPImpl implBlockSymbol;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class ClientSkeleton : APlayTest.Client.IClientSkeleton, APlay.Generated.Intern.Client.__IClientAPEvents
  {
    public ClientSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setClientObject(((APlay.Generated.Intern.Client.__IClientAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setClientObject(APlayObjectFactory.CreateClientImpl());
      }
      ((APlay.Generated.Intern.Client.__Client) (this.getClientObject())).ClientHandler = ((APlay.Generated.Intern.Client.__IClientAPEvents) (((APlayTest.Client.ClientSkeleton) (this))));
    }
    public virtual bool IsAdmin
    {
      get
      {
        {
          return (implClient.IsAdmin);
        }
      }
    }
    public virtual String RemoteAddress
    {
      get
      {
        {
          return (implClient.RemoteAddress);
        }
      }
    }
    public virtual ulong APlayClientId
    {
      get
      {
        {
          return (implClient.APlayClientId);
        }
      }
    }
    public virtual int Id
    {
      get
      {
        {
          return (implClient.Id);
        }
      }
    }
    public virtual APlayTest.Client.Project CurrentProject
    {
      get
      {
        {
          return (((APlayTest.Client.Project) (implClient.CurrentProject)));
        }
      }
    }
    public virtual APlayTest.Client.ProjectManager ProjectManager
    {
      get
      {
        {
          return (((APlayTest.Client.ProjectManager) (implClient.ProjectManager)));
        }
      }
    }
    public virtual APlayTest.Client.UndoManager UndoManager
    {
      get
      {
        {
          return (((APlayTest.Client.UndoManager) (implClient.UndoManager)));
        }
      }
    }
    public virtual APlayTest.Client.User CurrentUser
    {
      set
      {
        {
          //User
          implClient.CurrentUser = ((APlay.Generated.Intern.Client.__IUserAPEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Client.User) (implClient.CurrentUser)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implClient.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Client.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Client.ClientSkeleton.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Client.ClientSkeleton.StaticIdChangeEventHandler(NewId__, ((APlayTest.Client.Client) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public virtual void onCurrentProjectChange(APlayTest.Client.Project NewCurrentProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCurrentProjectChange received","Client.Designed");
    }
    public void onInternCurrentProjectChange(APlay.Generated.Intern.Client.__IProjectAPEvents NewCurrentProject__)
    {
      if(CurrentProjectChangeEventHandler!=null)
      {
        CurrentProjectChangeEventHandler(((APlayTest.Client.Project) (NewCurrentProject__)));
      }
      else
      {
        if(APlayTest.Client.ClientSkeleton.StaticCurrentProjectChangeEventHandler!=null)
        {
          APlayTest.Client.ClientSkeleton.StaticCurrentProjectChangeEventHandler(((APlayTest.Client.Project) (NewCurrentProject__)), ((APlayTest.Client.Client) (this)));
        }
        else
        {
          this.onCurrentProjectChange(((APlayTest.Client.Project) (NewCurrentProject__)));
        }
      }
    }
    public virtual void onProjectManagerChange(APlayTest.Client.ProjectManager NewProjectManager__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectManagerChange received","Client.Designed");
    }
    public void onInternProjectManagerChange(APlay.Generated.Intern.Client.__IProjectManagerAPEvents NewProjectManager__)
    {
      if(ProjectManagerChangeEventHandler!=null)
      {
        ProjectManagerChangeEventHandler(((APlayTest.Client.ProjectManager) (NewProjectManager__)));
      }
      else
      {
        if(APlayTest.Client.ClientSkeleton.StaticProjectManagerChangeEventHandler!=null)
        {
          APlayTest.Client.ClientSkeleton.StaticProjectManagerChangeEventHandler(((APlayTest.Client.ProjectManager) (NewProjectManager__)), ((APlayTest.Client.Client) (this)));
        }
        else
        {
          this.onProjectManagerChange(((APlayTest.Client.ProjectManager) (NewProjectManager__)));
        }
      }
    }
    public virtual void onUndoManagerChange(APlayTest.Client.UndoManager NewUndoManager__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onUndoManagerChange received","Client.Designed");
    }
    public void onInternUndoManagerChange(APlay.Generated.Intern.Client.__IUndoManagerAPEvents NewUndoManager__)
    {
      if(UndoManagerChangeEventHandler!=null)
      {
        UndoManagerChangeEventHandler(((APlayTest.Client.UndoManager) (NewUndoManager__)));
      }
      else
      {
        if(APlayTest.Client.ClientSkeleton.StaticUndoManagerChangeEventHandler!=null)
        {
          APlayTest.Client.ClientSkeleton.StaticUndoManagerChangeEventHandler(((APlayTest.Client.UndoManager) (NewUndoManager__)), ((APlayTest.Client.Client) (this)));
        }
        else
        {
          this.onUndoManagerChange(((APlayTest.Client.UndoManager) (NewUndoManager__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implClient.RequiresInit();
      return (((bool) (retu)));
    }
    public bool TryGetId(int id__, APlayTest.Client.Client client__)
    {
      bool retu = implClient.TryGetId(id__, ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
      return (((bool) (retu)));
    }
    public void TryGetId(int id__, APlayTest.Client.Client client__, APlayTest.Client.Delegates.void_boolean returnDelegate)
    {
      implClient.TryGetId(id__, ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)), delegate(APlay.Common.Protocol.MessageReader reader_){
  bool __retu__ = false;
  // boolean Native
  // Not Native
  __retu__ = reader_.read_boolean();
  returnDelegate(((bool) (__retu__)));
}
);
    }
    public APlay.Generated.Intern.Client.__IClientAPImpl getClientObject()
    {
      return (implClient);
    }
    public void setClientObject(APlay.Generated.Intern.Client.__IClientAPImpl impl)
    {
      implClient = impl;
    }
    public event APlayTest.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Client StaticIdChangeEventHandler;
    public event APlayTest.Client.Delegates.void_Project CurrentProjectChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_Client StaticCurrentProjectChangeEventHandler;
    public event APlayTest.Client.Delegates.void_ProjectManager ProjectManagerChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_ProjectManager_Client StaticProjectManagerChangeEventHandler;
    public event APlayTest.Client.Delegates.void_UndoManager UndoManagerChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_UndoManager_Client StaticUndoManagerChangeEventHandler;
    private APlay.Generated.Intern.Client.__IClientAPImpl implClient;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class ConnectionSkeleton : APlayTest.Client.IConnectionSkeleton, APlay.Generated.Intern.Client.__IConnectionAPEvents
  {
    public ConnectionSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setConnectionObject(((APlay.Generated.Intern.Client.__IConnectionAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setConnectionObject(APlayObjectFactory.CreateConnectionImpl());
      }
      ((APlay.Generated.Intern.Client.__Connection) (this.getConnectionObject())).ConnectionHandler = ((APlay.Generated.Intern.Client.__IConnectionAPEvents) (((APlayTest.Client.ConnectionSkeleton) (this))));
    }
    public virtual int Id
    {
      get
      {
        {
          return (implConnection.Id);
        }
      }
    }
    public virtual uint Color
    {
      set
      {
        {
          //uint32
          implConnection.Color = value;
        }
      }
      get
      {
        {
          return (implConnection.Color);
        }
      }
    }
    public virtual APlayTest.Client.Connector From
    {
      set
      {
        {
          //Connector
          implConnection.From = ((APlay.Generated.Intern.Client.__IConnectorAPEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Client.Connector) (implConnection.From)));
        }
      }
    }
    public virtual APlayTest.Client.Connector To
    {
      set
      {
        {
          //Connector
          implConnection.To = ((APlay.Generated.Intern.Client.__IConnectorAPEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Client.Connector) (implConnection.To)));
        }
      }
    }
    public virtual APlayTest.Client.AplayPoint FromPosition
    {
      set
      {
        {
          //AplayPoint
          implConnection.FromPosition = new APlay.Generated.Intern.Client.__AplayPoint(value.X, value.Y);
        }
      }
      get
      {
        {
          return (new APlayTest.Client.AplayPoint(((double) (implConnection.FromPosition.X)), ((double) (implConnection.FromPosition.Y))));
        }
      }
    }
    public virtual APlayTest.Client.AplayPoint ToPosition
    {
      set
      {
        {
          //AplayPoint
          implConnection.ToPosition = new APlay.Generated.Intern.Client.__AplayPoint(value.X, value.Y);
        }
      }
      get
      {
        {
          return (new APlayTest.Client.AplayPoint(((double) (implConnection.ToPosition.X)), ((double) (implConnection.ToPosition.Y))));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implConnection.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Client.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Client.ConnectionSkeleton.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectionSkeleton.StaticIdChangeEventHandler(NewId__, ((APlayTest.Client.Connection) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public virtual void onColorChange(uint NewColor__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onColorChange received","Client.Designed");
    }
    public void onInternColorChange(uint NewColor__)
    {
      if(ColorChangeEventHandler!=null)
      {
        ColorChangeEventHandler(NewColor__);
      }
      else
      {
        if(APlayTest.Client.ConnectionSkeleton.StaticColorChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectionSkeleton.StaticColorChangeEventHandler(NewColor__, ((APlayTest.Client.Connection) (this)));
        }
        else
        {
          this.onColorChange(NewColor__);
        }
      }
    }
    public virtual void onFromChange(APlayTest.Client.Connector NewFrom__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onFromChange received","Client.Designed");
    }
    public void onInternFromChange(APlay.Generated.Intern.Client.__IConnectorAPEvents NewFrom__)
    {
      if(FromChangeEventHandler!=null)
      {
        FromChangeEventHandler(((APlayTest.Client.Connector) (NewFrom__)));
      }
      else
      {
        if(APlayTest.Client.ConnectionSkeleton.StaticFromChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectionSkeleton.StaticFromChangeEventHandler(((APlayTest.Client.Connector) (NewFrom__)), ((APlayTest.Client.Connection) (this)));
        }
        else
        {
          this.onFromChange(((APlayTest.Client.Connector) (NewFrom__)));
        }
      }
    }
    public virtual void onToChange(APlayTest.Client.Connector NewTo__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onToChange received","Client.Designed");
    }
    public void onInternToChange(APlay.Generated.Intern.Client.__IConnectorAPEvents NewTo__)
    {
      if(ToChangeEventHandler!=null)
      {
        ToChangeEventHandler(((APlayTest.Client.Connector) (NewTo__)));
      }
      else
      {
        if(APlayTest.Client.ConnectionSkeleton.StaticToChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectionSkeleton.StaticToChangeEventHandler(((APlayTest.Client.Connector) (NewTo__)), ((APlayTest.Client.Connection) (this)));
        }
        else
        {
          this.onToChange(((APlayTest.Client.Connector) (NewTo__)));
        }
      }
    }
    public virtual void onFromPositionChange(APlayTest.Client.AplayPoint NewFromPosition__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onFromPositionChange received","Client.Designed");
    }
    public void onInternFromPositionChange(APlay.Generated.Intern.Client.__AplayPoint NewFromPosition__)
    {
      if(FromPositionChangeEventHandler!=null)
      {
        FromPositionChangeEventHandler(new APlayTest.Client.AplayPoint(((double) (NewFromPosition__.X)), ((double) (NewFromPosition__.Y))));
      }
      else
      {
        if(APlayTest.Client.ConnectionSkeleton.StaticFromPositionChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectionSkeleton.StaticFromPositionChangeEventHandler(new APlayTest.Client.AplayPoint(((double) (NewFromPosition__.X)), ((double) (NewFromPosition__.Y))), ((APlayTest.Client.Connection) (this)));
        }
        else
        {
          this.onFromPositionChange(new APlayTest.Client.AplayPoint(((double) (NewFromPosition__.X)), ((double) (NewFromPosition__.Y))));
        }
      }
    }
    public virtual void onToPositionChange(APlayTest.Client.AplayPoint NewToPosition__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onToPositionChange received","Client.Designed");
    }
    public void onInternToPositionChange(APlay.Generated.Intern.Client.__AplayPoint NewToPosition__)
    {
      if(ToPositionChangeEventHandler!=null)
      {
        ToPositionChangeEventHandler(new APlayTest.Client.AplayPoint(((double) (NewToPosition__.X)), ((double) (NewToPosition__.Y))));
      }
      else
      {
        if(APlayTest.Client.ConnectionSkeleton.StaticToPositionChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectionSkeleton.StaticToPositionChangeEventHandler(new APlayTest.Client.AplayPoint(((double) (NewToPosition__.X)), ((double) (NewToPosition__.Y))), ((APlayTest.Client.Connection) (this)));
        }
        else
        {
          this.onToPositionChange(new APlayTest.Client.AplayPoint(((double) (NewToPosition__.X)), ((double) (NewToPosition__.Y))));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implConnection.RequiresInit();
      return (((bool) (retu)));
    }
    public void SetFromPosition(APlayTest.Client.AplayPoint position__, APlayTest.Client.Client client__)
    {
      implConnection.SetFromPosition(new APlay.Generated.Intern.Client.__AplayPoint(position__.X, position__.Y), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void SetToPosition(APlayTest.Client.AplayPoint position__, APlayTest.Client.Client client__)
    {
      implConnection.SetToPosition(new APlay.Generated.Intern.Client.__AplayPoint(position__.X, position__.Y), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void SetTo(APlayTest.Client.Connector connector__, APlayTest.Client.Client client__)
    {
      implConnection.SetTo(((APlay.Generated.Intern.Client.__IConnectorAPEvents) (connector__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void SetFrom(APlayTest.Client.Connector connector__, APlayTest.Client.Client client__)
    {
      implConnection.SetFrom(((APlay.Generated.Intern.Client.__IConnectorAPEvents) (connector__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void SetColor(uint Color__, APlayTest.Client.Client client__)
    {
      implConnection.SetColor(Color__, ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlay.Generated.Intern.Client.__IConnectionAPImpl getConnectionObject()
    {
      return (implConnection);
    }
    public void setConnectionObject(APlay.Generated.Intern.Client.__IConnectionAPImpl impl)
    {
      implConnection = impl;
    }
    public event APlayTest.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connection StaticIdChangeEventHandler;
    public event APlayTest.Client.Delegates.void_uint32 ColorChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_uint32_Connection StaticColorChangeEventHandler;
    public event APlayTest.Client.Delegates.void_Connector FromChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Connector_Connection StaticFromChangeEventHandler;
    public event APlayTest.Client.Delegates.void_Connector ToChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Connector_Connection StaticToChangeEventHandler;
    public event APlayTest.Client.Delegates.void_AplayPoint FromPositionChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_AplayPoint_Connection StaticFromPositionChangeEventHandler;
    public event APlayTest.Client.Delegates.void_AplayPoint ToPositionChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_AplayPoint_Connection StaticToPositionChangeEventHandler;
    private APlay.Generated.Intern.Client.__IConnectionAPImpl implConnection;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class ConnectorSkeleton : APlayTest.Client.IConnectorSkeleton, APlay.Generated.Intern.Client.__IConnectorAPEvents
  {
    public ConnectorSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setConnectorObject(((APlay.Generated.Intern.Client.__IConnectorAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setConnectorObject(APlayObjectFactory.CreateConnectorImpl());
      }
      ((APlay.Generated.Intern.Client.__Connector) (this.getConnectorObject())).ConnectorHandler = ((APlay.Generated.Intern.Client.__IConnectorAPEvents) (((APlayTest.Client.ConnectorSkeleton) (this))));
    }
    public virtual int Id
    {
      get
      {
        {
          return (implConnector.Id);
        }
      }
    }
    public virtual APlayTest.Client.ConnectionList Connections
    {
      set
      {
        {
          //Connection
          implConnector.Connections = ((APlay.Generated.Intern.Client.IConnectionListEvents) (value));
        }
      }
      get
      {
        {
          return (((APlayTest.Client.ConnectionList) (implConnector.Connections)));
        }
      }
    }
    public virtual double PositionX
    {
      set
      {
        {
          //float64
          implConnector.PositionX = value;
        }
      }
      get
      {
        {
          return (implConnector.PositionX);
        }
      }
    }
    public virtual double PositionY
    {
      set
      {
        {
          //float64
          implConnector.PositionY = value;
        }
      }
      get
      {
        {
          return (implConnector.PositionY);
        }
      }
    }
    public virtual APlayTest.Client.AplaySize Size
    {
      set
      {
        {
          //AplaySize
          implConnector.Size = new APlay.Generated.Intern.Client.__AplaySize(value.Width, value.Height);
        }
      }
      get
      {
        {
          return (new APlayTest.Client.AplaySize(((float) (implConnector.Size.Width)), ((float) (implConnector.Size.Height))));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implConnector.APlayEntityId);
        }
      }
    }
    public virtual void onIdChange(int NewId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onIdChange received","Client.Designed");
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticIdChangeEventHandler(NewId__, ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onIdChange(NewId__);
        }
      }
    }
    public virtual void onConnectionsReplace(APlayTest.Client.ConnectionList Connections__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionsReplace received","Client.Designed");
    }
    public void onInternConnectionsReplace(APlay.Generated.Intern.Client.IConnectionListEvents Connections__)
    {
      if(ConnectionsReplaceEventHandler!=null)
      {
        ConnectionsReplaceEventHandler(((APlayTest.Client.ConnectionList) (Connections__)));
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticConnectionsReplaceEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticConnectionsReplaceEventHandler(((APlayTest.Client.ConnectionList) (Connections__)), ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onConnectionsReplace(((APlayTest.Client.ConnectionList) (Connections__)));
        }
      }
    }
    public virtual void onConnectionsAdd(APlayTest.Client.Connection element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionsAdd received","Client.Designed");
    }
    public void onInternConnectionsAdd(APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsAddEventHandler!=null)
      {
        ConnectionsAddEventHandler(((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticConnectionsAddEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticConnectionsAddEventHandler(((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onConnectionsAdd(((APlayTest.Client.Connection) (element)));
        }
      }
    }
    public virtual void onConnectionsRemove(APlayTest.Client.Connection element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionsRemove received","Client.Designed");
    }
    public void onInternConnectionsRemove(APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsRemoveEventHandler!=null)
      {
        ConnectionsRemoveEventHandler(((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticConnectionsRemoveEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticConnectionsRemoveEventHandler(((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onConnectionsRemove(((APlayTest.Client.Connection) (element)));
        }
      }
    }
    public virtual void onConnectionsClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionsClear received","Client.Designed");
    }
    public void onInternConnectionsClear()
    {
      if(ConnectionsClearEventHandler!=null)
      {
        ConnectionsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticConnectionsClearEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticConnectionsClearEventHandler(((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onConnectionsClear();
        }
      }
    }
    public virtual void onConnectionsInsertAt(int pos, APlayTest.Client.Connection element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionsInsertAt received","Client.Designed");
    }
    public void onInternConnectionsInsertAt(int pos, APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsInsertAtEventHandler!=null)
      {
        ConnectionsInsertAtEventHandler(pos, ((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticConnectionsInsertAtEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticConnectionsInsertAtEventHandler(pos, ((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onConnectionsInsertAt(pos, ((APlayTest.Client.Connection) (element)));
        }
      }
    }
    public virtual void onConnectionsSetAt(int pos, APlayTest.Client.Connection element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionsSetAt received","Client.Designed");
    }
    public void onInternConnectionsSetAt(int pos, APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsSetAtEventHandler!=null)
      {
        ConnectionsSetAtEventHandler(pos, ((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticConnectionsSetAtEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticConnectionsSetAtEventHandler(pos, ((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onConnectionsSetAt(pos, ((APlayTest.Client.Connection) (element)));
        }
      }
    }
    public virtual void onConnectionsRemoveAt(int pos, APlayTest.Client.Connection element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionsRemoveAt received","Client.Designed");
    }
    public void onInternConnectionsRemoveAt(int pos, APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsRemoveAtEventHandler!=null)
      {
        ConnectionsRemoveAtEventHandler(pos, ((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticConnectionsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticConnectionsRemoveAtEventHandler(pos, ((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onConnectionsRemoveAt(pos, ((APlayTest.Client.Connection) (element)));
        }
      }
    }
    public virtual void onPositionXChange(double NewPositionX__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onPositionXChange received","Client.Designed");
    }
    public void onInternPositionXChange(double NewPositionX__)
    {
      if(PositionXChangeEventHandler!=null)
      {
        PositionXChangeEventHandler(NewPositionX__);
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticPositionXChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticPositionXChangeEventHandler(NewPositionX__, ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onPositionXChange(NewPositionX__);
        }
      }
    }
    public virtual void onPositionYChange(double NewPositionY__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onPositionYChange received","Client.Designed");
    }
    public void onInternPositionYChange(double NewPositionY__)
    {
      if(PositionYChangeEventHandler!=null)
      {
        PositionYChangeEventHandler(NewPositionY__);
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticPositionYChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticPositionYChangeEventHandler(NewPositionY__, ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onPositionYChange(NewPositionY__);
        }
      }
    }
    public virtual void onSizeChange(APlayTest.Client.AplaySize NewSize__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSizeChange received","Client.Designed");
    }
    public void onInternSizeChange(APlay.Generated.Intern.Client.__AplaySize NewSize__)
    {
      if(SizeChangeEventHandler!=null)
      {
        SizeChangeEventHandler(new APlayTest.Client.AplaySize(((float) (NewSize__.Width)), ((float) (NewSize__.Height))));
      }
      else
      {
        if(APlayTest.Client.ConnectorSkeleton.StaticSizeChangeEventHandler!=null)
        {
          APlayTest.Client.ConnectorSkeleton.StaticSizeChangeEventHandler(new APlayTest.Client.AplaySize(((float) (NewSize__.Width)), ((float) (NewSize__.Height))), ((APlayTest.Client.Connector) (this)));
        }
        else
        {
          this.onSizeChange(new APlayTest.Client.AplaySize(((float) (NewSize__.Width)), ((float) (NewSize__.Height))));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implConnector.RequiresInit();
      return (((bool) (retu)));
    }
    public void SetPosition(APlayTest.Client.AplayPoint position__, APlayTest.Client.Client client__)
    {
      implConnector.SetPosition(new APlay.Generated.Intern.Client.__AplayPoint(position__.X, position__.Y), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlay.Generated.Intern.Client.__IConnectorAPImpl getConnectorObject()
    {
      return (implConnector);
    }
    public void setConnectorObject(APlay.Generated.Intern.Client.__IConnectorAPImpl impl)
    {
      implConnector = impl;
    }
    public event APlayTest.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connector StaticIdChangeEventHandler;
    public event APlayTest.Client.Delegates.void_ConnectionList ConnectionsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_ConnectionList_Connector StaticConnectionsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_Connection ConnectionsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_Connection_Connector StaticConnectionsAddEventHandler;
    public event APlayTest.Client.Delegates.void_Connection ConnectionsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_Connection_Connector StaticConnectionsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ ConnectionsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_Connector StaticConnectionsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connection ConnectionsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connection_Connector StaticConnectionsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connection ConnectionsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connection_Connector StaticConnectionsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connection ConnectionsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connection_Connector StaticConnectionsRemoveAtEventHandler;
    public event APlayTest.Client.Delegates.void_float64 PositionXChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_float64_Connector StaticPositionXChangeEventHandler;
    public event APlayTest.Client.Delegates.void_float64 PositionYChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_float64_Connector StaticPositionYChangeEventHandler;
    public event APlayTest.Client.Delegates.void_AplaySize SizeChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_AplaySize_Connector StaticSizeChangeEventHandler;
    private APlay.Generated.Intern.Client.__IConnectorAPImpl implConnector;
  }
  
}
namespace APlayTest.Client
{
  public partial class Project : APlayTest.Client.IProjectSkeleton, APlay.Generated.Intern.Client.__IProjectAPEvents
  {
    public Project()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setProjectObject(((APlay.Generated.Intern.Client.__IProjectAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setProjectObject(APlayObjectFactory.CreateProjectImpl());
      }
      ((APlay.Generated.Intern.Client.__Project) (this.getProjectObject())).ProjectHandler = ((APlay.Generated.Intern.Client.__IProjectAPEvents) (((APlayTest.Client.Project) (this))));
    }
    public virtual APlayTest.Client.IProjectEvents ProjectHandler
    {
      set
      {
        {
          handler_ = value;
        }
      }
      get
      {
        {
          return (handler_);
        }
      }
    }
    public virtual int Id
    {
      get
      {
        {
          return (implProject.Id);
        }
      }
    }
    public virtual APlayTest.Client.ProjectDetail ProjectDetail
    {
      get
      {
        {
          return (new APlayTest.Client.ProjectDetail(((String) (implProject.ProjectDetail.Name)), ((String) (implProject.ProjectDetail.CreatedBy)), ((DateTime) (implProject.ProjectDetail.CreationDate))));
        }
      }
    }
    public virtual APlayTest.Client.SheetManager SheetManager
    {
      get
      {
        {
          return (((APlayTest.Client.SheetManager) (implProject.SheetManager)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implProject.APlayEntityId);
        }
      }
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Client.Project.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Client.Project.StaticIdChangeEventHandler(NewId__, ((APlayTest.Client.Project) (this)));
        }
        else
        {
          if(ProjectHandler!=null)
          {
            ProjectHandler.onIdChange(NewId__);
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __IProjectAPEvents.onIdChange","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternProjectDetailChange(APlay.Generated.Intern.Client.__ProjectDetail NewProjectDetail__)
    {
      if(ProjectDetailChangeEventHandler!=null)
      {
        ProjectDetailChangeEventHandler(new APlayTest.Client.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))));
      }
      else
      {
        if(APlayTest.Client.Project.StaticProjectDetailChangeEventHandler!=null)
        {
          APlayTest.Client.Project.StaticProjectDetailChangeEventHandler(new APlayTest.Client.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))), ((APlayTest.Client.Project) (this)));
        }
        else
        {
          if(ProjectHandler!=null)
          {
            ProjectHandler.onProjectDetailChange(new APlayTest.Client.ProjectDetail(((String) (NewProjectDetail__.Name)), ((String) (NewProjectDetail__.CreatedBy)), ((DateTime) (NewProjectDetail__.CreationDate))));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __IProjectAPEvents.onProjectDetailChange","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternSheetManagerChange(APlay.Generated.Intern.Client.__ISheetManagerAPEvents NewSheetManager__)
    {
      if(SheetManagerChangeEventHandler!=null)
      {
        SheetManagerChangeEventHandler(((APlayTest.Client.SheetManager) (NewSheetManager__)));
      }
      else
      {
        if(APlayTest.Client.Project.StaticSheetManagerChangeEventHandler!=null)
        {
          APlayTest.Client.Project.StaticSheetManagerChangeEventHandler(((APlayTest.Client.SheetManager) (NewSheetManager__)), ((APlayTest.Client.Project) (this)));
        }
        else
        {
          if(ProjectHandler!=null)
          {
            ProjectHandler.onSheetManagerChange(((APlayTest.Client.SheetManager) (NewSheetManager__)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __IProjectAPEvents.onSheetManagerChange","Client.Designed");
            }
          }
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implProject.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__IProjectAPImpl getProjectObject()
    {
      return (implProject);
    }
    public void setProjectObject(APlay.Generated.Intern.Client.__IProjectAPImpl impl)
    {
      implProject = impl;
    }
    private APlayTest.Client.IProjectEvents handler_;
    public event APlayTest.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Project StaticIdChangeEventHandler;
    public event APlayTest.Client.Delegates.void_ProjectDetail ProjectDetailChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_ProjectDetail_Project StaticProjectDetailChangeEventHandler;
    public event APlayTest.Client.Delegates.void_SheetManager SheetManagerChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_SheetManager_Project StaticSheetManagerChangeEventHandler;
    private APlay.Generated.Intern.Client.__IProjectAPImpl implProject;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class ProjectManagerSkeleton : APlayTest.Client.IProjectManagerSkeleton, APlay.Generated.Intern.Client.__IProjectManagerAPEvents
  {
    public ProjectManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setProjectManagerObject(((APlay.Generated.Intern.Client.__IProjectManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setProjectManagerObject(APlayObjectFactory.CreateProjectManagerImpl());
      }
      ((APlay.Generated.Intern.Client.__ProjectManager) (this.getProjectManagerObject())).ProjectManagerHandler = ((APlay.Generated.Intern.Client.__IProjectManagerAPEvents) (((APlayTest.Client.ProjectManagerSkeleton) (this))));
    }
    public virtual bool CanJoinProject
    {
      get
      {
        {
          return (implProjectManager.CanJoinProject);
        }
      }
    }
    public virtual bool CanCreateProject
    {
      get
      {
        {
          return (implProjectManager.CanCreateProject);
        }
      }
    }
    public virtual APlayTest.Client.ProjectList Projects
    {
      get
      {
        {
          return (((APlayTest.Client.ProjectList) (implProjectManager.Projects)));
        }
      }
    }
    public virtual APlayTest.Client.Project SelectedProject
    {
      get
      {
        {
          return (((APlayTest.Client.Project) (implProjectManager.SelectedProject)));
        }
      }
    }
    public virtual APlayTest.Client.Client DataClient
    {
      get
      {
        {
          return (((APlayTest.Client.Client) (implProjectManager.DataClient)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implProjectManager.APlayEntityId);
        }
      }
    }
    public virtual void onCanJoinProjectChange(bool NewCanJoinProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanJoinProjectChange received","Client.Designed");
    }
    public void onInternCanJoinProjectChange(bool NewCanJoinProject__)
    {
      if(CanJoinProjectChangeEventHandler!=null)
      {
        CanJoinProjectChangeEventHandler(NewCanJoinProject__);
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticCanJoinProjectChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticCanJoinProjectChangeEventHandler(NewCanJoinProject__, ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onCanJoinProjectChange(NewCanJoinProject__);
        }
      }
    }
    public virtual void onCanCreateProjectChange(bool NewCanCreateProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanCreateProjectChange received","Client.Designed");
    }
    public void onInternCanCreateProjectChange(bool NewCanCreateProject__)
    {
      if(CanCreateProjectChangeEventHandler!=null)
      {
        CanCreateProjectChangeEventHandler(NewCanCreateProject__);
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticCanCreateProjectChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticCanCreateProjectChangeEventHandler(NewCanCreateProject__, ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onCanCreateProjectChange(NewCanCreateProject__);
        }
      }
    }
    public virtual void onProjectsReplace(APlayTest.Client.ProjectList Projects__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsReplace received","Client.Designed");
    }
    public void onInternProjectsReplace(APlay.Generated.Intern.Client.IProjectListEvents Projects__)
    {
      if(ProjectsReplaceEventHandler!=null)
      {
        ProjectsReplaceEventHandler(((APlayTest.Client.ProjectList) (Projects__)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsReplaceEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsReplaceEventHandler(((APlayTest.Client.ProjectList) (Projects__)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsReplace(((APlayTest.Client.ProjectList) (Projects__)));
        }
      }
    }
    public virtual void onProjectsAdd(APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsAdd received","Client.Designed");
    }
    public void onInternProjectsAdd(APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsAddEventHandler!=null)
      {
        ProjectsAddEventHandler(((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsAddEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsAddEventHandler(((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsAdd(((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsRemove(APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsRemove received","Client.Designed");
    }
    public void onInternProjectsRemove(APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsRemoveEventHandler!=null)
      {
        ProjectsRemoveEventHandler(((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsRemoveEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsRemoveEventHandler(((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsRemove(((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsClear received","Client.Designed");
    }
    public void onInternProjectsClear()
    {
      if(ProjectsClearEventHandler!=null)
      {
        ProjectsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsClearEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsClearEventHandler(((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsClear();
        }
      }
    }
    public virtual void onProjectsInsertAt(int pos, APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsInsertAt received","Client.Designed");
    }
    public void onInternProjectsInsertAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsInsertAtEventHandler!=null)
      {
        ProjectsInsertAtEventHandler(pos, ((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsInsertAtEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsInsertAtEventHandler(pos, ((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsInsertAt(pos, ((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsSetAt(int pos, APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsSetAt received","Client.Designed");
    }
    public void onInternProjectsSetAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsSetAtEventHandler!=null)
      {
        ProjectsSetAtEventHandler(pos, ((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsSetAtEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsSetAtEventHandler(pos, ((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsSetAt(pos, ((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onProjectsRemoveAt(int pos, APlayTest.Client.Project element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onProjectsRemoveAt received","Client.Designed");
    }
    public void onInternProjectsRemoveAt(int pos, APlay.Generated.Intern.Client.__IProjectAPEvents element)
    {
      if(ProjectsRemoveAtEventHandler!=null)
      {
        ProjectsRemoveAtEventHandler(pos, ((APlayTest.Client.Project) (element)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticProjectsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticProjectsRemoveAtEventHandler(pos, ((APlayTest.Client.Project) (element)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onProjectsRemoveAt(pos, ((APlayTest.Client.Project) (element)));
        }
      }
    }
    public virtual void onSelectedProjectChange(APlayTest.Client.Project NewSelectedProject__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onSelectedProjectChange received","Client.Designed");
    }
    public void onInternSelectedProjectChange(APlay.Generated.Intern.Client.__IProjectAPEvents NewSelectedProject__)
    {
      if(SelectedProjectChangeEventHandler!=null)
      {
        SelectedProjectChangeEventHandler(((APlayTest.Client.Project) (NewSelectedProject__)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticSelectedProjectChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticSelectedProjectChangeEventHandler(((APlayTest.Client.Project) (NewSelectedProject__)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onSelectedProjectChange(((APlayTest.Client.Project) (NewSelectedProject__)));
        }
      }
    }
    public virtual void onDataClientChange(APlayTest.Client.Client NewDataClient__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onDataClientChange received","Client.Designed");
    }
    public void onInternDataClientChange(APlay.Generated.Intern.Client.__IClientAPEvents NewDataClient__)
    {
      if(DataClientChangeEventHandler!=null)
      {
        DataClientChangeEventHandler(((APlayTest.Client.Client) (NewDataClient__)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticDataClientChangeEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticDataClientChangeEventHandler(((APlayTest.Client.Client) (NewDataClient__)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onDataClientChange(((APlayTest.Client.Client) (NewDataClient__)));
        }
      }
    }
    public abstract void onJoinedProject(APlayTest.Client.Project project__);
    public void onInternJoinedProject(APlay.Generated.Intern.Client.__IProjectAPEvents project__)
    {
      if(JoinedProjectEventHandler!=null)
      {
        JoinedProjectEventHandler(((APlayTest.Client.Project) (project__)));
      }
      else
      {
        if(APlayTest.Client.ProjectManagerSkeleton.StaticJoinedProjectEventHandler!=null)
        {
          APlayTest.Client.ProjectManagerSkeleton.StaticJoinedProjectEventHandler(((APlayTest.Client.Project) (project__)), ((APlayTest.Client.ProjectManager) (this)));
        }
        else
        {
          this.onJoinedProject(((APlayTest.Client.Project) (project__)));
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implProjectManager.RequiresInit();
      return (((bool) (retu)));
    }
    public void JoinProject(APlayTest.Client.Client sender__, int projectId__)
    {
      implProjectManager.JoinProject(((APlay.Generated.Intern.Client.__IClientAPEvents) (sender__)), projectId__);
    }
    public void CreateProject(APlayTest.Client.Client sender__, String name__)
    {
      implProjectManager.CreateProject(((APlay.Generated.Intern.Client.__IClientAPEvents) (sender__)), name__);
    }
    public void SearchProjects(String searchString__)
    {
      implProjectManager.SearchProjects(searchString__);
    }
    public void SelectProject(int projectId__)
    {
      implProjectManager.SelectProject(projectId__);
    }
    public APlay.Generated.Intern.Client.__IProjectManagerAPImpl getProjectManagerObject()
    {
      return (implProjectManager);
    }
    public void setProjectManagerObject(APlay.Generated.Intern.Client.__IProjectManagerAPImpl impl)
    {
      implProjectManager = impl;
    }
    public event APlayTest.Client.Delegates.void_boolean CanJoinProjectChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_boolean_ProjectManager StaticCanJoinProjectChangeEventHandler;
    public event APlayTest.Client.Delegates.void_boolean CanCreateProjectChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_boolean_ProjectManager StaticCanCreateProjectChangeEventHandler;
    public event APlayTest.Client.Delegates.void_ProjectList ProjectsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_ProjectList_ProjectManager StaticProjectsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_Project ProjectsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_ProjectManager StaticProjectsAddEventHandler;
    public event APlayTest.Client.Delegates.void_Project ProjectsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_ProjectManager StaticProjectsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ ProjectsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_ProjectManager StaticProjectsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Project ProjectsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Project_ProjectManager StaticProjectsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Project ProjectsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Project_ProjectManager StaticProjectsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Project ProjectsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Project_ProjectManager StaticProjectsRemoveAtEventHandler;
    public event APlayTest.Client.Delegates.void_Project SelectedProjectChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_ProjectManager StaticSelectedProjectChangeEventHandler;
    public event APlayTest.Client.Delegates.void_Client DataClientChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Client_ProjectManager StaticDataClientChangeEventHandler;
    public event APlayTest.Client.Delegates.void_Project JoinedProjectEventHandler;
    static public event APlayTest.Client.Delegates.void_Project_ProjectManager StaticJoinedProjectEventHandler;
    private APlay.Generated.Intern.Client.__IProjectManagerAPImpl implProjectManager;
  }
  
}
namespace APlayTest.Client
{
  public partial class Sheet : APlayTest.Client.ISheetSkeleton, APlay.Generated.Intern.Client.__ISheetAPEvents
  {
    public Sheet()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setSheetObject(((APlay.Generated.Intern.Client.__ISheetAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setSheetObject(APlayObjectFactory.CreateSheetImpl());
      }
      ((APlay.Generated.Intern.Client.__Sheet) (this.getSheetObject())).SheetHandler = ((APlay.Generated.Intern.Client.__ISheetAPEvents) (((APlayTest.Client.Sheet) (this))));
    }
    public virtual APlayTest.Client.ISheetEvents SheetHandler
    {
      set
      {
        {
          handler_ = value;
        }
      }
      get
      {
        {
          return (handler_);
        }
      }
    }
    public virtual String Name
    {
      get
      {
        {
          return (implSheet.Name);
        }
      }
    }
    public virtual APlayTest.Client.BlockSymbolList BlockSymbols
    {
      get
      {
        {
          return (((APlayTest.Client.BlockSymbolList) (implSheet.BlockSymbols)));
        }
      }
    }
    public virtual APlayTest.Client.ConnectionList Connections
    {
      get
      {
        {
          return (((APlayTest.Client.ConnectionList) (implSheet.Connections)));
        }
      }
    }
    public virtual APlayTest.Client.ConnectorList Connectors
    {
      get
      {
        {
          return (((APlayTest.Client.ConnectorList) (implSheet.Connectors)));
        }
      }
    }
    public virtual int Id
    {
      get
      {
        {
          return (implSheet.Id);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implSheet.APlayEntityId);
        }
      }
    }
    public void onInternNameChange(String NewName__)
    {
      if(NameChangeEventHandler!=null)
      {
        NameChangeEventHandler(NewName__);
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticNameChangeEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticNameChangeEventHandler(NewName__, ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onNameChange(NewName__);
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onNameChange","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternBlockSymbolsReplace(APlay.Generated.Intern.Client.IBlockSymbolListEvents BlockSymbols__)
    {
      if(BlockSymbolsReplaceEventHandler!=null)
      {
        BlockSymbolsReplaceEventHandler(((APlayTest.Client.BlockSymbolList) (BlockSymbols__)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticBlockSymbolsReplaceEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticBlockSymbolsReplaceEventHandler(((APlayTest.Client.BlockSymbolList) (BlockSymbols__)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onBlockSymbolsReplace(((APlayTest.Client.BlockSymbolList) (BlockSymbols__)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onBlockSymbolsReplace","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternBlockSymbolsAdd(APlay.Generated.Intern.Client.__IBlockSymbolAPEvents element)
    {
      if(BlockSymbolsAddEventHandler!=null)
      {
        BlockSymbolsAddEventHandler(((APlayTest.Client.BlockSymbol) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticBlockSymbolsAddEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticBlockSymbolsAddEventHandler(((APlayTest.Client.BlockSymbol) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onBlockSymbolsAdd(((APlayTest.Client.BlockSymbol) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onBlockSymbolsAdd","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternBlockSymbolsRemove(APlay.Generated.Intern.Client.__IBlockSymbolAPEvents element)
    {
      if(BlockSymbolsRemoveEventHandler!=null)
      {
        BlockSymbolsRemoveEventHandler(((APlayTest.Client.BlockSymbol) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticBlockSymbolsRemoveEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticBlockSymbolsRemoveEventHandler(((APlayTest.Client.BlockSymbol) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onBlockSymbolsRemove(((APlayTest.Client.BlockSymbol) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onBlockSymbolsRemove","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternBlockSymbolsClear()
    {
      if(BlockSymbolsClearEventHandler!=null)
      {
        BlockSymbolsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticBlockSymbolsClearEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticBlockSymbolsClearEventHandler(((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onBlockSymbolsClear();
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onBlockSymbolsClear","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternBlockSymbolsInsertAt(int pos, APlay.Generated.Intern.Client.__IBlockSymbolAPEvents element)
    {
      if(BlockSymbolsInsertAtEventHandler!=null)
      {
        BlockSymbolsInsertAtEventHandler(pos, ((APlayTest.Client.BlockSymbol) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticBlockSymbolsInsertAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticBlockSymbolsInsertAtEventHandler(pos, ((APlayTest.Client.BlockSymbol) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onBlockSymbolsInsertAt(pos, ((APlayTest.Client.BlockSymbol) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onBlockSymbolsInsertAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternBlockSymbolsSetAt(int pos, APlay.Generated.Intern.Client.__IBlockSymbolAPEvents element)
    {
      if(BlockSymbolsSetAtEventHandler!=null)
      {
        BlockSymbolsSetAtEventHandler(pos, ((APlayTest.Client.BlockSymbol) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticBlockSymbolsSetAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticBlockSymbolsSetAtEventHandler(pos, ((APlayTest.Client.BlockSymbol) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onBlockSymbolsSetAt(pos, ((APlayTest.Client.BlockSymbol) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onBlockSymbolsSetAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternBlockSymbolsRemoveAt(int pos, APlay.Generated.Intern.Client.__IBlockSymbolAPEvents element)
    {
      if(BlockSymbolsRemoveAtEventHandler!=null)
      {
        BlockSymbolsRemoveAtEventHandler(pos, ((APlayTest.Client.BlockSymbol) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticBlockSymbolsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticBlockSymbolsRemoveAtEventHandler(pos, ((APlayTest.Client.BlockSymbol) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onBlockSymbolsRemoveAt(pos, ((APlayTest.Client.BlockSymbol) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onBlockSymbolsRemoveAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectionsReplace(APlay.Generated.Intern.Client.IConnectionListEvents Connections__)
    {
      if(ConnectionsReplaceEventHandler!=null)
      {
        ConnectionsReplaceEventHandler(((APlayTest.Client.ConnectionList) (Connections__)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectionsReplaceEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectionsReplaceEventHandler(((APlayTest.Client.ConnectionList) (Connections__)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectionsReplace(((APlayTest.Client.ConnectionList) (Connections__)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectionsReplace","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectionsAdd(APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsAddEventHandler!=null)
      {
        ConnectionsAddEventHandler(((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectionsAddEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectionsAddEventHandler(((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectionsAdd(((APlayTest.Client.Connection) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectionsAdd","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectionsRemove(APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsRemoveEventHandler!=null)
      {
        ConnectionsRemoveEventHandler(((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectionsRemoveEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectionsRemoveEventHandler(((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectionsRemove(((APlayTest.Client.Connection) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectionsRemove","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectionsClear()
    {
      if(ConnectionsClearEventHandler!=null)
      {
        ConnectionsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectionsClearEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectionsClearEventHandler(((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectionsClear();
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectionsClear","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectionsInsertAt(int pos, APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsInsertAtEventHandler!=null)
      {
        ConnectionsInsertAtEventHandler(pos, ((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectionsInsertAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectionsInsertAtEventHandler(pos, ((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectionsInsertAt(pos, ((APlayTest.Client.Connection) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectionsInsertAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectionsSetAt(int pos, APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsSetAtEventHandler!=null)
      {
        ConnectionsSetAtEventHandler(pos, ((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectionsSetAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectionsSetAtEventHandler(pos, ((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectionsSetAt(pos, ((APlayTest.Client.Connection) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectionsSetAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectionsRemoveAt(int pos, APlay.Generated.Intern.Client.__IConnectionAPEvents element)
    {
      if(ConnectionsRemoveAtEventHandler!=null)
      {
        ConnectionsRemoveAtEventHandler(pos, ((APlayTest.Client.Connection) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectionsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectionsRemoveAtEventHandler(pos, ((APlayTest.Client.Connection) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectionsRemoveAt(pos, ((APlayTest.Client.Connection) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectionsRemoveAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectorsReplace(APlay.Generated.Intern.Client.IConnectorListEvents Connectors__)
    {
      if(ConnectorsReplaceEventHandler!=null)
      {
        ConnectorsReplaceEventHandler(((APlayTest.Client.ConnectorList) (Connectors__)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectorsReplaceEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectorsReplaceEventHandler(((APlayTest.Client.ConnectorList) (Connectors__)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectorsReplace(((APlayTest.Client.ConnectorList) (Connectors__)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectorsReplace","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectorsAdd(APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsAddEventHandler!=null)
      {
        ConnectorsAddEventHandler(((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectorsAddEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectorsAddEventHandler(((APlayTest.Client.Connector) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectorsAdd(((APlayTest.Client.Connector) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectorsAdd","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectorsRemove(APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsRemoveEventHandler!=null)
      {
        ConnectorsRemoveEventHandler(((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectorsRemoveEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectorsRemoveEventHandler(((APlayTest.Client.Connector) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectorsRemove(((APlayTest.Client.Connector) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectorsRemove","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectorsClear()
    {
      if(ConnectorsClearEventHandler!=null)
      {
        ConnectorsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectorsClearEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectorsClearEventHandler(((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectorsClear();
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectorsClear","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectorsInsertAt(int pos, APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsInsertAtEventHandler!=null)
      {
        ConnectorsInsertAtEventHandler(pos, ((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectorsInsertAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectorsInsertAtEventHandler(pos, ((APlayTest.Client.Connector) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectorsInsertAt(pos, ((APlayTest.Client.Connector) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectorsInsertAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectorsSetAt(int pos, APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsSetAtEventHandler!=null)
      {
        ConnectorsSetAtEventHandler(pos, ((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectorsSetAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectorsSetAtEventHandler(pos, ((APlayTest.Client.Connector) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectorsSetAt(pos, ((APlayTest.Client.Connector) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectorsSetAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternConnectorsRemoveAt(int pos, APlay.Generated.Intern.Client.__IConnectorAPEvents element)
    {
      if(ConnectorsRemoveAtEventHandler!=null)
      {
        ConnectorsRemoveAtEventHandler(pos, ((APlayTest.Client.Connector) (element)));
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticConnectorsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticConnectorsRemoveAtEventHandler(pos, ((APlayTest.Client.Connector) (element)), ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onConnectorsRemoveAt(pos, ((APlayTest.Client.Connector) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onConnectorsRemoveAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternIdChange(int NewId__)
    {
      if(IdChangeEventHandler!=null)
      {
        IdChangeEventHandler(NewId__);
      }
      else
      {
        if(APlayTest.Client.Sheet.StaticIdChangeEventHandler!=null)
        {
          APlayTest.Client.Sheet.StaticIdChangeEventHandler(NewId__, ((APlayTest.Client.Sheet) (this)));
        }
        else
        {
          if(SheetHandler!=null)
          {
            SheetHandler.onIdChange(NewId__);
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetAPEvents.onIdChange","Client.Designed");
            }
          }
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implSheet.RequiresInit();
      return (((bool) (retu)));
    }
    public void SetName(String name__, APlayTest.Client.Client client__)
    {
      implSheet.SetName(name__, ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlayTest.Client.BlockSymbol CreateBlockSymbol()
    {
      APlay.Generated.Intern.Client.__IBlockSymbolAPEvents retu = implSheet.CreateBlockSymbol();
      return (((APlayTest.Client.BlockSymbol) (retu)));
    }
    public void CreateBlockSymbol(APlayTest.Client.Delegates.void_BlockSymbol returnDelegate)
    {
      implSheet.CreateBlockSymbol(delegate(APlay.Common.Protocol.MessageReader reader_){
  APlay.Generated.Intern.Client.__BlockSymbol __retu__ = new APlay.Generated.Intern.Client.__BlockSymbol();
  __retu__ = APlay.Generated.Intern.Client.__BlockSymbol.readReferenceFromStream(reader_);
  returnDelegate(((APlayTest.Client.BlockSymbol) ((__retu__==null)?null:__retu__.__GetExternBlockSymbol())));
}
);
    }
    public void Add(APlayTest.Client.BlockSymbol blockSymbol__, APlayTest.Client.Client client__)
    {
      implSheet.Add(((APlay.Generated.Intern.Client.__IBlockSymbolAPEvents) (blockSymbol__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void Remove(APlayTest.Client.BlockSymbol blockSymbol__, APlayTest.Client.Client client__)
    {
      implSheet.Remove(((APlay.Generated.Intern.Client.__IBlockSymbolAPEvents) (blockSymbol__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlayTest.Client.Connection CreateConnection()
    {
      APlay.Generated.Intern.Client.__IConnectionAPEvents retu = implSheet.CreateConnection();
      return (((APlayTest.Client.Connection) (retu)));
    }
    public void CreateConnection(APlayTest.Client.Delegates.void_Connection returnDelegate)
    {
      implSheet.CreateConnection(delegate(APlay.Common.Protocol.MessageReader reader_){
  APlay.Generated.Intern.Client.__Connection __retu__ = new APlay.Generated.Intern.Client.__Connection();
  __retu__ = APlay.Generated.Intern.Client.__Connection.readReferenceFromStream(reader_);
  returnDelegate(((APlayTest.Client.Connection) ((__retu__==null)?null:__retu__.__GetExternConnection())));
}
);
    }
    public void AddConnection(APlayTest.Client.Connection connection__, APlayTest.Client.Client client__)
    {
      implSheet.AddConnection(((APlay.Generated.Intern.Client.__IConnectionAPEvents) (connection__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void RemoveConnection(APlayTest.Client.Connection connection__, APlayTest.Client.Client client__)
    {
      implSheet.RemoveConnection(((APlay.Generated.Intern.Client.__IConnectionAPEvents) (connection__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlayTest.Client.Connector CreateConnector()
    {
      APlay.Generated.Intern.Client.__IConnectorAPEvents retu = implSheet.CreateConnector();
      return (((APlayTest.Client.Connector) (retu)));
    }
    public void CreateConnector(APlayTest.Client.Delegates.void_Connector returnDelegate)
    {
      implSheet.CreateConnector(delegate(APlay.Common.Protocol.MessageReader reader_){
  APlay.Generated.Intern.Client.__Connector __retu__ = new APlay.Generated.Intern.Client.__Connector();
  __retu__ = APlay.Generated.Intern.Client.__Connector.readReferenceFromStream(reader_);
  returnDelegate(((APlayTest.Client.Connector) ((__retu__==null)?null:__retu__.__GetExternConnector())));
}
);
    }
    public void AddConnector(APlayTest.Client.Connector connection__, APlayTest.Client.Client client__)
    {
      implSheet.AddConnector(((APlay.Generated.Intern.Client.__IConnectorAPEvents) (connection__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public void RemoveConnector(APlayTest.Client.Connector connection__, APlayTest.Client.Client client__)
    {
      implSheet.RemoveConnector(((APlay.Generated.Intern.Client.__IConnectorAPEvents) (connection__)), ((APlay.Generated.Intern.Client.__IClientAPEvents) (client__)));
    }
    public APlay.Generated.Intern.Client.__ISheetAPImpl getSheetObject()
    {
      return (implSheet);
    }
    public void setSheetObject(APlay.Generated.Intern.Client.__ISheetAPImpl impl)
    {
      implSheet = impl;
    }
    private APlayTest.Client.ISheetEvents handler_;
    public event APlayTest.Client.Delegates.void_WString NameChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_WString_Sheet StaticNameChangeEventHandler;
    public event APlayTest.Client.Delegates.void_BlockSymbolList BlockSymbolsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_BlockSymbolList_Sheet StaticBlockSymbolsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_BlockSymbol BlockSymbolsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_BlockSymbol_Sheet StaticBlockSymbolsAddEventHandler;
    public event APlayTest.Client.Delegates.void_BlockSymbol BlockSymbolsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_BlockSymbol_Sheet StaticBlockSymbolsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ BlockSymbolsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_Sheet StaticBlockSymbolsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_BlockSymbol BlockSymbolsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_BlockSymbol_Sheet StaticBlockSymbolsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_BlockSymbol BlockSymbolsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_BlockSymbol_Sheet StaticBlockSymbolsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_BlockSymbol BlockSymbolsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_BlockSymbol_Sheet StaticBlockSymbolsRemoveAtEventHandler;
    public event APlayTest.Client.Delegates.void_ConnectionList ConnectionsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_ConnectionList_Sheet StaticConnectionsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_Connection ConnectionsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_Connection_Sheet StaticConnectionsAddEventHandler;
    public event APlayTest.Client.Delegates.void_Connection ConnectionsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_Connection_Sheet StaticConnectionsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ ConnectionsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_Sheet StaticConnectionsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connection ConnectionsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connection_Sheet StaticConnectionsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connection ConnectionsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connection_Sheet StaticConnectionsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connection ConnectionsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connection_Sheet StaticConnectionsRemoveAtEventHandler;
    public event APlayTest.Client.Delegates.void_ConnectorList ConnectorsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_ConnectorList_Sheet StaticConnectorsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_Connector ConnectorsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_Connector_Sheet StaticConnectorsAddEventHandler;
    public event APlayTest.Client.Delegates.void_Connector ConnectorsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_Connector_Sheet StaticConnectorsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ ConnectorsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_Sheet StaticConnectorsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connector ConnectorsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connector_Sheet StaticConnectorsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connector ConnectorsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connector_Sheet StaticConnectorsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Connector ConnectorsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Connector_Sheet StaticConnectorsRemoveAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32 IdChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Sheet StaticIdChangeEventHandler;
    private APlay.Generated.Intern.Client.__ISheetAPImpl implSheet;
  }
  
}
namespace APlayTest.Client
{
  public partial class SheetManager : APlayTest.Client.ISheetManagerSkeleton, APlay.Generated.Intern.Client.__ISheetManagerAPEvents
  {
    public SheetManager()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setSheetManagerObject(((APlay.Generated.Intern.Client.__ISheetManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setSheetManagerObject(APlayObjectFactory.CreateSheetManagerImpl());
      }
      ((APlay.Generated.Intern.Client.__SheetManager) (this.getSheetManagerObject())).SheetManagerHandler = ((APlay.Generated.Intern.Client.__ISheetManagerAPEvents) (((APlayTest.Client.SheetManager) (this))));
    }
    public virtual APlayTest.Client.ISheetManagerEvents SheetManagerHandler
    {
      set
      {
        {
          handler_ = value;
        }
      }
      get
      {
        {
          return (handler_);
        }
      }
    }
    public virtual APlayTest.Client.SheetList Sheets
    {
      get
      {
        {
          return (((APlayTest.Client.SheetList) (implSheetManager.Sheets)));
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implSheetManager.APlayEntityId);
        }
      }
    }
    public void onInternSheetsReplace(APlay.Generated.Intern.Client.ISheetListEvents Sheets__)
    {
      if(SheetsReplaceEventHandler!=null)
      {
        SheetsReplaceEventHandler(((APlayTest.Client.SheetList) (Sheets__)));
      }
      else
      {
        if(APlayTest.Client.SheetManager.StaticSheetsReplaceEventHandler!=null)
        {
          APlayTest.Client.SheetManager.StaticSheetsReplaceEventHandler(((APlayTest.Client.SheetList) (Sheets__)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          if(SheetManagerHandler!=null)
          {
            SheetManagerHandler.onSheetsReplace(((APlayTest.Client.SheetList) (Sheets__)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetManagerAPEvents.onSheetsReplace","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternSheetsAdd(APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsAddEventHandler!=null)
      {
        SheetsAddEventHandler(((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManager.StaticSheetsAddEventHandler!=null)
        {
          APlayTest.Client.SheetManager.StaticSheetsAddEventHandler(((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          if(SheetManagerHandler!=null)
          {
            SheetManagerHandler.onSheetsAdd(((APlayTest.Client.Sheet) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetManagerAPEvents.onSheetsAdd","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternSheetsRemove(APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsRemoveEventHandler!=null)
      {
        SheetsRemoveEventHandler(((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManager.StaticSheetsRemoveEventHandler!=null)
        {
          APlayTest.Client.SheetManager.StaticSheetsRemoveEventHandler(((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          if(SheetManagerHandler!=null)
          {
            SheetManagerHandler.onSheetsRemove(((APlayTest.Client.Sheet) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetManagerAPEvents.onSheetsRemove","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternSheetsClear()
    {
      if(SheetsClearEventHandler!=null)
      {
        SheetsClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.SheetManager.StaticSheetsClearEventHandler!=null)
        {
          APlayTest.Client.SheetManager.StaticSheetsClearEventHandler(((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          if(SheetManagerHandler!=null)
          {
            SheetManagerHandler.onSheetsClear();
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetManagerAPEvents.onSheetsClear","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternSheetsInsertAt(int pos, APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsInsertAtEventHandler!=null)
      {
        SheetsInsertAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManager.StaticSheetsInsertAtEventHandler!=null)
        {
          APlayTest.Client.SheetManager.StaticSheetsInsertAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          if(SheetManagerHandler!=null)
          {
            SheetManagerHandler.onSheetsInsertAt(pos, ((APlayTest.Client.Sheet) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetManagerAPEvents.onSheetsInsertAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternSheetsSetAt(int pos, APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsSetAtEventHandler!=null)
      {
        SheetsSetAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManager.StaticSheetsSetAtEventHandler!=null)
        {
          APlayTest.Client.SheetManager.StaticSheetsSetAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          if(SheetManagerHandler!=null)
          {
            SheetManagerHandler.onSheetsSetAt(pos, ((APlayTest.Client.Sheet) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetManagerAPEvents.onSheetsSetAt","Client.Designed");
            }
          }
        }
      }
    }
    public void onInternSheetsRemoveAt(int pos, APlay.Generated.Intern.Client.__ISheetAPEvents element)
    {
      if(SheetsRemoveAtEventHandler!=null)
      {
        SheetsRemoveAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)));
      }
      else
      {
        if(APlayTest.Client.SheetManager.StaticSheetsRemoveAtEventHandler!=null)
        {
          APlayTest.Client.SheetManager.StaticSheetsRemoveAtEventHandler(pos, ((APlayTest.Client.Sheet) (element)), ((APlayTest.Client.SheetManager) (this)));
        }
        else
        {
          if(SheetManagerHandler!=null)
          {
            SheetManagerHandler.onSheetsRemoveAt(pos, ((APlayTest.Client.Sheet) (element)));
          }
          else
          {
            if(APlay.Client.APClient.DebugMessagesEnabled)
            {
              APlay.Common.Logging.Logger.LogDesigned(2,"Handler not set __ISheetManagerAPEvents.onSheetsRemoveAt","Client.Designed");
            }
          }
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implSheetManager.RequiresInit();
      return (((bool) (retu)));
    }
    public APlayTest.Client.Sheet CreateSheet()
    {
      APlay.Generated.Intern.Client.__ISheetAPEvents retu = implSheetManager.CreateSheet();
      return (((APlayTest.Client.Sheet) (retu)));
    }
    public void CreateSheet(APlayTest.Client.Delegates.void_Sheet returnDelegate)
    {
      implSheetManager.CreateSheet(delegate(APlay.Common.Protocol.MessageReader reader_){
  APlay.Generated.Intern.Client.__Sheet __retu__ = new APlay.Generated.Intern.Client.__Sheet();
  __retu__ = APlay.Generated.Intern.Client.__Sheet.readReferenceFromStream(reader_);
  returnDelegate(((APlayTest.Client.Sheet) ((__retu__==null)?null:__retu__.__GetExternSheet())));
}
);
    }
    public void AddSheet(APlayTest.Client.Sheet sheet__)
    {
      implSheetManager.AddSheet(((APlay.Generated.Intern.Client.__ISheetAPEvents) (sheet__)));
    }
    public APlay.Generated.Intern.Client.__ISheetManagerAPImpl getSheetManagerObject()
    {
      return (implSheetManager);
    }
    public void setSheetManagerObject(APlay.Generated.Intern.Client.__ISheetManagerAPImpl impl)
    {
      implSheetManager = impl;
    }
    private APlayTest.Client.ISheetManagerEvents handler_;
    public event APlayTest.Client.Delegates.void_SheetList SheetsReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_SheetList_SheetManager StaticSheetsReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_Sheet SheetsAddEventHandler;
    static public event APlayTest.Client.Delegates.void_Sheet_SheetManager StaticSheetsAddEventHandler;
    public event APlayTest.Client.Delegates.void_Sheet SheetsRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_Sheet_SheetManager StaticSheetsRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ SheetsClearEventHandler;
    static public event APlayTest.Client.Delegates.void_SheetManager StaticSheetsClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Sheet SheetsInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Sheet_SheetManager StaticSheetsInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Sheet SheetsSetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Sheet_SheetManager StaticSheetsSetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_Sheet SheetsRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_Sheet_SheetManager StaticSheetsRemoveAtEventHandler;
    private APlay.Generated.Intern.Client.__ISheetManagerAPImpl implSheetManager;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class UndoManagerSkeleton : APlayTest.Client.IUndoManagerSkeleton, APlay.Generated.Intern.Client.__IUndoManagerAPEvents
  {
    public UndoManagerSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setUndoManagerObject(((APlay.Generated.Intern.Client.__IUndoManagerAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setUndoManagerObject(APlayObjectFactory.CreateUndoManagerImpl());
      }
      ((APlay.Generated.Intern.Client.__UndoManager) (this.getUndoManagerObject())).UndoManagerHandler = ((APlay.Generated.Intern.Client.__IUndoManagerAPEvents) (((APlayTest.Client.UndoManagerSkeleton) (this))));
    }
    public virtual APlayTest.Client.Client DataClient
    {
      get
      {
        {
          return (((APlayTest.Client.Client) (implUndoManager.DataClient)));
        }
      }
    }
    public virtual bool CanUndo
    {
      get
      {
        {
          return (implUndoManager.CanUndo);
        }
      }
    }
    public virtual bool CanRedo
    {
      get
      {
        {
          return (implUndoManager.CanRedo);
        }
      }
    }
    public virtual APlayTest.Client.HistoryEntryList History
    {
      get
      {
        {
          return (((APlayTest.Client.HistoryEntryList) (implUndoManager.History)));
        }
      }
    }
    public virtual int ActiveHistoryEntryId
    {
      get
      {
        {
          return (implUndoManager.ActiveHistoryEntryId);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implUndoManager.APlayEntityId);
        }
      }
    }
    public virtual void onDataClientChange(APlayTest.Client.Client NewDataClient__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onDataClientChange received","Client.Designed");
    }
    public void onInternDataClientChange(APlay.Generated.Intern.Client.__IClientAPEvents NewDataClient__)
    {
      if(DataClientChangeEventHandler!=null)
      {
        DataClientChangeEventHandler(((APlayTest.Client.Client) (NewDataClient__)));
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticDataClientChangeEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticDataClientChangeEventHandler(((APlayTest.Client.Client) (NewDataClient__)), ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onDataClientChange(((APlayTest.Client.Client) (NewDataClient__)));
        }
      }
    }
    public virtual void onCanUndoChange(bool NewCanUndo__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanUndoChange received","Client.Designed");
    }
    public void onInternCanUndoChange(bool NewCanUndo__)
    {
      if(CanUndoChangeEventHandler!=null)
      {
        CanUndoChangeEventHandler(NewCanUndo__);
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticCanUndoChangeEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticCanUndoChangeEventHandler(NewCanUndo__, ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onCanUndoChange(NewCanUndo__);
        }
      }
    }
    public virtual void onCanRedoChange(bool NewCanRedo__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onCanRedoChange received","Client.Designed");
    }
    public void onInternCanRedoChange(bool NewCanRedo__)
    {
      if(CanRedoChangeEventHandler!=null)
      {
        CanRedoChangeEventHandler(NewCanRedo__);
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticCanRedoChangeEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticCanRedoChangeEventHandler(NewCanRedo__, ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onCanRedoChange(NewCanRedo__);
        }
      }
    }
    public virtual void onHistoryReplace(APlayTest.Client.HistoryEntryList History__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryReplace received","Client.Designed");
    }
    public void onInternHistoryReplace(APlay.Generated.Intern.Client.IHistoryEntryListEvents History__)
    {
      if(HistoryReplaceEventHandler!=null)
      {
        HistoryReplaceEventHandler(((APlayTest.Client.HistoryEntryList) (History__)));
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticHistoryReplaceEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticHistoryReplaceEventHandler(((APlayTest.Client.HistoryEntryList) (History__)), ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryReplace(((APlayTest.Client.HistoryEntryList) (History__)));
        }
      }
    }
    public virtual void onHistoryAdd(APlayTest.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryAdd received","Client.Designed");
    }
    public void onInternHistoryAdd(APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistoryAddEventHandler!=null)
      {
        HistoryAddEventHandler(new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticHistoryAddEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticHistoryAddEventHandler(new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryAdd(new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryRemove(APlayTest.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryRemove received","Client.Designed");
    }
    public void onInternHistoryRemove(APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistoryRemoveEventHandler!=null)
      {
        HistoryRemoveEventHandler(new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticHistoryRemoveEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticHistoryRemoveEventHandler(new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryRemove(new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryClear()
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryClear received","Client.Designed");
    }
    public void onInternHistoryClear()
    {
      if(HistoryClearEventHandler!=null)
      {
        HistoryClearEventHandler();
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticHistoryClearEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticHistoryClearEventHandler(((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryClear();
        }
      }
    }
    public virtual void onHistoryInsertAt(int pos, APlayTest.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryInsertAt received","Client.Designed");
    }
    public void onInternHistoryInsertAt(int pos, APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistoryInsertAtEventHandler!=null)
      {
        HistoryInsertAtEventHandler(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticHistoryInsertAtEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticHistoryInsertAtEventHandler(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryInsertAt(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistorySetAt(int pos, APlayTest.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistorySetAt received","Client.Designed");
    }
    public void onInternHistorySetAt(int pos, APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistorySetAtEventHandler!=null)
      {
        HistorySetAtEventHandler(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticHistorySetAtEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticHistorySetAtEventHandler(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistorySetAt(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onHistoryRemoveAt(int pos, APlayTest.Client.HistoryEntry element)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onHistoryRemoveAt received","Client.Designed");
    }
    public void onInternHistoryRemoveAt(int pos, APlay.Generated.Intern.Client.__HistoryEntry element)
    {
      if(HistoryRemoveAtEventHandler!=null)
      {
        HistoryRemoveAtEventHandler(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticHistoryRemoveAtEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticHistoryRemoveAtEventHandler(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))), ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onHistoryRemoveAt(pos, new APlayTest.Client.HistoryEntry(((int) (element.Id)), ((String) (element.Description))));
        }
      }
    }
    public virtual void onActiveHistoryEntryIdChange(int NewActiveHistoryEntryId__)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onActiveHistoryEntryIdChange received","Client.Designed");
    }
    public void onInternActiveHistoryEntryIdChange(int NewActiveHistoryEntryId__)
    {
      if(ActiveHistoryEntryIdChangeEventHandler!=null)
      {
        ActiveHistoryEntryIdChangeEventHandler(NewActiveHistoryEntryId__);
      }
      else
      {
        if(APlayTest.Client.UndoManagerSkeleton.StaticActiveHistoryEntryIdChangeEventHandler!=null)
        {
          APlayTest.Client.UndoManagerSkeleton.StaticActiveHistoryEntryIdChangeEventHandler(NewActiveHistoryEntryId__, ((APlayTest.Client.UndoManager) (this)));
        }
        else
        {
          this.onActiveHistoryEntryIdChange(NewActiveHistoryEntryId__);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implUndoManager.RequiresInit();
      return (((bool) (retu)));
    }
    public void StartTransaction(String description__)
    {
      implUndoManager.StartTransaction(description__);
    }
    public void EndTransaction()
    {
      implUndoManager.EndTransaction();
    }
    public void CancelTransaction()
    {
      implUndoManager.CancelTransaction();
    }
    public void ExecuteUndo()
    {
      implUndoManager.ExecuteUndo();
    }
    public void ExecuteRedo()
    {
      implUndoManager.ExecuteRedo();
    }
    public void UndoRedoTo(APlayTest.Client.HistoryEntry destinationEntry__)
    {
      implUndoManager.UndoRedoTo(new APlay.Generated.Intern.Client.__HistoryEntry(destinationEntry__.Id, destinationEntry__.Description));
    }
    public APlay.Generated.Intern.Client.__IUndoManagerAPImpl getUndoManagerObject()
    {
      return (implUndoManager);
    }
    public void setUndoManagerObject(APlay.Generated.Intern.Client.__IUndoManagerAPImpl impl)
    {
      implUndoManager = impl;
    }
    public event APlayTest.Client.Delegates.void_Client DataClientChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_Client_UndoManager StaticDataClientChangeEventHandler;
    public event APlayTest.Client.Delegates.void_boolean CanUndoChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_boolean_UndoManager StaticCanUndoChangeEventHandler;
    public event APlayTest.Client.Delegates.void_boolean CanRedoChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_boolean_UndoManager StaticCanRedoChangeEventHandler;
    public event APlayTest.Client.Delegates.void_HistoryEntryList HistoryReplaceEventHandler;
    static public event APlayTest.Client.Delegates.void_HistoryEntryList_UndoManager StaticHistoryReplaceEventHandler;
    public event APlayTest.Client.Delegates.void_HistoryEntry HistoryAddEventHandler;
    static public event APlayTest.Client.Delegates.void_HistoryEntry_UndoManager StaticHistoryAddEventHandler;
    public event APlayTest.Client.Delegates.void_HistoryEntry HistoryRemoveEventHandler;
    static public event APlayTest.Client.Delegates.void_HistoryEntry_UndoManager StaticHistoryRemoveEventHandler;
    public event APlayTest.Client.Delegates.void_ HistoryClearEventHandler;
    static public event APlayTest.Client.Delegates.void_UndoManager StaticHistoryClearEventHandler;
    public event APlayTest.Client.Delegates.void_int32_HistoryEntry HistoryInsertAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_HistoryEntry_UndoManager StaticHistoryInsertAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_HistoryEntry HistorySetAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_HistoryEntry_UndoManager StaticHistorySetAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32_HistoryEntry HistoryRemoveAtEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_HistoryEntry_UndoManager StaticHistoryRemoveAtEventHandler;
    public event APlayTest.Client.Delegates.void_int32 ActiveHistoryEntryIdChangeEventHandler;
    static public event APlayTest.Client.Delegates.void_int32_UndoManager StaticActiveHistoryEntryIdChangeEventHandler;
    private APlay.Generated.Intern.Client.__IUndoManagerAPImpl implUndoManager;
  }
  
}
namespace APlayTest.Client
{
  public abstract partial class UserSkeleton : APlayTest.Client.IUserSkeleton, APlay.Generated.Intern.Client.__IUserAPEvents
  {
    public UserSkeleton()
    {
      if(APlay.Common.APlayInitializer.GetInitializer()!=null)
      {
        this.setUserObject(((APlay.Generated.Intern.Client.__IUserAPImpl) (APlay.Common.APlayInitializer.GetInitializer())));
      }
      else
      {
        this.setUserObject(APlayObjectFactory.CreateUserImpl());
      }
      ((APlay.Generated.Intern.Client.__User) (this.getUserObject())).UserHandler = ((APlay.Generated.Intern.Client.__IUserAPEvents) (((APlayTest.Client.UserSkeleton) (this))));
    }
    public virtual String Name
    {
      set
      {
        {
          //WString
          implUser.Name = value;
        }
      }
      get
      {
        {
          return (implUser.Name);
        }
      }
    }
    public virtual ulong APlayEntityId
    {
      get
      {
        {
          return (implUser.APlayEntityId);
        }
      }
    }
    public bool RequiresInit()
    {
      bool retu = implUser.RequiresInit();
      return (((bool) (retu)));
    }
    public APlay.Generated.Intern.Client.__IUserAPImpl getUserObject()
    {
      return (implUser);
    }
    public void setUserObject(APlay.Generated.Intern.Client.__IUserAPImpl impl)
    {
      implUser = impl;
    }
    private APlay.Generated.Intern.Client.__IUserAPImpl implUser;
  }
  
}
namespace APlayTest.Client
{
  public partial struct AplayPoint
  {
    public AplayPoint(double X__, double Y__)
    {
      X = X__;
      Y = Y__;
    }
    public double X;
    public double Y;
    public static bool operator ==(AplayPoint a, AplayPoint b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.X==b.X)&& (a.Y==b.Y);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(AplayPoint))
      {
        return false;
      }
      AplayPoint a = this;
      AplayPoint b = (AplayPoint)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.X==b.X)&&(a.Y==b.Y);
    }
    public override int GetHashCode()
    {
      return X.GetHashCode() + Y.GetHashCode();
    }
    public static bool operator !=(AplayPoint a, AplayPoint b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+X.ToString()+"]" + "["+Y.ToString()+"]";
    }
  }
}
namespace APlayTest.Client
{
  public partial struct AplaySize
  {
    public AplaySize(float Width__, float Height__)
    {
      Width = Width__;
      Height = Height__;
    }
    public float Width;
    public float Height;
    public static bool operator ==(AplaySize a, AplaySize b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Width==b.Width)&& (a.Height==b.Height);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(AplaySize))
      {
        return false;
      }
      AplaySize a = this;
      AplaySize b = (AplaySize)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Width==b.Width)&&(a.Height==b.Height);
    }
    public override int GetHashCode()
    {
      return Width.GetHashCode() + Height.GetHashCode();
    }
    public static bool operator !=(AplaySize a, AplaySize b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Width.ToString()+"]" + "["+Height.ToString()+"]";
    }
  }
}
namespace APlayTest.Client
{
  public partial struct HistoryEntry
  {
    public HistoryEntry(int Id__, String Description__)
    {
      Id = Id__;
      Description = Description__;
    }
    public int Id;
    public String Description;
    public static bool operator ==(HistoryEntry a, HistoryEntry b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Id==b.Id)&& (a.Description==b.Description);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(HistoryEntry))
      {
        return false;
      }
      HistoryEntry a = this;
      HistoryEntry b = (HistoryEntry)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Id==b.Id)&&(a.Description==b.Description);
    }
    public override int GetHashCode()
    {
      return Id.GetHashCode() + Description.GetHashCode();
    }
    public static bool operator !=(HistoryEntry a, HistoryEntry b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Id.ToString()+"]" + "["+Description.ToString()+"]";
    }
  }
}
namespace APlayTest.Client
{
  public partial struct ProjectDetail
  {
    public ProjectDetail(String Name__, String CreatedBy__, DateTime CreationDate__)
    {
      Name = Name__;
      CreatedBy = CreatedBy__;
      CreationDate = CreationDate__;
    }
    public String Name;
    public String CreatedBy;
    public DateTime CreationDate;
    public static bool operator ==(ProjectDetail a, ProjectDetail b)
    {
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return true&& (a.Name==b.Name)&& (a.CreatedBy==b.CreatedBy)&& (a.CreationDate==b.CreationDate);
    }
    public override bool Equals(System.Object obj)
    {
      if (ReferenceEquals(null, obj))
      {
        return false;
      }
      if (obj.GetType() != typeof(ProjectDetail))
      {
        return false;
      }
      ProjectDetail a = this;
      ProjectDetail b = (ProjectDetail)obj;
      if (System.Object.ReferenceEquals(a, b)) return true;
      if (((object)a == null) || ((object)b == null)) return false;
      return (a.Name==b.Name)&&(a.CreatedBy==b.CreatedBy)&&(a.CreationDate==b.CreationDate);
    }
    public override int GetHashCode()
    {
      return Name.GetHashCode() + CreatedBy.GetHashCode() + CreationDate.GetHashCode();
    }
    public static bool operator !=(ProjectDetail a, ProjectDetail b)
    {
      return !(a == b);
    }
    public override string ToString()
    {
      return "["+Name.ToString()+"]" + "["+CreatedBy.ToString()+"]" + "["+CreationDate.ToString()+"]";
    }
  }
}
namespace APlayTest.Client
{
  public partial class ConnectorList : IList<APlayTest.Client.Connector>, APlay.Generated.Intern.Client.IConnectorListEvents
  {
    public ConnectorList()
    {
      APlay.Generated.Intern.Client.IConnectorListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ConnectorList();
      }
    }
    public ConnectorList(APlay.Generated.Intern.Client.IConnectorListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ConnectorList();
      }
    }
    public static APlayTest.Client.ConnectorList CreateForAPlay(APlay.Generated.Intern.Client.IConnectorListImpl impl)
    {
      APlayTest.Client.ConnectorList ob = new APlayTest.Client.ConnectorList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.IConnectorListImpl getConnectorObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.IConnectorListImpl impl;
    
public int IndexOf(APlayTest.Client.Connector item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Client.Connector item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Client.Connector this[int index]
{
    get
    {
         
        return (APlayTest.Client.Connector)impl.get((int)index);
    }
    set
    {
        APlayTest.Client.Connector item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Client.Connector item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Client.Connector item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Client.Connector[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Client.Connector item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Client.Connector item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Client.Connector> GetEnumerator()
    {
        return new ConnectorListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Client
{
  public partial class ConnectorListEnumerator : IEnumerator<APlayTest.Client.Connector>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__Connector> intern;
        public ConnectorListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__Connector> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Client.Connector Current
        {
            get { APlay.Generated.Intern.Client.__Connector item = (APlay.Generated.Intern.Client.__Connector)intern.Current; return ((APlayTest.Client.Connector) ((item==null)?null:item.__GetExternConnector()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Client
{
  public partial class ConnectionList : IList<APlayTest.Client.Connection>, APlay.Generated.Intern.Client.IConnectionListEvents
  {
    public ConnectionList()
    {
      APlay.Generated.Intern.Client.IConnectionListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ConnectionList();
      }
    }
    public ConnectionList(APlay.Generated.Intern.Client.IConnectionListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ConnectionList();
      }
    }
    public static APlayTest.Client.ConnectionList CreateForAPlay(APlay.Generated.Intern.Client.IConnectionListImpl impl)
    {
      APlayTest.Client.ConnectionList ob = new APlayTest.Client.ConnectionList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.IConnectionListImpl getConnectionObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.IConnectionListImpl impl;
    
public int IndexOf(APlayTest.Client.Connection item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Client.Connection item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Client.Connection this[int index]
{
    get
    {
         
        return (APlayTest.Client.Connection)impl.get((int)index);
    }
    set
    {
        APlayTest.Client.Connection item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Client.Connection item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Client.Connection item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Client.Connection[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Client.Connection item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Client.Connection item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Client.Connection> GetEnumerator()
    {
        return new ConnectionListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Client
{
  public partial class ConnectionListEnumerator : IEnumerator<APlayTest.Client.Connection>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__Connection> intern;
        public ConnectionListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__Connection> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Client.Connection Current
        {
            get { APlay.Generated.Intern.Client.__Connection item = (APlay.Generated.Intern.Client.__Connection)intern.Current; return ((APlayTest.Client.Connection) ((item==null)?null:item.__GetExternConnection()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Client
{
  public partial class ProjectList : IList<APlayTest.Client.Project>, APlay.Generated.Intern.Client.IProjectListEvents
  {
    public ProjectList()
    {
      APlay.Generated.Intern.Client.IProjectListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ProjectList();
      }
    }
    public ProjectList(APlay.Generated.Intern.Client.IProjectListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.ProjectList();
      }
    }
    public static APlayTest.Client.ProjectList CreateForAPlay(APlay.Generated.Intern.Client.IProjectListImpl impl)
    {
      APlayTest.Client.ProjectList ob = new APlayTest.Client.ProjectList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.IProjectListImpl getProjectObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.IProjectListImpl impl;
    
public int IndexOf(APlayTest.Client.Project item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Client.Project item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Client.Project this[int index]
{
    get
    {
         
        return (APlayTest.Client.Project)impl.get((int)index);
    }
    set
    {
        APlayTest.Client.Project item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Client.Project item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Client.Project item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Client.Project[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Client.Project item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Client.Project item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Client.Project> GetEnumerator()
    {
        return new ProjectListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Client
{
  public partial class ProjectListEnumerator : IEnumerator<APlayTest.Client.Project>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__Project> intern;
        public ProjectListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__Project> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Client.Project Current
        {
            get { APlay.Generated.Intern.Client.__Project item = (APlay.Generated.Intern.Client.__Project)intern.Current; return ((APlayTest.Client.Project) ((item==null)?null:item.__GetExternProject()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Client
{
  public partial class BlockSymbolList : IList<APlayTest.Client.BlockSymbol>, APlay.Generated.Intern.Client.IBlockSymbolListEvents
  {
    public BlockSymbolList()
    {
      APlay.Generated.Intern.Client.IBlockSymbolListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.BlockSymbolList();
      }
    }
    public BlockSymbolList(APlay.Generated.Intern.Client.IBlockSymbolListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.BlockSymbolList();
      }
    }
    public static APlayTest.Client.BlockSymbolList CreateForAPlay(APlay.Generated.Intern.Client.IBlockSymbolListImpl impl)
    {
      APlayTest.Client.BlockSymbolList ob = new APlayTest.Client.BlockSymbolList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.IBlockSymbolListImpl getBlockSymbolObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.IBlockSymbolListImpl impl;
    
public int IndexOf(APlayTest.Client.BlockSymbol item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Client.BlockSymbol item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Client.BlockSymbol this[int index]
{
    get
    {
         
        return (APlayTest.Client.BlockSymbol)impl.get((int)index);
    }
    set
    {
        APlayTest.Client.BlockSymbol item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Client.BlockSymbol item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Client.BlockSymbol item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Client.BlockSymbol[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Client.BlockSymbol item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Client.BlockSymbol item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Client.BlockSymbol> GetEnumerator()
    {
        return new BlockSymbolListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Client
{
  public partial class BlockSymbolListEnumerator : IEnumerator<APlayTest.Client.BlockSymbol>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__BlockSymbol> intern;
        public BlockSymbolListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__BlockSymbol> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Client.BlockSymbol Current
        {
            get { APlay.Generated.Intern.Client.__BlockSymbol item = (APlay.Generated.Intern.Client.__BlockSymbol)intern.Current; return ((APlayTest.Client.BlockSymbol) ((item==null)?null:item.__GetExternBlockSymbol()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Client
{
  public partial class SheetList : IList<APlayTest.Client.Sheet>, APlay.Generated.Intern.Client.ISheetListEvents
  {
    public SheetList()
    {
      APlay.Generated.Intern.Client.ISheetListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.SheetList();
      }
    }
    public SheetList(APlay.Generated.Intern.Client.ISheetListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.SheetList();
      }
    }
    public static APlayTest.Client.SheetList CreateForAPlay(APlay.Generated.Intern.Client.ISheetListImpl impl)
    {
      APlayTest.Client.SheetList ob = new APlayTest.Client.SheetList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.ISheetListImpl getSheetObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.ISheetListImpl impl;
    
public int IndexOf(APlayTest.Client.Sheet item)
{
    return (int)impl.indexOf(item);
}

public void Insert(int index, APlayTest.Client.Sheet item)
{
    impl.insertAt(index, item);
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Client.Sheet this[int index]
{
    get
    {
         
        return (APlayTest.Client.Sheet)impl.get((int)index);
    }
    set
    {
        APlayTest.Client.Sheet item =value;
        impl.setAt(index,item);
    }
}

public void Add(APlayTest.Client.Sheet item)
{
    impl.add(item);
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Client.Sheet item)
{
    return impl.contains(item);
}

public void CopyTo(APlayTest.Client.Sheet[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Client.Sheet item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Client.Sheet item)
{
    return impl.remove(item);
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Client.Sheet> GetEnumerator()
    {
        return new SheetListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Client
{
  public partial class SheetListEnumerator : IEnumerator<APlayTest.Client.Sheet>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__Sheet> intern;
        public SheetListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__Sheet> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Client.Sheet Current
        {
            get { APlay.Generated.Intern.Client.__Sheet item = (APlay.Generated.Intern.Client.__Sheet)intern.Current; return ((APlayTest.Client.Sheet) ((item==null)?null:item.__GetExternSheet()));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Client
{
  public partial class HistoryEntryList : IList<APlayTest.Client.HistoryEntry>, APlay.Generated.Intern.Client.IHistoryEntryListEvents
  {
    public HistoryEntryList()
    {
      APlay.Generated.Intern.Client.IHistoryEntryListImpl impl_=null;
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.HistoryEntryList();
      }
    }
    public HistoryEntryList(APlay.Generated.Intern.Client.IHistoryEntryListImpl impl_)
    {
      if(impl_!=null)
      {
        impl = impl_;
      }
      else
      {
        impl = new APlay.Generated.Intern.Client.HistoryEntryList();
      }
    }
    public static APlayTest.Client.HistoryEntryList CreateForAPlay(APlay.Generated.Intern.Client.IHistoryEntryListImpl impl)
    {
      APlayTest.Client.HistoryEntryList ob = new APlayTest.Client.HistoryEntryList(impl);
      return (ob);
    }
    public APlay.Generated.Intern.Client.IHistoryEntryListImpl getHistoryEntryObject()
    {
      return (impl);
    }
    private APlay.Generated.Intern.Client.IHistoryEntryListImpl impl;
    
public int IndexOf(APlayTest.Client.HistoryEntry item)
{
    return (int)impl.indexOf(new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void Insert(int index, APlayTest.Client.HistoryEntry item)
{
    impl.insertAt(index, new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void RemoveAt(int index)
{
    impl.removeAt(index);
}

public APlayTest.Client.HistoryEntry this[int index]
{
    get
    {
        APlay.Generated.Intern.Client.__HistoryEntry item = (APlay.Generated.Intern.Client.__HistoryEntry)impl.get((int)index);
        return new APlayTest.Client.HistoryEntry(((int) (item.Id)), ((String) (item.Description)));
    }
    set
    {
        APlayTest.Client.HistoryEntry item =value;
        impl.setAt(index,new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
    }
}

public void Add(APlayTest.Client.HistoryEntry item)
{
    impl.add(new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void Clear()
{
    impl.clear();
}

public bool Contains(APlayTest.Client.HistoryEntry item)
{
    return impl.contains(new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}

public void CopyTo(APlayTest.Client.HistoryEntry[] array, int arrayIndex)
{
    int i=arrayIndex;
    foreach (APlayTest.Client.HistoryEntry item in this)
    {
        array[i++]=item;
    }
}

public int Count
{
    get { return (int)impl.length(); }
}

public bool IsReadOnly
{
    get { return false; }
}

public bool Remove(APlayTest.Client.HistoryEntry item)
{
    return impl.remove(new APlay.Generated.Intern.Client.__HistoryEntry(((int) (item.Id)), ((String) (item.Description))));
}
System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

    public IEnumerator<APlayTest.Client.HistoryEntry> GetEnumerator()
    {
        return new HistoryEntryListEnumerator(impl.GetEnumerator());
    }
    
  }
  
}
namespace APlayTest.Client
{
  public partial class HistoryEntryListEnumerator : IEnumerator<APlayTest.Client.HistoryEntry>
  {
    
        IEnumerator<APlay.Generated.Intern.Client.__HistoryEntry> intern;
        public HistoryEntryListEnumerator(IEnumerator<APlay.Generated.Intern.Client.__HistoryEntry> intern)
        {
            this.intern = intern;
        }
        public APlayTest.Client.HistoryEntry Current
        {
            get { APlay.Generated.Intern.Client.__HistoryEntry item = (APlay.Generated.Intern.Client.__HistoryEntry)intern.Current; return new APlayTest.Client.HistoryEntry(((int) (item.Id)), ((String) (item.Description)));}
        }

        public void Dispose()
        {
            intern.Dispose();
        }

        object System.Collections.IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            return intern.MoveNext();
        }

        public void Reset()
        {
            intern.Reset();
        }

  }
  
}
namespace APlayTest.Client
{
  public abstract partial class APlayClientSkeleton : APlayTest.Client.IAPlayClientEvents, APlay.Generated.Intern.Client.IDesignedClient
  {
    public APlayClientSkeleton()
    {
      APlay.Generated.Intern.Client.DesignedClient client = new APlay.Generated.Intern.Client.DesignedClient(this);
      client.Factory = ((APlay.Generated.Intern.Client.IUserClassFactory) (new APlayTest.Client.UserClassFactory()));
      impl = client;
    }
    public abstract void onConnect(APlayTest.Client.Client clientObject);
    public void onInternConnect(APlay.Generated.Intern.Client.__IClientAPEvents clientObject)
    {
      if(ConnectEventHandler!=null)
      {
        ConnectEventHandler(((APlayTest.Client.Client) (clientObject)));
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticConnectEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticConnectEventHandler(((APlayTest.Client.Client) (clientObject)), ((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnect(((APlayTest.Client.Client) (clientObject)));
        }
      }
    }
    public virtual void onConnectionSwitch(APlayTest.Client.Client clientObject)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionSwitch received","Client.Designed");
    }
    public void onInternConnectionSwitch(APlay.Generated.Intern.Client.__IClientAPEvents clientObject)
    {
      if(ConnectionSwitchEventHandler!=null)
      {
        ConnectionSwitchEventHandler(((APlayTest.Client.Client) (clientObject)));
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticConnectionSwitchEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticConnectionSwitchEventHandler(((APlayTest.Client.Client) (clientObject)), ((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionSwitch(((APlayTest.Client.Client) (clientObject)));
        }
      }
    }
    public abstract void onDisconnect();
    public void onInternDisconnect()
    {
      if(DisconnectEventHandler!=null)
      {
        DisconnectEventHandler();
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticDisconnectEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticDisconnectEventHandler(((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onDisconnect();
        }
      }
    }
    public abstract void onConnectionFailed();
    public void onInternConnectionFailed()
    {
      if(ConnectionFailedEventHandler!=null)
      {
        ConnectionFailedEventHandler();
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticConnectionFailedEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticConnectionFailedEventHandler(((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionFailed();
        }
      }
    }
    public virtual void onConnectionRejected(String reason)
    {
      APlay.Common.Logging.Logger.LogDesigned(2,"onConnectionRejected received","Client.Designed");
    }
    public void onInternConnectionRejected(String reason)
    {
      if(ConnectionRejectedEventHandler!=null)
      {
        ConnectionRejectedEventHandler(reason);
      }
      else
      {
        if(APlayTest.Client.APlayClientSkeleton.StaticConnectionRejectedEventHandler!=null)
        {
          APlayTest.Client.APlayClientSkeleton.StaticConnectionRejectedEventHandler(reason, ((APlayTest.Client.APlayClientSkeleton) (this)));
        }
        else
        {
          this.onConnectionRejected(reason);
        }
      }
    }
    public String GetVersionString()
    {
      String retu = impl.GetVersionString();
      return (((String) (retu)));
    }
    public void Start(String address)
    {
      impl.Start(address);
    }
    public void StartBalanced(String address)
    {
      impl.StartBalanced(address);
    }
    public void SwitchCloud(String address)
    {
      impl.SwitchCloud(address);
    }
    public void SwitchBalancedCloud(String address)
    {
      impl.SwitchBalancedCloud(address);
    }
    public void EnableEventQueue(bool enable)
    {
      impl.EnableEventQueue(enable);
    }
    public void Stop()
    {
      impl.Stop();
    }
    public bool FireEvent()
    {
      bool retu = impl.FireEvent();
      return (((bool) (retu)));
    }
    public DateTime GetSyncedTime()
    {
      DateTime retu = impl.GetSyncedTime();
      return (((DateTime) (retu)));
    }
    public void SetExternLogger(APlay.Common.Logging.IExternLogger logger)
    {
      impl.SetExternLogger(((APlay.Common.Logging.IExternLogger) (logger)));
    }
    public event APlayTest.Client.Delegates.void_Client ConnectEventHandler;
    static public event APlayTest.Client.Delegates.void_Client_APlayClientSkeleton StaticConnectEventHandler;
    public event APlayTest.Client.Delegates.void_Client ConnectionSwitchEventHandler;
    static public event APlayTest.Client.Delegates.void_Client_APlayClientSkeleton StaticConnectionSwitchEventHandler;
    public event APlayTest.Client.Delegates.void_ DisconnectEventHandler;
    static public event APlayTest.Client.Delegates.void_APlayClientSkeleton StaticDisconnectEventHandler;
    public event APlayTest.Client.Delegates.void_ ConnectionFailedEventHandler;
    static public event APlayTest.Client.Delegates.void_APlayClientSkeleton StaticConnectionFailedEventHandler;
    public event APlayTest.Client.Delegates.void_String ConnectionRejectedEventHandler;
    static public event APlayTest.Client.Delegates.void_String_APlayClientSkeleton StaticConnectionRejectedEventHandler;
    private APlay.Generated.Intern.Client.IDesignedClientImpl impl;
  }
  
}
namespace APlayTest.Client
{
  public partial class APlayObjectFactory
  {
    public static void SetUserFactory(APlayTest.Client.IUserObjectFactory factory)
    {
      BlockSymbol_ = factory;
      Client_ = factory;
      Connection_ = factory;
      Connector_ = factory;
      Project_ = factory;
      ProjectManager_ = factory;
      Sheet_ = factory;
      SheetManager_ = factory;
      UndoManager_ = factory;
      User_ = factory;
    }
    public static void SetAPlayDefaultFactory()
    {
      BlockSymbol_ = null;
      Client_ = null;
      Connection_ = null;
      Connector_ = null;
      Project_ = null;
      ProjectManager_ = null;
      Sheet_ = null;
      SheetManager_ = null;
      UndoManager_ = null;
      User_ = null;
    }
    public static void SetBlockSymbolUserFactory(APlayTest.Client.IBlockSymbolUserFactory factory)
    {
      BlockSymbol_ = factory;
    }
    public static void SetBlockSymbolAPlayDefaultFactory()
    {
      BlockSymbol_ = null;
    }
    public static APlay.Generated.Intern.Client.__IBlockSymbolAPImpl CreateBlockSymbolImpl()
    {
      if(BlockSymbol_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateBlockSymbol());
      }
    }
    public static void SetClientUserFactory(APlayTest.Client.IClientUserFactory factory)
    {
      Client_ = factory;
    }
    public static void SetClientAPlayDefaultFactory()
    {
      Client_ = null;
    }
    public static APlay.Generated.Intern.Client.__IClientAPImpl CreateClientImpl()
    {
      if(Client_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateClient());
      }
    }
    public static void SetConnectionUserFactory(APlayTest.Client.IConnectionUserFactory factory)
    {
      Connection_ = factory;
    }
    public static void SetConnectionAPlayDefaultFactory()
    {
      Connection_ = null;
    }
    public static APlay.Generated.Intern.Client.__IConnectionAPImpl CreateConnectionImpl()
    {
      if(Connection_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateConnection());
      }
    }
    public static void SetConnectorUserFactory(APlayTest.Client.IConnectorUserFactory factory)
    {
      Connector_ = factory;
    }
    public static void SetConnectorAPlayDefaultFactory()
    {
      Connector_ = null;
    }
    public static APlay.Generated.Intern.Client.__IConnectorAPImpl CreateConnectorImpl()
    {
      if(Connector_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateConnector());
      }
    }
    public static void SetProjectUserFactory(APlayTest.Client.IProjectUserFactory factory)
    {
      Project_ = factory;
    }
    public static void SetProjectAPlayDefaultFactory()
    {
      Project_ = null;
    }
    public static APlay.Generated.Intern.Client.__IProjectAPImpl CreateProjectImpl()
    {
      if(Project_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateProject());
      }
    }
    public static void SetProjectManagerUserFactory(APlayTest.Client.IProjectManagerUserFactory factory)
    {
      ProjectManager_ = factory;
    }
    public static void SetProjectManagerAPlayDefaultFactory()
    {
      ProjectManager_ = null;
    }
    public static APlay.Generated.Intern.Client.__IProjectManagerAPImpl CreateProjectManagerImpl()
    {
      if(ProjectManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateProjectManager());
      }
    }
    public static void SetSheetUserFactory(APlayTest.Client.ISheetUserFactory factory)
    {
      Sheet_ = factory;
    }
    public static void SetSheetAPlayDefaultFactory()
    {
      Sheet_ = null;
    }
    public static APlay.Generated.Intern.Client.__ISheetAPImpl CreateSheetImpl()
    {
      if(Sheet_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateSheet());
      }
    }
    public static void SetSheetManagerUserFactory(APlayTest.Client.ISheetManagerUserFactory factory)
    {
      SheetManager_ = factory;
    }
    public static void SetSheetManagerAPlayDefaultFactory()
    {
      SheetManager_ = null;
    }
    public static APlay.Generated.Intern.Client.__ISheetManagerAPImpl CreateSheetManagerImpl()
    {
      if(SheetManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateSheetManager());
      }
    }
    public static void SetUndoManagerUserFactory(APlayTest.Client.IUndoManagerUserFactory factory)
    {
      UndoManager_ = factory;
    }
    public static void SetUndoManagerAPlayDefaultFactory()
    {
      UndoManager_ = null;
    }
    public static APlay.Generated.Intern.Client.__IUndoManagerAPImpl CreateUndoManagerImpl()
    {
      if(UndoManager_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateUndoManager());
      }
    }
    public static void SetUserUserFactory(APlayTest.Client.IUserUserFactory factory)
    {
      User_ = factory;
    }
    public static void SetUserAPlayDefaultFactory()
    {
      User_ = null;
    }
    public static APlay.Generated.Intern.Client.__IUserAPImpl CreateUserImpl()
    {
      if(User_!=null)
      {
        APlay.Common.Logging.Logger.LogDesigned(6,"event adapters are temporarily disabled","Client.Designed");
        return (null);
      }
      else
      {
        return (APlay.Generated.Intern.Client.APlayInternalFactory.CreateUser());
      }
    }
    static private APlayTest.Client.IBlockSymbolUserFactory BlockSymbol_;
    static private APlayTest.Client.IClientUserFactory Client_;
    static private APlayTest.Client.IConnectionUserFactory Connection_;
    static private APlayTest.Client.IConnectorUserFactory Connector_;
    static private APlayTest.Client.IProjectUserFactory Project_;
    static private APlayTest.Client.IProjectManagerUserFactory ProjectManager_;
    static private APlayTest.Client.ISheetUserFactory Sheet_;
    static private APlayTest.Client.ISheetManagerUserFactory SheetManager_;
    static private APlayTest.Client.IUndoManagerUserFactory UndoManager_;
    static private APlayTest.Client.IUserUserFactory User_;
  }
  
}
namespace APlayTest.Client
{
  public partial class UserClassFactory : APlay.Generated.Intern.Client.IUserClassFactory
  {
    public APlay.Generated.Intern.Client.__IBlockSymbolAPEvents CreateBlockSymbolEvents(APlay.Generated.Intern.Client.__IBlockSymbolAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IBlockSymbolAPEvents retu__ = ((APlay.Generated.Intern.Client.__IBlockSymbolAPEvents) (new APlayTest.Client.BlockSymbol()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IClientAPEvents CreateClientEvents(APlay.Generated.Intern.Client.__IClientAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IClientAPEvents retu__ = ((APlay.Generated.Intern.Client.__IClientAPEvents) (new APlayTest.Client.Client()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IConnectionAPEvents CreateConnectionEvents(APlay.Generated.Intern.Client.__IConnectionAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IConnectionAPEvents retu__ = ((APlay.Generated.Intern.Client.__IConnectionAPEvents) (new APlayTest.Client.Connection()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IConnectorAPEvents CreateConnectorEvents(APlay.Generated.Intern.Client.__IConnectorAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IConnectorAPEvents retu__ = ((APlay.Generated.Intern.Client.__IConnectorAPEvents) (new APlayTest.Client.Connector()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IProjectAPEvents CreateProjectEvents(APlay.Generated.Intern.Client.__IProjectAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IProjectAPEvents retu__ = ((APlay.Generated.Intern.Client.__IProjectAPEvents) (new APlayTest.Client.Project()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IProjectManagerAPEvents CreateProjectManagerEvents(APlay.Generated.Intern.Client.__IProjectManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IProjectManagerAPEvents retu__ = ((APlay.Generated.Intern.Client.__IProjectManagerAPEvents) (new APlayTest.Client.ProjectManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__ISheetAPEvents CreateSheetEvents(APlay.Generated.Intern.Client.__ISheetAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__ISheetAPEvents retu__ = ((APlay.Generated.Intern.Client.__ISheetAPEvents) (new APlayTest.Client.Sheet()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__ISheetManagerAPEvents CreateSheetManagerEvents(APlay.Generated.Intern.Client.__ISheetManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__ISheetManagerAPEvents retu__ = ((APlay.Generated.Intern.Client.__ISheetManagerAPEvents) (new APlayTest.Client.SheetManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IUndoManagerAPEvents CreateUndoManagerEvents(APlay.Generated.Intern.Client.__IUndoManagerAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IUndoManagerAPEvents retu__ = ((APlay.Generated.Intern.Client.__IUndoManagerAPEvents) (new APlayTest.Client.UndoManager()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.__IUserAPEvents CreateUserEvents(APlay.Generated.Intern.Client.__IUserAPImpl impl)
    {
      APlay.Common.APlayInitializer.SetInitializer(impl);
      APlay.Generated.Intern.Client.__IUserAPEvents retu__ = ((APlay.Generated.Intern.Client.__IUserAPEvents) (new APlayTest.Client.User()));
      APlay.Common.APlayInitializer.SetInitializer(null);
      return (retu__);
    }
    public APlay.Generated.Intern.Client.IConnectorListEvents CreateConnectorListEvents(APlay.Generated.Intern.Client.IConnectorListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.IConnectorListEvents) (APlayTest.Client.ConnectorList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Client.IConnectionListEvents CreateConnectionListEvents(APlay.Generated.Intern.Client.IConnectionListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.IConnectionListEvents) (APlayTest.Client.ConnectionList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Client.IProjectListEvents CreateProjectListEvents(APlay.Generated.Intern.Client.IProjectListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.IProjectListEvents) (APlayTest.Client.ProjectList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Client.IBlockSymbolListEvents CreateBlockSymbolListEvents(APlay.Generated.Intern.Client.IBlockSymbolListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.IBlockSymbolListEvents) (APlayTest.Client.BlockSymbolList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Client.ISheetListEvents CreateSheetListEvents(APlay.Generated.Intern.Client.ISheetListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.ISheetListEvents) (APlayTest.Client.SheetList.CreateForAPlay(impl))));
    }
    public APlay.Generated.Intern.Client.IHistoryEntryListEvents CreateHistoryEntryListEvents(APlay.Generated.Intern.Client.IHistoryEntryListImpl impl)
    {
      return (((APlay.Generated.Intern.Client.IHistoryEntryListEvents) (APlayTest.Client.HistoryEntryList.CreateForAPlay(impl))));
    }
  }
  
}
namespace APlayTest.Client
{
  public partial class APlayUserResolveEngine : APlay.Generated.Intern.Client.IAPlayResolve
  {
    public static void SetResolveEngine(APlayTest.Client.IAPlayUserResolveEngine inter)
    {
      inter_ = inter;
      APlay.Generated.Intern.Client.APlayInternUserResolver.SetResolveEngine(new APlayTest.Client.APlayUserResolveEngine());
    }
    static private APlayTest.Client.IAPlayUserResolveEngine inter_;
  }
  
}
namespace APlayTest.Client
{
  public partial class Delegates
  {
    public delegate void void_ConnectionList(APlayTest.Client.ConnectionList returnValue);
    public delegate void void_int32(int NewId__);
    public delegate void void_int32_BlockSymbol(int NewId__, APlayTest.Client.BlockSymbol this_);
    public delegate void void_ConnectorList(APlayTest.Client.ConnectorList Connectors__);
    public delegate void void_ConnectorList_BlockSymbol(APlayTest.Client.ConnectorList Connectors__, APlayTest.Client.BlockSymbol this_);
    public delegate void void_Connector(APlayTest.Client.Connector element);
    public delegate void void_Connector_BlockSymbol(APlayTest.Client.Connector element, APlayTest.Client.BlockSymbol this_);
    public delegate void void_();
    public delegate void void_BlockSymbol(APlayTest.Client.BlockSymbol this_);
    public delegate void void_int32_Connector(int pos, APlayTest.Client.Connector element);
    public delegate void void_int32_Connector_BlockSymbol(int pos, APlayTest.Client.Connector element, APlayTest.Client.BlockSymbol this_);
    public delegate void void_float64(double NewPositionX__);
    public delegate void void_float64_BlockSymbol(double NewPositionX__, APlayTest.Client.BlockSymbol this_);
    public delegate void void_AplaySize(APlayTest.Client.AplaySize NewSize__);
    public delegate void void_AplaySize_BlockSymbol(APlayTest.Client.AplaySize NewSize__, APlayTest.Client.BlockSymbol this_);
    public delegate void void_boolean(bool returnValue);
    public delegate void void_int32_Client(int NewId__, APlayTest.Client.Client this_);
    public delegate void void_Project(APlayTest.Client.Project NewCurrentProject__);
    public delegate void void_Project_Client(APlayTest.Client.Project NewCurrentProject__, APlayTest.Client.Client this_);
    public delegate void void_ProjectManager(APlayTest.Client.ProjectManager NewProjectManager__);
    public delegate void void_ProjectManager_Client(APlayTest.Client.ProjectManager NewProjectManager__, APlayTest.Client.Client this_);
    public delegate void void_UndoManager(APlayTest.Client.UndoManager NewUndoManager__);
    public delegate void void_UndoManager_Client(APlayTest.Client.UndoManager NewUndoManager__, APlayTest.Client.Client this_);
    public delegate void void_int32_Connection(int NewId__, APlayTest.Client.Connection this_);
    public delegate void void_uint32(uint NewColor__);
    public delegate void void_uint32_Connection(uint NewColor__, APlayTest.Client.Connection this_);
    public delegate void void_Connector_Connection(APlayTest.Client.Connector NewFrom__, APlayTest.Client.Connection this_);
    public delegate void void_AplayPoint(APlayTest.Client.AplayPoint NewFromPosition__);
    public delegate void void_AplayPoint_Connection(APlayTest.Client.AplayPoint NewFromPosition__, APlayTest.Client.Connection this_);
    public delegate void void_ConnectionList_Connector(APlayTest.Client.ConnectionList Connections__, APlayTest.Client.Connector this_);
    public delegate void void_Connection(APlayTest.Client.Connection element);
    public delegate void void_Connection_Connector(APlayTest.Client.Connection element, APlayTest.Client.Connector this_);
    public delegate void void_int32_Connection_Connector(int pos, APlayTest.Client.Connection element, APlayTest.Client.Connector this_);
    public delegate void void_float64_Connector(double NewPositionX__, APlayTest.Client.Connector this_);
    public delegate void void_AplaySize_Connector(APlayTest.Client.AplaySize NewSize__, APlayTest.Client.Connector this_);
    public delegate void void_int32_Project(int NewId__, APlayTest.Client.Project this_);
    public delegate void void_ProjectDetail(APlayTest.Client.ProjectDetail NewProjectDetail__);
    public delegate void void_ProjectDetail_Project(APlayTest.Client.ProjectDetail NewProjectDetail__, APlayTest.Client.Project this_);
    public delegate void void_SheetManager(APlayTest.Client.SheetManager NewSheetManager__);
    public delegate void void_SheetManager_Project(APlayTest.Client.SheetManager NewSheetManager__, APlayTest.Client.Project this_);
    public delegate void void_boolean_ProjectManager(bool NewCanJoinProject__, APlayTest.Client.ProjectManager this_);
    public delegate void void_ProjectList(APlayTest.Client.ProjectList Projects__);
    public delegate void void_ProjectList_ProjectManager(APlayTest.Client.ProjectList Projects__, APlayTest.Client.ProjectManager this_);
    public delegate void void_Project_ProjectManager(APlayTest.Client.Project element, APlayTest.Client.ProjectManager this_);
    public delegate void void_int32_Project_ProjectManager(int pos, APlayTest.Client.Project element, APlayTest.Client.ProjectManager this_);
    public delegate void void_Client(APlayTest.Client.Client NewDataClient__);
    public delegate void void_Client_ProjectManager(APlayTest.Client.Client NewDataClient__, APlayTest.Client.ProjectManager this_);
    public delegate void void_WString(String NewName__);
    public delegate void void_WString_Sheet(String NewName__, APlayTest.Client.Sheet this_);
    public delegate void void_BlockSymbolList(APlayTest.Client.BlockSymbolList BlockSymbols__);
    public delegate void void_BlockSymbolList_Sheet(APlayTest.Client.BlockSymbolList BlockSymbols__, APlayTest.Client.Sheet this_);
    public delegate void void_BlockSymbol_Sheet(APlayTest.Client.BlockSymbol element, APlayTest.Client.Sheet this_);
    public delegate void void_Sheet(APlayTest.Client.Sheet this_);
    public delegate void void_int32_BlockSymbol_Sheet(int pos, APlayTest.Client.BlockSymbol element, APlayTest.Client.Sheet this_);
    public delegate void void_ConnectionList_Sheet(APlayTest.Client.ConnectionList Connections__, APlayTest.Client.Sheet this_);
    public delegate void void_Connection_Sheet(APlayTest.Client.Connection element, APlayTest.Client.Sheet this_);
    public delegate void void_int32_Connection_Sheet(int pos, APlayTest.Client.Connection element, APlayTest.Client.Sheet this_);
    public delegate void void_ConnectorList_Sheet(APlayTest.Client.ConnectorList Connectors__, APlayTest.Client.Sheet this_);
    public delegate void void_Connector_Sheet(APlayTest.Client.Connector element, APlayTest.Client.Sheet this_);
    public delegate void void_int32_Connector_Sheet(int pos, APlayTest.Client.Connector element, APlayTest.Client.Sheet this_);
    public delegate void void_int32_Sheet(int NewId__, APlayTest.Client.Sheet this_);
    public delegate void void_SheetList(APlayTest.Client.SheetList Sheets__);
    public delegate void void_SheetList_SheetManager(APlayTest.Client.SheetList Sheets__, APlayTest.Client.SheetManager this_);
    public delegate void void_Sheet_SheetManager(APlayTest.Client.Sheet element, APlayTest.Client.SheetManager this_);
    public delegate void void_int32_Sheet_SheetManager(int pos, APlayTest.Client.Sheet element, APlayTest.Client.SheetManager this_);
    public delegate void void_Client_UndoManager(APlayTest.Client.Client NewDataClient__, APlayTest.Client.UndoManager this_);
    public delegate void void_boolean_UndoManager(bool NewCanUndo__, APlayTest.Client.UndoManager this_);
    public delegate void void_HistoryEntryList(APlayTest.Client.HistoryEntryList History__);
    public delegate void void_HistoryEntryList_UndoManager(APlayTest.Client.HistoryEntryList History__, APlayTest.Client.UndoManager this_);
    public delegate void void_HistoryEntry(APlayTest.Client.HistoryEntry element);
    public delegate void void_HistoryEntry_UndoManager(APlayTest.Client.HistoryEntry element, APlayTest.Client.UndoManager this_);
    public delegate void void_int32_HistoryEntry(int pos, APlayTest.Client.HistoryEntry element);
    public delegate void void_int32_HistoryEntry_UndoManager(int pos, APlayTest.Client.HistoryEntry element, APlayTest.Client.UndoManager this_);
    public delegate void void_int32_UndoManager(int NewActiveHistoryEntryId__, APlayTest.Client.UndoManager this_);
    public delegate void void_Client_APlayClientSkeleton(APlayTest.Client.Client clientObject, APlayTest.Client.APlayClientSkeleton this_);
    public delegate void void_APlayClientSkeleton(APlayTest.Client.APlayClientSkeleton this_);
    public delegate void void_String(String reason);
    public delegate void void_String_APlayClientSkeleton(String reason, APlayTest.Client.APlayClientSkeleton this_);
  }
}
